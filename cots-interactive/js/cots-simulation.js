// Generated by Haxe
(function ($hx_exports) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var render_ShaderPass = function(renderer,width,height,options) {
	this.renderer = renderer;
	this.camera = render_ShaderPass.staticCamera;
	this.planeGeom = render_ShaderPass.staticPlaneGeom;
	this.renderTarget = new THREE.WebGLRenderTarget(width,height,options);
	this.scene = new THREE.Scene();
	this.quad = new THREE.Mesh(this.planeGeom,null);
	this.scene.add(this.quad);
};
render_ShaderPass.__name__ = true;
render_ShaderPass.prototype = {
	dispose: function() {
		this.renderTarget.dispose();
	}
	,render: function(forceClear,dt_ms) {
		if(dt_ms == null) dt_ms = 16.6666666666666679;
		if(forceClear == null) forceClear = false;
		this.renderer.render(this.scene,this.camera,this.renderTarget,forceClear);
	}
	,setMaterial: function(material) {
		this.quad.material = material;
	}
	,get_width: function() {
		return this.renderTarget.width;
	}
	,get_height: function() {
		return this.renderTarget.height;
	}
};
var shaderlib_Chunks = function() { };
shaderlib_Chunks.__name__ = true;
var Common = function() { };
Common.__name__ = true;
var AlgaeMap = function(renderer,nitrateMap,w,h) {
	this.nitrateMap = nitrateMap;
	render_ShaderPass.call(this,renderer,w,h,{ wrapS : THREE.ClampToEdgeWrapping, wrapT : THREE.ClampToEdgeWrapping, magFilter : THREE.LinearFilter, minFilter : THREE.LinearFilter, anisotropy : 1, format : THREE.RGBAFormat, type : THREE.UnsignedByteType, depthBuffer : false, stencilBuffer : false});
	this.algaeDensity = new render_ShaderPass2Phase(renderer,w,h,{ wrapS : THREE.ClampToEdgeWrapping, wrapT : THREE.ClampToEdgeWrapping, magFilter : THREE.NearestFilter, minFilter : THREE.NearestFilter, anisotropy : 1, format : THREE.RGBFormat, type : THREE.UnsignedByteType, depthBuffer : false, stencilBuffer : false});
	this.colorShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : AlgaeMap.colorFrag, uniforms : { algaeDensity : { type : "t"}}});
	this.stepShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : AlgaeMap.stepFrag, uniforms : { algaeDensity : { type : "t"}, nitrateDensity : { type : "t"}, growthMultiplier : { type : "f", value : 0.5}, attenuation : { type : "f", value : 0.5}, dt : { type : "f"}}});
};
AlgaeMap.__name__ = true;
AlgaeMap.__super__ = render_ShaderPass;
AlgaeMap.prototype = $extend(render_ShaderPass.prototype,{
	step: function(dt) {
		this.stepShader.uniforms.algaeDensity.value = this.algaeDensity.readTarget;
		this.stepShader.uniforms.nitrateDensity.value = this.nitrateMap.density.readTarget;
		this.stepShader.uniforms.dt.value = dt;
		this.algaeDensity.quad.material = this.stepShader;
		this.algaeDensity.render();
	}
	,render: function(forceClear,dt_ms) {
		if(dt_ms == null) dt_ms = 16.6666666666666679;
		if(forceClear == null) forceClear = false;
		this.colorShader.uniforms.algaeDensity.value = this.algaeDensity.readTarget;
		this.quad.material = this.colorShader;
		render_ShaderPass.prototype.render.call(this,forceClear,dt_ms);
	}
});
var COTSParticle = function() {
	this._c = (function($this) {
		var $r;
		var this1;
		this1 = new THREE.Color();
		this1.setHex(null);
		$r = this1;
		return $r;
	}(this));
	this.alive = true;
	this.timeOfDeath = -1;
	this.maxAge = 20;
	THREE.Mesh.call(this,COTSParticle.geom,new THREE.MeshBasicMaterial({ color : 16711680, transparent : true}));
	var tmp;
	var this1;
	this1 = new THREE.Color();
	this1.setHex(44799);
	tmp = this1;
	var tmp1;
	var this2;
	this2 = new THREE.Color();
	this2.setHex(44799);
	tmp1 = this2;
	var tmp2;
	var this3;
	this3 = new THREE.Color();
	this3.setHex(8781883);
	tmp2 = this3;
	this.gradient = new math_Lerp([tmp,tmp1,tmp2],$bind(this,this.mixColors));
	this.velocity = new THREE.Vector3();
	this.set_radius(0.05);
	this.set_age(0);
	this.ry = Math.random() * 1024;
};
COTSParticle.__name__ = true;
COTSParticle.__super__ = THREE.Mesh;
COTSParticle.prototype = $extend(THREE.Mesh.prototype,{
	mixColors: function(a,b,alpha) {
		this._c.r = (b.r - a.r) * alpha + a.r;
		this._c.g = (b.g - a.g) * alpha + a.g;
		this._c.b = (b.b - a.b) * alpha + a.b;
		return this._c;
	}
	,set_radius: function(v) {
		this.scale.set(v,v,1);
		return this.radius = v;
	}
	,set_age: function(v) {
		this.age = v;
		var u = (function($this) {
			var $r;
			var x = $this.age / $this.maxAge;
			if(x < 0) x = 0;
			if(x > 1) x = 1;
			$r = x;
			return $r;
		}(this));
		this.material.color.copy(this.gradient.getPoint(u));
		return v;
	}
});
var Main = $hx_exports["CotsSimulation"] = function(container,assetRoot) {
	if(assetRoot == null) assetRoot = "";
	this.lastFrame_ms = -1;
	this.reefHealth = 1;
	this.spawnValue = 0;
	this.simulationTime = 0;
	this.renderSize = new THREE.Vector2(1336,1024);
	this.spawnRange = 20;
	this.spawnGrowthMultiplier = 0.25;
	this.spawnAttenuation = 0.25;
	this.spawnBoxes = [{ height : 0.228515625, y : -0.300814244140624965, x : -0.5075141015625, width : 0.476562496093749954},{ height : 0.126953123046875, y : -0.513704880859374935, x : -0.200873478515624926, width : 0.154296875},{ height : 0.072265625, y : -0.521517369140625, x : -0.269232853515624926, width : 0.068359375},{ height : 0.119140630859375, y : -0.30276737499999995, x : 0.357720261718749932, width : 0.173828130859375},{ height : 0.119140630859375, y : -0.19534549999999995, x : 0.27178276171875, width : 0.173828130859375},{ height : 0.08398437890625, y : -0.24417363281249993, x : 0.787407789062500085, width : 0.13281250390625},{ height : 0.08398437890625, y : -0.18167363281249993, x : 0.703423414062500196, width : 0.13281250390625},{ height : 0.08398437890625, y : -0.10940800781249993, x : 0.6409234140625, width : 0.13281250390625},{ height : 0.1113281328125, y : -0.23440800390624994, x : -0.946967210937499915, width : 0.171875009765625},{ height : 0.08398437890625, y : -0.38870488281249993, x : -0.0680609609375000396, width : 0.13281250390625},{ height : 0.08398437890625, y : -0.22073613281249993, x : 0.765923414062500085, width : 0.13281250390625},{ height : 0.126953123046875, y : -0.468783005859374935, x : -0.275092228515625, width : 0.154296875},{ height : 0.126953123046875, y : -0.437533005859374935, x : -0.417670353515624926, width : 0.154296875},{ height : 0.126953123046875, y : -0.414095505859374935, x : -0.150092228515625037, width : 0.154296875},{ height : 0.126953123046875, y : -0.453158005859374935, x : -0.511420353515625, width : 0.154296875},{ height : 0.0859375, y : -0.244173634765624925, x : -0.964545359375, width : 0.095703123046875},{ height : 0.0859375, y : -0.279329884765624925, x : -0.886420359375000078, width : 0.095703123046875},{ height : 0.0859375, y : -0.339876759765624925, x : -0.831732859375, width : 0.095703123046875},{ height : 0.0859375, y : -0.365267384765624925, x : -0.818060984375000078, width : 0.095703123046875},{ height : 0.08398437890625, y : -0.25198613281249993, x : 0.803032789062500196, width : 0.13281250390625},{ height : 0.0859375, y : -0.113314259765624925, x : -1.321967234375, width : 0.214843755859375},{ height : 0.0859375, y : -0.154329884765624925, x : -1.339545359375, width : 0.095703123046875},{ height : 0.0859375, y : 0.162076365234374964, x : 1.08037651562499959, width : 0.214843755859375},{ height : 0.0859375, y : 0.115201365234374964, x : 1.18193901562499981, width : 0.095703123046875},{ height : 0.0859375, y : 0.183560740234374964, x : 1.24248589062499981, width : 0.095703123046875},{ height : 0.0859375, y : -0.0840173847656249251, x : -1.474310984375, width : 0.214843755859375},{ height : 0.06640625390625, y : -0.367220509765624925, x : 0.324517257812500071, width : 0.214843755859375},{ height : 0.06640625390625, y : -0.404329884765624925, x : 0.347954753906249858, width : 0.09179687890625}];
	this.forcePoints = [{ x : -0.353861244140625086, y : 0.26776597265625, radius : 0.070863810546875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.711962472656250123, y : 0.3298413828125, radius : 0.115955513671875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.755016138671875, y : 0.433102228515624965, radius : 0.18295619921875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.917550109375, y : 0.52328567187500008, radius : 0.12096570703125, multiplier : 700., exponent : 0.5, pad : 10},{ x : -1.14088569335937495, y : 0.4935642109375, radius : 0.156631466796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.279545683593749927, y : 0.473438525390625031, radius : 0.0538801152343749909, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.149450582031249946, y : 0.515558123046875, radius : 0.063390990234375, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.0307345507812499114, y : 0.2157958671875, radius : 0.05642766796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.381787527343750099, y : 0.397945998046875, radius : 0.101434458984375017, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.541943777343750099, y : 0.503414748046875, radius : 0.101434458984375017, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.7218860234375, y : 0.494243554687500031, radius : 0.149837982421875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.935455984375, y : 0.5543658359375, radius : 0.139647775390625, multiplier : 700., exponent : 0.5, pad : 10},{ x : 1.11420940234375, y : 0.423336623046875, radius : 0.101434458984375017, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.97163127734375021, y : 0.433102248046875, radius : 0.101434458984375017, multiplier : 700., exponent : 0.5, pad : 10},{ x : 1.30561565234374988, y : 0.458492873046875, radius : 0.101434458984375017, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.22954059179687486, y : 0.563961623046875, radius : 0.05065321484375, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.20024371484374992, y : 0.470211623046875, radius : 0.04479383984375, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.95707965234374992, y : 0.127438185546875027, radius : 0.04577040234375, multiplier : 700., exponent : 0.5, pad : 10},{ x : -1.13748892773437493, y : 0.183272109375000047, radius : 0.049634185546875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -1.00077013671875, y : 0.410004419921875, radius : 0.109926310546875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.737522939453125, y : 0.201104994140625, radius : 0.060673591796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.421626138671875, y : 0.119583226562499978, radius : 0.050483376953125, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.531086109375, y : 0.359562853515625, radius : 0.0964242656249999913, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.435977427734375, y : 0.4105139375, radius : 0.08963078515625, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.147922042968749945, y : 0.279654537109375045, radius : 0.03545280859375, multiplier : 700., exponent : 0.5, pad : 10},{ x : -1.35572945117187493, y : 0.525790779296875, radius : 0.21327208203125, multiplier : 700., exponent : 0.5, pad : 10},{ x : -1.5207685078125, y : 0.58411349609375, radius : 0.30409240234375, multiplier : 700., exponent : 0.5, pad : 10},{ x : 1.6042314453125, y : 0.572850853515624925, radius : 0.27088927734375, multiplier : 700., exponent : 0.5, pad : 10},{ x : 1.5261065058593748, y : 0.588502685546875, radius : 0.26893615234375, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.120578300781250106, y : 0.1923583671875, radius : 0.05642766796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.149875175781250092, y : 0.0771239921874999901, radius : 0.05642766796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.07760955078125, y : 0.6181396171875, radius : 0.05642766796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.23971892578125, y : 0.3818114921875, radius : 0.05642766796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.0539172734374998575, y : 0.205181054687500031, radius : 0.149837982421875, multiplier : 700., exponent : 0.5, pad : 10},{ x : 0.00801884374999992794, y : 0.094829472656249969, radius : 0.10198641796875, multiplier : 700., exponent : 0.5, pad : 10},{ x : -0.531149189453125, y : -0.159504896484375047, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.47934374609375, y : -0.10769943164062501, radius : 0.04763719921875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.540081173828125, y : -0.23393801171874995, radius : 0.044064408203125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.467608660156250078, y : -0.185518158203124894, radius : 0.0378939453125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.0709932636718751259, y : -0.168886720703125048, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.0539354277343750202, y : -0.229442126953125047, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.0965801074218749778, y : -0.272086775390625091, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.57805830859375, y : -0.421343054687500107, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.653965783203125, y : -0.439253814453125058, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.605350886718749925, y : -0.491280294921875083, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.652260001953125, y : -0.570599324218749926, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.634349246093750097, y : -0.636272109374999895, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.056531296875, y : -0.272939675781249891, radius : 0.074994787109375, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.03265028515625, y : -0.376992630859374955, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.984035384765625, y : -0.455458767578125, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.897893201171874877, y : -0.415372794921875066, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.885952693359375, y : -0.494691855468750052, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.821985703125, y : -0.538189388671874935, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.7469311328125, y : -0.536483623046875, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.697463330078124888, y : -0.497250533203124956, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.19469994726562501, y : -0.297247025390625, radius : 0.0988757988281250139, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.600233529296875, y : -0.70535640625, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.55929466015625, y : -0.75652999414062494, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.5439425859375, y : -0.83926064453125, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.5055623984375, y : -0.813673861328124914, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.477306052734375, y : -0.74128884765625, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.429654921874999929, y : -0.677569158203124911, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.3895689511718749, y : -0.639683669921875087, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.322190400390625, y : -0.66100598046875, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.247988712890625046, y : -0.710473783203124931, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.173787017578125091, y : -0.713032460937500057, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.352041619140625095, y : -0.785528349609375, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.7469310859375, y : -0.723267156249999932, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.9277443964843749, y : -0.617508421875, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.1170866660156249, y : -0.485310005859374893, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.126024972656249845, y : -0.852054001953125084, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.0850861406250001256, y : -0.709620890624999889, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.00105605664062500756, y : -0.706209318359375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.105109017578125158, y : -0.536483607421875064, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.076110642578125054, y : -0.6243315859375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.0607585722656250743, y : -0.568040646484375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.155429701171875045, y : -0.603009261718749912, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.248163529296874769, y : -0.36590499804687493, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.277393406250000085, y : -0.470810845703125036, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.22792563867187518, y : -0.393197574218749901, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.215132240234375022, y : -0.42731329296875, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.226219851562499963, y : -0.470810839843750051, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.220249601562500064, y : -0.518572847656249891, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.219396707031249916, y : -0.570599328124999916, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.263747144531250144, y : -0.410255435546875047, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.114490869140625035, y : -0.313878525390625107, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.132401619140624982, y : -0.341171097656250089, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.151165265624999934, y : -0.315584312499999964, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.146047910156249905, y : -0.347141351562499922, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.311509126953124937, y : -0.550377234375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.157988417968750128, y : -0.765058914062499928, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.53411422265625, y : -0.19617929296875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.537525783203125163, y : -0.240529738281249905, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.604051451171875198, y : -0.297673552734375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.802144388671874875, y : -0.0162444492187499, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.843160013671875, y : 0.00523992578124998776, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.856831888671874875, y : 0.0462555507812499878, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.852925638671874875, y : 0.108755550781249988, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.937404673828125201, y : -0.0581726464843750346, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.78506092382812509, y : -0.440985146484375035, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.10049063085937515, y : -0.387274164062499926, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.17373279882812542, y : -0.118719521484375035, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.903706888671874875, y : 0.118521175781249988, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.9632771796875, y : 0.0843415761718749879, radius : 0.066529787109375, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.02577717968750037, y : 0.0530915761718749879, radius : 0.066529787109375, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.11171467968750015, y : -0.00354904882812490108, radius : 0.066529787109375, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.20741780468750015, y : -0.00940842382812490108, radius : 0.066529787109375, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.803496564453125117, y : -0.0471940566406250372, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.843160013671875, y : -0.135385074218749901, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.69427047265625, y : -0.33289804296875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.897395472656250082, y : -0.43250741796875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.96770797265625, y : -0.39930429296875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.01458297265625, y : -0.34266366796875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.01067672265625, y : -0.28406991796875003, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.036155625, y : -0.19207687304687493, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.504868501953124937, y : -0.521080359375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.686509126953125, y : -0.474205359374999968, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.625962251953125, y : -0.249595984374999968, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.381821626953125048, y : -0.552330359375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.434556001953125104, y : -0.544517859375, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.561509126953124937, y : -0.489830359374999968, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.620102876953124826, y : -0.452720984374999968, radius : 0.055378248046875, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.411895263671875, y : -0.713789263671875, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.663360703125, y : -0.628339835937500091, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.30534437890625021, y : 0.0187389355468750018, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -1.789084953125, y : -1.23126100976562514, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.29855089257812484, y : -0.191858867187499893, radius : 0.101434458984375017, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.162641310546874862, y : 0.265002533203124946, radius : 0.05651258984375, multiplier : -100., exponent : 1, pad : 0},{ x : -0.112242212890625054, y : 0.395734548828125, radius : 0.0555360273437500093, multiplier : -100., exponent : 1, pad : 0},{ x : -0.162046878906249886, y : 0.108752542968750032, radius : 0.062371962890625, multiplier : -100., exponent : 1, pad : 0},{ x : -0.44227784179687496, y : 0.285382974609375, radius : 0.050483376953125, multiplier : -100., exponent : 1, pad : 0},{ x : 0.0706297246093751246, y : 0.402570455078124945, radius : 0.03859479296875, multiplier : -100., exponent : 1, pad : 0},{ x : 0.131771029296874953, y : 0.380491650390625047, radius : 0.03859479296875, multiplier : -100., exponent : 1, pad : 0},{ x : -0.542481673828125, y : 0.472203601562499964, radius : 0.101434458984375017, multiplier : -100., exponent : 1, pad : 0},{ x : 0.284624294921875, y : 0.20555958984375, radius : 0.101434458984375017, multiplier : -100., exponent : 1, pad : 0},{ x : 0.408605292968749922, y : 0.6250568671875, radius : 0.101434458984375017, multiplier : -100., exponent : 1, pad : 0},{ x : 0.812510962890625077, y : -0.0937684453125000594, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.875611748046874694, y : -0.157620423828124911, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.910166937500000106, y : -0.182410025390624897, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.942468519531249882, y : -0.198936410156250076, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.981530914062500259, y : -0.21696520703125, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.01308130664062523, y : -0.252271599609374952, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 1.02510050976562495, y : -0.309362791015624916, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : 0.6682806015625, y : -0.296592400390625066, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.63588534375, y : -0.371508861328125, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.667972890624999871, y : -0.34221153515625, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.701455548828125, y : -0.319889763671874938, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.719591990234374923, y : -0.286407107421875029, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.681923996093750096, y : -0.276641326171875, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.649138896484375, y : -0.298265578125000097, radius : 0.04699880078125, multiplier : -0.0005, exponent : 6, pad : 0.001},{ x : -0.606588017578125, y : -0.349187087890624914, radius : 0.032350142578125, multiplier : -0.0005, exponent : 6, pad : 0.001}];
	this.timeMultiplier = 0.6;
	if(container == null) container = window.document.body;
	this.container = container;
	var tmp;
	var _this = window.document;
	tmp = _this.createElement("canvas");
	this.canvas = tmp;
	this.canvas.style.position = "absolute";
	container.appendChild(this.canvas);
	this.fitCanvas();
	this.renderer = new THREE.WebGLRenderer({ canvas : this.canvas, antialias : true, depth : false, alpha : false});
	var tmp1;
	var this1;
	this1 = new THREE.Color();
	this1.setHex(268841);
	tmp1 = this1;
	this.renderer.setClearColor(tmp1);
	this.camera = new THREE.OrthographicCamera(-1,1,1,-1,0,1);
	this.quadScene = new THREE.Scene();
	this.scene = new THREE.Scene();
	var tmp2;
	var cr = this.container.clientWidth / this.container.clientHeight;
	var rr = this.renderSize.x / this.renderSize.y;
	if(cr < rr) tmp2 = this.container.clientHeight * rr | 0; else tmp2 = this.container.clientWidth;
	var tmp3;
	var cr1 = this.container.clientWidth / this.container.clientHeight;
	var rr1 = this.renderSize.x / this.renderSize.y;
	if(cr1 < rr1) tmp3 = this.container.clientHeight; else tmp3 = this.container.clientWidth / rr1 | 0;
	this.scene.scale.x = 1 / (tmp2 / tmp3);
	this.quadScene.add(this.scene);
	this.mouse = new THREE.Vector2();
	var planeGeom = new THREE.PlaneBufferGeometry(2,2,1,1);
	var npotTexture = function(tex) {
		tex.wrapS = THREE.ClampToEdgeWrapping;
		tex.wrapT = THREE.ClampToEdgeWrapping;
		tex.minFilter = THREE.LinearFilter;
		tex.magFilter = THREE.LinearFilter;
		return tex;
	};
	var landTex = npotTexture(THREE.ImageUtils.loadTexture("assets/land.png"));
	var landMaskTex = landTex;
	var reefTex = npotTexture(THREE.ImageUtils.loadTexture("assets/reef.png"));
	var reefNoiseTex = npotTexture(THREE.ImageUtils.loadTexture("assets/reef-destruction-noise.jpg"));
	var nitrateSource = npotTexture(THREE.ImageUtils.loadTexture("assets/nitrate-source.jpg"));
	var landMaterial;
	this.reefMaterial = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : "\r\n\t\t\t\tuniform sampler2D map;\r\n\t\t\t\tuniform sampler2D alpha;\r\n\r\n\t\t\t\tuniform float alphaContrast;\r\n\t\t\t\tuniform float alphaU;\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvoid main(){\r\n\t\t\t\t\tvec4 m = texture2D(map, vUv);\r\n\r\n\t\t\t\t\tfloat a = texture2D(alpha, vUv).r;\r\n\r\n\t\t\t\t\t//apply brightness and contrast\r\n\t\t\t\t\tfloat maximizingBrightness = .5*alphaContrast + .5;\r\n\t\t\t\t\tfloat alphaBrightness = mix(-maximizingBrightness, maximizingBrightness, alphaU);\r\n\r\n\t\t\t\t\ta = (a - .5) * alphaContrast + .5 + alphaBrightness;\r\n\t\t\t\t\ta = clamp(a, 0., 1.);\r\n\r\n\t\t\t\t\tm.a *= a;\r\n\t\t\t\t\tm.rgb *= a;\r\n\r\n\t\t\t\t\tgl_FragColor = m;\r\n\t\t\t\t}\r\n\t\t\t", uniforms : { map : { type : "t", value : reefTex}, alpha : { type : "t", value : reefNoiseTex}, alphaU : { type : "f", value : 1}, alphaContrast : { type : "f", value : 8}}, transparent : true});
	this.reefPlane = new THREE.Mesh(planeGeom,this.reefMaterial);
	this.quadScene.add(this.reefPlane);
	this.nitratePlane = new THREE.Mesh(planeGeom,new THREE.MeshBasicMaterial({ color : 16777215, blending : THREE.AdditiveBlending, transparent : true}));
	this.quadScene.add(this.nitratePlane);
	this.algaePlane = new THREE.Mesh(planeGeom,new THREE.MeshBasicMaterial({ color : 16777215, transparent : true}));
	this.quadScene.add(this.algaePlane);
	this.landPlane = new THREE.Mesh(planeGeom,new THREE.MeshBasicMaterial({ color : 16777215, map : landTex, transparent : true}));
	this.quadScene.add(this.landPlane);
	var tmp4;
	var cr2 = this.container.clientWidth / this.container.clientHeight;
	var rr2 = this.renderSize.x / this.renderSize.y;
	if(cr2 < rr2) tmp4 = this.container.clientHeight * rr2 | 0; else tmp4 = this.container.clientWidth;
	var tmp5;
	var cr3 = this.container.clientWidth / this.container.clientHeight;
	var rr3 = this.renderSize.x / this.renderSize.y;
	if(cr3 < rr3) tmp5 = this.container.clientHeight; else tmp5 = this.container.clientWidth / rr3 | 0;
	this.nitrateMap = new NitrateMap(this.renderer,nitrateSource,landMaskTex,math_POT.floorPowerOf2(tmp4 * .5),math_POT.floorPowerOf2(tmp5 * .5));
	var tmp6;
	var cr4 = this.container.clientWidth / this.container.clientHeight;
	var rr4 = this.renderSize.x / this.renderSize.y;
	if(cr4 < rr4) tmp6 = this.container.clientHeight * rr4 | 0; else tmp6 = this.container.clientWidth;
	var tmp7;
	var cr5 = this.container.clientWidth / this.container.clientHeight;
	var rr5 = this.renderSize.x / this.renderSize.y;
	if(cr5 < rr5) tmp7 = this.container.clientHeight; else tmp7 = this.container.clientWidth / rr5 | 0;
	this.algaeMap = new AlgaeMap(this.renderer,this.nitrateMap,math_POT.floorPowerOf2(tmp6 * .5),math_POT.floorPowerOf2(tmp7 * .5));
	this.particles = [];
	window.addEventListener("resize",$bind(this,this.onWindowResize),false);
	this.canvas.addEventListener("mousedown",$bind(this,this.onMouseDown),false);
	this.canvas.addEventListener("mouseup",$bind(this,this.onMouseUp),false);
	this.canvas.addEventListener("mousemove",$bind(this,this.onMouseMove),false);
	window.requestAnimationFrame($bind(this,this.update));
};
Main.__name__ = true;
Main.main = function() {
};
Main.prototype = {
	setNitrateAmount: function(v) {
		return this.nitrateMap.set_sourceMultiplier(v);
	}
	,setTimeMultiplier: function(v) {
		return this.timeMultiplier = v;
	}
	,update: function(t_ms) {
		var time_s = t_ms / 1000;
		var dt_ms = this.lastFrame_ms < 0?16.6666666666666679:Math.min(t_ms - this.lastFrame_ms,100.);
		dt_ms = Math.min(dt_ms,33.3333333333333357);
		this.lastFrame_ms = t_ms;
		var simulationDt = this.timeMultiplier * dt_ms / 1000;
		this.nitrateMap.step(simulationDt);
		this.nitrateMap.render();
		this.spawnValue = this.spawnValue - this.spawnValue * this.spawnAttenuation * simulationDt;
		this.spawnValue += this.spawnGrowthMultiplier * this.nitrateMap.get_sourceMultiplier() * simulationDt;
		this.spawnValue = (function($this) {
			var $r;
			var x = $this.spawnValue;
			if(x < 0) x = 0;
			if(x > 1) x = 1;
			$r = x;
			return $r;
		}(this));
		this.algaeMap.step(simulationDt);
		this.algaeMap.render();
		this.stepCOTS(simulationDt);
		var singleCotsDamageRate = 0.001;
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(this.isCOTSEatingCoral(p)) this.reefHealth -= this.reefHealth * singleCotsDamageRate * simulationDt;
		}
		this.reefHealth += (this.reefHealth + 1) * 0.05 * simulationDt;
		this.reefHealth = (function($this) {
			var $r;
			var x1 = $this.reefHealth;
			if(x1 < 0) x1 = 0;
			if(x1 > 1) x1 = 1;
			$r = x1;
			return $r;
		}(this));
		this.reefMaterial.uniforms.alphaU.value = this.reefHealth;
		this.nitratePlane.material.map = this.nitrateMap.renderTarget;
		this.algaePlane.material.map = this.algaeMap.renderTarget;
		this.render();
		this.simulationTime += simulationDt;
		window.requestAnimationFrame($bind(this,this.update));
	}
	,spawnCOTS: function() {
		var p = new COTSParticle();
		p.set_radius(0.001);
		var bi = Math.floor(Math.random() * this.spawnBoxes.length);
		var box = this.spawnBoxes[bi];
		p.position.x = box.x + Math.random() * box.width;
		p.position.y = box.y - Math.random() * box.height;
		this.particles.push(p);
		this.scene.add(p);
	}
	,removeCOTS: function(cots) {
		var i = this.particles.length - 1;
		while(i >= 0) {
			if(this.particles[i] == cots) {
				this.particles.splice(i,1);
				break;
			}
			i--;
		}
		this.scene.remove(cots);
	}
	,killAllCOTS: function() {
		var _g = 0;
		var _g1 = this.particles;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(!p.alive) continue;
			p.alive = false;
			p.timeOfDeath = this.simulationTime;
		}
	}
	,isCOTSEatingCoral: function(cots) {
		return cots.position.y > 0;
	}
	,stepCOTS: function(dt) {
		if(Math.random() < this.spawnValue * this.spawnRange * dt) this.spawnCOTS();
		var _g1 = 0;
		var _g = this.particles.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			var p = this.particles[i1];
			var rvx = math_Noise.valueNoise2D(this.simulationTime + p.ry,p.ry) * 0.1;
			var rvy = math_Noise.valueNoise2D(this.simulationTime - p.ry,p.ry) * 0.1;
			p.velocity.x = p.velocity.x + (rvx - p.velocity.x) * 500 * dt * dt;
			p.velocity.y = p.velocity.y + (rvy - p.velocity.y) * 500 * dt * dt;
			var _g2 = 0;
			var _g3 = this.forcePoints;
			while(_g2 < _g3.length) {
				var q = _g3[_g2];
				++_g2;
				var dx = q.x - p.position.x;
				var dy = q.y - p.position.y;
				var dsq = dx * dx + dy * dy;
				var d = Math.sqrt(dsq);
				if(d < 0.001) continue;
				var a = q.multiplier * (q.radius * q.radius + p.radius * p.radius) / Math.pow(d + q.pad,q.exponent);
				var nx = dx / d;
				var ny = dy / d;
				p.velocity.x += a * nx * dt * dt;
				p.velocity.y += a * ny * dt * dt;
			}
			var extraDampening = p.alive?0:300;
			p.velocity.x = p.velocity.x - (100.0 + extraDampening) * p.velocity.x * dt * dt;
			p.velocity.y = p.velocity.y - (100.0 + extraDampening) * p.velocity.y * dt * dt;
			var r = p.radius;
			var dr = p.age * 0.0005 * (math_Noise.valueNoise2D(this.simulationTime,p.ry - 121) * .5 + .5) - r * r;
			if(dr < 0) dr = 0;
			p.set_radius(p.radius + dr * dt);
			p.position.x += p.velocity.x * dt;
			p.position.y += p.velocity.y * dt;
			if(p.age > p.maxAge && p.alive) {
				p.alive = false;
				p.timeOfDeath = this.simulationTime;
			} else {
				p.set_age(p.age + dt);
				if(this.isCOTSEatingCoral(p)) p.set_age(p.age + 2 * (1 - this.reefHealth) * dt);
			}
		}
		var i = this.particles.length;
		while(--i >= 0) {
			var p1 = this.particles[i];
			if(p1.alive) continue;
			var u = (this.simulationTime - p1.timeOfDeath) / 2.5;
			p1.material.opacity = 1 - THREE.Math.smootherstep(u,0,1);
			if(u > 1) {
				this.removeCOTS(p1);
				continue;
			}
		}
	}
	,render: function() {
		this.renderer.setRenderTarget(null);
		this.renderer.render(this.quadScene,this.camera);
	}
	,fitCanvas: function() {
		var tmp;
		var cr = this.container.clientWidth / this.container.clientHeight;
		var rr = this.renderSize.x / this.renderSize.y;
		if(cr < rr) tmp = this.container.clientHeight * rr | 0; else tmp = this.container.clientWidth;
		this.canvas.width = tmp;
		var tmp1;
		var cr1 = this.container.clientWidth / this.container.clientHeight;
		var rr1 = this.renderSize.x / this.renderSize.y;
		if(cr1 < rr1) tmp1 = this.container.clientHeight; else tmp1 = this.container.clientWidth / rr1 | 0;
		this.canvas.height = tmp1;
		var tmp2;
		var cr2 = this.container.clientWidth / this.container.clientHeight;
		var rr2 = this.renderSize.x / this.renderSize.y;
		if(cr2 < rr2) tmp2 = this.container.clientHeight * rr2 | 0; else tmp2 = this.container.clientWidth;
		var dx = tmp2 - window.innerWidth;
		var tmp3;
		var cr3 = this.container.clientWidth / this.container.clientHeight;
		var rr3 = this.renderSize.x / this.renderSize.y;
		if(cr3 < rr3) tmp3 = this.container.clientHeight; else tmp3 = this.container.clientWidth / rr3 | 0;
		var dy = tmp3 - window.innerHeight;
		this.canvas.style.left = -dx * .5 + "px";
		this.canvas.style.top = -dy * .5 + "px";
	}
	,handleResize: function() {
		this.fitCanvas();
		var tmp;
		var cr = this.container.clientWidth / this.container.clientHeight;
		var rr = this.renderSize.x / this.renderSize.y;
		if(cr < rr) tmp = this.container.clientHeight * rr | 0; else tmp = this.container.clientWidth;
		var tmp1;
		var cr1 = this.container.clientWidth / this.container.clientHeight;
		var rr1 = this.renderSize.x / this.renderSize.y;
		if(cr1 < rr1) tmp1 = this.container.clientHeight; else tmp1 = this.container.clientWidth / rr1 | 0;
		this.renderer.setViewport(0,0,tmp,tmp1);
	}
	,handleMouseEvent: function(e) {
		var canvasBounds = this.canvas.getBoundingClientRect();
		var nx = (e.pageX - canvasBounds.left) / canvasBounds.width;
		var ny = 1 - (e.pageY - canvasBounds.top) / canvasBounds.height;
		this.mouse.set(nx * 2 - 1,ny * 2 - 1);
	}
	,onWindowResize: function(e) {
		this.handleResize();
	}
	,onMouseDown: function(e) {
		this.handleMouseEvent(e);
	}
	,onMouseUp: function(e) {
		this.handleMouseEvent(e);
	}
	,onMouseMove: function(e) {
		this.handleMouseEvent(e);
	}
	,getAspect: function() {
		var tmp;
		var cr = this.container.clientWidth / this.container.clientHeight;
		var rr = this.renderSize.x / this.renderSize.y;
		if(cr < rr) tmp = this.container.clientHeight * rr | 0; else tmp = this.container.clientWidth;
		var tmp1;
		var cr1 = this.container.clientWidth / this.container.clientHeight;
		var rr1 = this.renderSize.x / this.renderSize.y;
		if(cr1 < rr1) tmp1 = this.container.clientHeight; else tmp1 = this.container.clientWidth / rr1 | 0;
		return tmp / tmp1;
	}
	,getWidth: function() {
		var cr = this.container.clientWidth / this.container.clientHeight;
		var rr = this.renderSize.x / this.renderSize.y;
		return cr < rr?this.container.clientHeight * rr | 0:this.container.clientWidth;
	}
	,getHeight: function() {
		var cr = this.container.clientWidth / this.container.clientHeight;
		var rr = this.renderSize.x / this.renderSize.y;
		return cr < rr?this.container.clientHeight:this.container.clientWidth / rr | 0;
	}
};
Math.__name__ = true;
var NitrateMap = function(renderer,source,landMask,w,h) {
	this.diffusionIterations = 1;
	this.simTime = 0;
	this.simScale = 0.5;
	var aspect = w / h;
	render_ShaderPass.call(this,renderer,w,h,{ wrapS : THREE.ClampToEdgeWrapping, wrapT : THREE.ClampToEdgeWrapping, magFilter : THREE.LinearFilter, minFilter : THREE.LinearFilter, anisotropy : 1, format : THREE.RGBAFormat, type : THREE.UnsignedByteType, depthBuffer : false, stencilBuffer : false});
	this.density = new render_ShaderPass2Phase(renderer,w,h,{ wrapS : THREE.ClampToEdgeWrapping, wrapT : THREE.ClampToEdgeWrapping, magFilter : THREE.NearestFilter, minFilter : THREE.NearestFilter, anisotropy : 1, format : THREE.RGBFormat, type : THREE.UnsignedByteType, depthBuffer : false, stencilBuffer : false});
	this.velocity = new render_ShaderPass(renderer,w * .5 | 0,h * .5 | 0,{ wrapS : THREE.ClampToEdgeWrapping, wrapT : THREE.ClampToEdgeWrapping, magFilter : THREE.LinearFilter, minFilter : THREE.LinearFilter, anisotropy : 1, format : THREE.RGBAFormat, type : THREE.UnsignedByteType, depthBuffer : false, stencilBuffer : false});
	this.colorShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : NitrateMap.colorFrag, uniforms : { density : { type : "t"}}});
	this.sourceSinkShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : NitrateMap.sourceSinkFrag, uniforms : { density : { type : "t"}, source : { type : "t", value : source}, dt : { type : "f"}, sourceMultiplier : { type : "f", value : 1.0}, attenuation : { type : "f", value : 0.5}}});
	this.velocityShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : NitrateMap.velocityFrag, uniforms : { landMask : { type : "t", value : landMask}, time : { type : "f"}, aspect : { type : "f", value : aspect}, noiseMultiplier : { type : "f", value : 0.25}, noiseScale : { type : "f", value : 4}, underCurrentMagnitude : { type : "f", value : 0.0}}});
	this.advectShader = new THREE.ShaderMaterial({ vertexShader : shaderlib_Vertex.basic_uv, fragmentShader : NitrateMap.advectFrag, uniforms : { velocity : { type : "t", value : this.velocity.renderTarget}, density : { type : "t"}, densityResolution : { type : "v2", value : new THREE.Vector2(this.density.get_width(),this.density.get_height())}, dt : { type : "f"}, invSimScale : { type : "f", value : 1 / this.simScale}, aspect : { type : "f", value : aspect}}});
	this.diffuseShader = new THREE.ShaderMaterial({ vertexShader : NitrateMap.diffuseVert, fragmentShader : NitrateMap.diffuseFrag, uniforms : { landMask : { type : "t", value : landMask}, invDxSq : { type : "f", value : 1 / Math.pow(this.dxForBuffer_si(this.density),2.0)}, texelSize_uv : { type : "v2", value : new THREE.Vector2(1 / this.density.get_width(),1 / this.density.get_height())}, density : { type : "t"}, dt : { type : "f"}}});
};
NitrateMap.__name__ = true;
NitrateMap.__super__ = render_ShaderPass;
NitrateMap.prototype = $extend(render_ShaderPass.prototype,{
	step: function(dt) {
		this.sourceStep(dt);
		this.velocityStep(dt);
		this.advectionStep(dt);
		var _g1 = 0;
		var _g = this.diffusionIterations;
		while(_g1 < _g) {
			_g1++;
			this.diffuseStep(dt);
		}
		this.simTime += dt;
	}
	,velocityStep: function(dt) {
		this.velocityShader.uniforms.time.value = this.simTime;
		this.velocity.quad.material = this.velocityShader;
		this.velocity.render();
	}
	,advectionStep: function(dt) {
		this.advectShader.uniforms.density.value = this.density.readTarget;
		this.advectShader.uniforms.dt.value = dt;
		this.density.quad.material = this.advectShader;
		this.density.render();
	}
	,diffuseStep: function(dt) {
		this.diffuseShader.uniforms.density.value = this.density.readTarget;
		this.diffuseShader.uniforms.dt.value = dt;
		this.density.quad.material = this.diffuseShader;
		this.density.render();
	}
	,sourceStep: function(dt) {
		this.sourceSinkShader.uniforms.density.value = this.density.readTarget;
		this.sourceSinkShader.uniforms.dt.value = dt;
		this.density.quad.material = this.sourceSinkShader;
		this.density.render();
	}
	,render: function(forceClear,dt_ms) {
		if(dt_ms == null) dt_ms = 16.6666666666666679;
		if(forceClear == null) forceClear = false;
		this.colorShader.uniforms.density.value = this.density.readTarget;
		this.quad.material = this.colorShader;
		render_ShaderPass.prototype.render.call(this,forceClear,dt_ms);
	}
	,dxForBuffer_si: function(buffer) {
		return 2 * this.simScale / buffer.get_height();
	}
	,get_sourceMultiplier: function() {
		return this.sourceSinkShader.uniforms.sourceMultiplier.value;
	}
	,set_sourceMultiplier: function(v) {
		return this.sourceSinkShader.uniforms.sourceMultiplier.value = v;
	}
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
var macros_SimulationMap = function() { };
macros_SimulationMap.__name__ = true;
var math_Lerp = function(points,mix) {
	this.points = points;
	this.mix = mix;
};
math_Lerp.__name__ = true;
math_Lerp.floatMix = function(a,b,alpha) {
	return a + (b - a) * alpha;
};
math_Lerp.prototype = {
	getPoint: function(u) {
		var idx0 = Math.floor(u * (this.points.length - 1));
		var idx1 = Math.ceil(u * (this.points.length - 1));
		if(idx0 == idx1) return this.points[idx0]; else {
			var u0 = idx0 / (this.points.length - 1);
			var u1 = idx1 / (this.points.length - 1);
			var p0 = this.points[idx0];
			var p1 = this.points[idx1];
			var alpha = (u - u0) / (u1 - u0);
			return this.mix(p0,p1,alpha);
		}
	}
};
var math_Noise = function() { };
math_Noise.__name__ = true;
math_Noise.hash = function(x,y) {
	var h = x * 127.1 + y * 311.7;
	var tmp;
	var x1 = Math.sin(h) * 43758.5453123;
	tmp = x1 - Math.floor(x1);
	return -1. + 2.0 * tmp;
};
math_Noise.valueNoise2D = function(x,y) {
	var ix = Math.floor(x);
	var iy = Math.floor(y);
	var fx = x - Math.floor(x);
	var fy = y - Math.floor(y);
	var ux = fx * fx * (3.0 - 2.0 * fx);
	var uy = fy * fy * (3.0 - 2.0 * fy);
	var tmp;
	var tmp1;
	var a1 = math_Noise.hash(ix + 0.0,iy + 0.0);
	var b1 = math_Noise.hash(ix + 1.0,iy + 0.0);
	tmp1 = a1 + (b1 - a1) * ux;
	var a = tmp1;
	var tmp2;
	var a2 = math_Noise.hash(ix + 0.0,iy + 1.0);
	var b2 = math_Noise.hash(ix + 1.0,iy + 1.0);
	tmp2 = a2 + (b2 - a2) * uy;
	var b = tmp2;
	tmp = a + (b - a) * uy;
	return tmp;
};
var math_POT = function() { };
math_POT.__name__ = true;
math_POT.ceilPowerOf2 = function(v) {
	var i = Math.ceil(v);
	i--;
	i |= i >> 1;
	i |= i >> 2;
	i |= i >> 4;
	i |= i >> 8;
	i |= i >> 16;
	i++;
	return i;
};
math_POT.floorPowerOf2 = function(v) {
	var i = Math.floor(v);
	i = i | i >> 1;
	i = i | i >> 2;
	i = i | i >> 4;
	i = i | i >> 8;
	i = i | i >> 16;
	return i - (i >> 1);
};
math_POT.nearestPowerOf2 = function(v) {
	var f = math_POT.floorPowerOf2(v);
	var c = math_POT.ceilPowerOf2(v);
	return Math.abs(v - f) < Math.abs(v - c)?f:c;
};
var math_XMath = function() { };
math_XMath.__name__ = true;
math_XMath.fract = function(x) {
	return x - Math.floor(x);
};
math_XMath.mod = function(n,m) {
	return (n % m + m) % m;
};
math_XMath.clamp = function(x,a,b) {
	if(x < a) x = a;
	if(x > b) x = b;
	return x;
};
math_XMath.mix = function(a,b,alpha) {
	return a + (b - a) * alpha;
};
math_XMath.minAngleDelta = function(angleDelta) {
	return Math.atan2(Math.sin(angleDelta),Math.cos(angleDelta));
};
var render_ShaderPass2Phase = function(renderer,width,height,options) {
	render_ShaderPass.call(this,renderer,width,height,options);
	this.readTarget = this.renderTarget;
	this.writeTarget = this.renderTarget.clone();
};
render_ShaderPass2Phase.__name__ = true;
render_ShaderPass2Phase.__super__ = render_ShaderPass;
render_ShaderPass2Phase.prototype = $extend(render_ShaderPass.prototype,{
	render: function(forceClear,dt_ms) {
		if(dt_ms == null) dt_ms = 16.6666666666666679;
		if(forceClear == null) forceClear = false;
		this.renderer.render(this.scene,this.camera,this.writeTarget,forceClear);
		var tmp = this.readTarget;
		this.readTarget = this.writeTarget;
		this.writeTarget = tmp;
	}
	,swapTargets: function() {
		var tmp = this.readTarget;
		this.readTarget = this.writeTarget;
		this.writeTarget = tmp;
	}
});
var shaderlib_Vertex = function() { };
shaderlib_Vertex.__name__ = true;
var three__$Color_Color_$Impl_$ = {};
three__$Color_Color_$Impl_$.__name__ = true;
three__$Color_Color_$Impl_$._new = function(hex) {
	var this1;
	this1 = new THREE.Color();
	this1.setHex(hex);
	return this1;
};
three__$Color_Color_$Impl_$.fromInt = function(hex) {
	var tmp;
	var this1;
	this1 = new THREE.Color();
	this1.setHex(hex);
	tmp = this1;
	return tmp;
};
var three_ITexture = function() { };
three_ITexture.__name__ = true;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
render_ShaderPass.staticCamera = new THREE.OrthographicCamera(-1,1,1,-1,0,1);
render_ShaderPass.staticPlaneGeom = new THREE.PlaneBufferGeometry(2,2,1,1);
shaderlib_Chunks.basic_projection = "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);";
shaderlib_Chunks.bilerp = "\nvec4 bilerp(sampler2D texture, vec2 coord, vec2 resolution){\n\t//convert to absolute coordinates\n\tcoord *= resolution;\n\n\tvec4 st;\n\tst.xy = floor(coord - .5) + .5; //left & bottom cell centers\n\tst.zw = st.xy + 1.;             //right & top centers\n\n\tvec2 t = coord - st.xy;\n\n\tst /= resolution.xyxy; //to unitary coords\n\t\n\t#ifndef BILERP_UNPACK\t\n\tvec4 tex11 = texture2D(texture, st.xy);\n\tvec4 tex21 = texture2D(texture, st.zy);\n\tvec4 tex12 = texture2D(texture, st.xw);\n\tvec4 tex22 = texture2D(texture, st.zw);\n\t#else\n\tBILERP_TYPE tex11 = BILERP_UNPACK(texture2D(texture, st.xy));\n\tBILERP_TYPE tex21 = BILERP_UNPACK(texture2D(texture, st.zy));\n\tBILERP_TYPE tex12 = BILERP_UNPACK(texture2D(texture, st.xw));\n\tBILERP_TYPE tex22 = BILERP_UNPACK(texture2D(texture, st.zw));\n\t#endif\n\n\t#ifndef BILERP_PACK\n\treturn mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y);\n\t#else\n\treturn BILERP_PACK(mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y));\n\t#endif\n}";
shaderlib_Chunks.curl_noise = "vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 snoiseVec3( vec3 x ){\n\n  float s  = snoise(vec3( x ));\n  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\nvec3 curlNoise( vec3 p ){\n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3( p - dx );\n  vec3 p_x1 = snoiseVec3( p + dx );\n  vec3 p_y0 = snoiseVec3( p - dy );\n  vec3 p_y1 = snoiseVec3( p + dy );\n  vec3 p_z0 = snoiseVec3( p - dz );\n  vec3 p_z1 = snoiseVec3( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  return normalize( vec3( x , y , 0.5 ));\n}\n";
shaderlib_Chunks.float_packing = "//Float Packing\nvec4 packFloat8bitRGBA(in float val) {\n    vec4 pack = vec4(1.0, 255.0, 65025.0, 16581375.0) * val;\n    pack = fract(pack);\n    pack -= vec4(pack.yzw / 255.0, 0.0);\n    return pack;\n}\n\nfloat unpackFloat8bitRGBA(in vec4 pack) {\n    return dot(pack, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n}\n\nvec3 packFloat8bitRGB(in float val) {\n    vec3 pack = vec3(1.0, 255.0, 65025.0) * val;\n    pack = fract(pack);\n    pack -= vec3(pack.yz / 255.0, 0.0);\n    return pack;\n}\n\nfloat unpackFloat8bitRGB(in vec3 pack) {\n    return dot(pack, vec3(1.0, 1.0 / 255.0, 1.0 / 65025.0));\n}\n\nvec2 packFloat8bitRG(in float val) {\n    vec2 pack = vec2(1.0, 255.0) * val;\n    pack = fract(pack);\n    pack -= vec2(pack.y / 255.0, 0.0);\n    return pack;\n}\n\nfloat unpackFloat8bitRG(in vec2 pack) {\n    return dot(pack, vec2(1.0, 1.0 / 255.0));\n}";
shaderlib_Chunks.pal = "//iq color palette function\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n\treturn a + b*cos( 6.28318*(c*t+d) );\n}\n\n";
shaderlib_Chunks.palettes = "#define blueWhite(x) pal(x, vec3(0.5), vec3(0.55), vec3(0.45), vec3(0.00, 0.10, 0.20) + 0.47)\n\nvec3 hue(float x){\n\tvec3 p = abs(fract(x + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0);\n\treturn (clamp(p - 1.0, 0.0, 1.0));\n}\n\nvec3 temperatureHue(float x){\n    return hue((1. - x)*0.7);\n}\n\nvec3 drama(float x){\n    return pal(x,\n        vec3(0.2),\n        vec3(0.9),\n        vec3(0.75, 1.0, 0.75),\n        vec3(0.3, -0.0,  -0.1)\n    );\n}";
shaderlib_Chunks.rand = "float rand(vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}";
Common.glsl = "\n\t\t//Coordinate conversions\n\t\tvec2 uvToAspect(vec2 uv, float aspect){\n\t\t\treturn (uv*2.0 - 1.0)*vec2(aspect, 1.0);\n\t\t}\n\t\tvec2 aspectToUv(vec2 a, float aspect){\n\t\t\treturn vec2(a.x*.5/aspect + .5, a.y*.5 + .5);\n\t\t}\n\n\t\t" + shaderlib_Chunks.float_packing + "\n\n\t\t//Density\n\t\tvec4 packDensity(float f){\n\t\t\tf = clamp(f, 0., 1. - 1./16777216.0);\n\t\t\treturn vec4(packFloat8bitRGB(f), 1.);\n\t\t}\n\t\tfloat unpackDensity(vec4 v){\n\t\t\treturn unpackFloat8bitRGB(v.xyz);\n\t\t}\n\n\t\t//Velocity\n\t\tvec4 packVelocity(in vec2 v){\n\t\t\t//scale -max:max to -1:1\n\t\t\tv = v * 1.;\n\t\t\t//scale -1:1 to 0:1\n\t\t\tv = v*.5 + .5;\n\t\t\treturn vec4(packFloat8bitRG(v.x), packFloat8bitRG(v.y));\n\t\t}\n\t\tvec2 unpackVelocity(vec4 v){\n\t\t\tvec2 p = vec2(unpackFloat8bitRG(v.xy), unpackFloat8bitRG(v.zw));\n\t\t\t//scale to -1:1\n\t\t\tp = p*2.0 - 1.;\n\t\t\t//scale to -max:max\n\t\t\tp = p * 1.;\n\t\t\treturn p;\n\t\t}\n\t";
AlgaeMap.colorFrag = "\n\t\tuniform sampler2D algaeDensity;\n\t\tvarying vec2 vUv;\n\n\t\t" + Common.glsl + "\n\t\t" + shaderlib_Chunks.pal + "\n\t\t" + shaderlib_Chunks.palettes + "\n\n\t\tvoid main(){\n\t\t\tfloat d = unpackDensity(texture2D(algaeDensity, vUv));\n\t\t\tfloat x = d*(d+0.1);\n\t\t\tvec3 col = pal(x, vec3(109219., 298.453, 28922.5), vec3(109219., 298.291, 28922.2), vec3(0.000517114, 0.00452628, 0.000702904), vec3(1.49986, 1.50553, 1.49962));\n\n\t\t\tgl_FragColor = vec4(col, x);\n\t\t}\n\t";
AlgaeMap.stepFrag = "\n\t\tuniform sampler2D algaeDensity;\n\t\tuniform sampler2D nitrateDensity;\n\t\tuniform float growthMultiplier;\n\t\tuniform float attenuation;\n\t\tuniform float dt;\n\t\tvarying vec2 vUv;\n\n\t\t" + Common.glsl + "\n\n\t\tvoid main(){\n\t\t\tfloat ad = unpackDensity(texture2D(algaeDensity, vUv));\n\t\t\tfloat nd = unpackDensity(texture2D(nitrateDensity, vUv));\n\n\t\t\tad -= attenuation * ad * dt;\n\n\t\t\tgl_FragColor = packDensity(ad + nd * growthMultiplier * dt);\n\t\t}\n\t";
COTSParticle.geom = new THREE.CircleGeometry(1.0,30);
NitrateMap.colorFrag = "\n\t\tuniform sampler2D density;\n\t\tvarying vec2 vUv;\n\t\t\n\t\t" + Common.glsl + "\n\t\t" + shaderlib_Chunks.pal + "\n\t\t" + shaderlib_Chunks.palettes + "\n\n\n\t\tvoid main(){\n\t\t\tfloat d = unpackDensity(texture2D(density, vUv));\n\t\t\t//vec3 col = blueWhite(d);\n\n\t\t\t// vec3 col= pal(d, vec3(0.5),vec3(0.5),vec3(0.9),vec3(0.0,0.10,0.20) + 0.47 );\n\t\t\t// vec3 col=pal(d, vec3(0.5),vec3(0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n\n\t\t\t// vec3 col=pal(d, vec3(0.5),vec3(0.5),vec3(0.9),vec3(0.3,0.20,0.20) + 0.31 );\n\t\t\t// vec3 col=pal(d, vec3(0.5),vec3(0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n\t\t\t// vec3 col=pal(d, vec3(0.5),vec3(0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n\t\t\t// vec3 col=pal(d, vec3(0.5),vec3(0.5),vec3(1),vec3(0.0,0.33,0.67));\n\t\t\t// vec3 col=pal(d, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n\n\t\t\t// vec3 col = pal( d*20., vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(0.1,1.0,0.0),vec3(0.5,0.20,0.25) );\n\t\t\t// vec3 col = vec3(d);\n\n\t\t\tfloat x = pow(d,.75);\n\t\t\tvec3 col = pal(x, vec3(0.374183, 147591., 18065.8), vec3(0.872978, 147591., 18065.5), vec3(0.198737, 0.000718461, 0.000969233), vec3(1.69541, 1.49982, 1.50032));\n\n\t\t\tgl_FragColor = vec4(col, x);\n\t\t}\n\t";
NitrateMap.sourceSinkFrag = "\n\t\tuniform sampler2D density;\n\t\tuniform sampler2D source;\n\t\tuniform float dt;\n\t\tuniform float sourceMultiplier;\n\t\tuniform float attenuation;\n\t\tvarying vec2 vUv;\n\n\t\t" + Common.glsl + "\n\n\t\tvoid main(){\n\t\t\tfloat d = unpackDensity(texture2D(density, vUv));\n\t\t\tfloat s = texture2D(source, vUv).r * dt * sourceMultiplier;\n\n\t\t\t//attenuate\n\t\t\td -= attenuation * d * dt;\n\n\t\t\tgl_FragColor = packDensity(d + s);\n\t\t}\n\t";
NitrateMap.velocityFrag = "\n\t\tuniform sampler2D landMask;\n\t\tuniform float time;\n\t\tuniform float aspect;\n\t\tuniform float noiseMultiplier;\n\t\tuniform float noiseScale;\n\t\tuniform float underCurrentMagnitude;\n\t\tvarying vec2 vUv;\n\n\t\t" + shaderlib_Chunks.curl_noise + "\n\t\t" + Common.glsl + "\n\n\t\tvoid main(){\n\t\t\tvec2 offset = vec2(sin(time*.5)+time*.25, cos(time*0.253)-time*1.3) * .5;\n\t\t\tvec2 baseFlow = vec2(0., underCurrentMagnitude);\n\n\t\t\tvec2 v = baseFlow;\n\n\t\t\tv += curlNoise(\n\t\t\t\tvec3((vUv * noiseScale + offset) * vec2(aspect, 1.0), 0.)\n\t\t\t).xy * noiseMultiplier;\n\n\t\t\tv *= (1. - texture2D(landMask, vUv).a);//z under land\n\n\t\t\tgl_FragColor = packVelocity(v);\n\t\t}\n\t";
NitrateMap.advectFrag = "\n\t\tuniform sampler2D velocity;\n\t\tuniform sampler2D density;\n\t\tuniform vec2 densityResolution;\n\t\tuniform float dt;\n\t\tuniform float invSimScale;\n\t\tuniform float aspect;\n\t\tvarying vec2 vUv;\n\n\t\t" + Common.glsl + "\n\n\t\t#define BILERP_PACK packDensity\n\t\t#define BILERP_UNPACK unpackDensity\n\t\t#define BILERP_TYPE float\n\t\t" + shaderlib_Chunks.bilerp + "\n\n\t\tvoid main(){\n\t\t\tvec2 v = unpackVelocity(texture2D(velocity, vUv)); //simulation units\n\t\t\tvec2 av = invSimScale * v; //aspect units\n\t\t\tvec2 backProjectedUV = vUv - vec2(av.x*.5/aspect, av.y*.5) * dt;\n\n\t\t\t//@! if backProjectedUV is in the mask, density = 0\n\n\t\t\tgl_FragColor = bilerp(density, backProjectedUV, densityResolution); //manual bilerp for NEAREST density texture\n\t\t}\n\t";
NitrateMap.diffuseVert = "\n\t\tuniform vec2 texelSize_uv;\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 uvL;\n\t\tvarying vec2 uvR;\n\t\tvarying vec2 uvT;\n\t\tvarying vec2 uvB;\n\t\tvoid main(){\n\t\t\tvUv = uv;\n\t\t\t//cell neighbors\n\t\t\tuvL = vUv + vec2(-texelSize_uv.x, 0.0);\n\t\t\tuvR = vUv + vec2( texelSize_uv.x, 0.0);\n\t\t\tuvT = vUv + vec2(0.0,  texelSize_uv.y);\n\t\t\tuvB = vUv + vec2(0.0, -texelSize_uv.y);\n\t\t\t" + shaderlib_Chunks.basic_projection + "\n\t\t}\n\t";
NitrateMap.diffuseFrag = "\n\t\tuniform sampler2D landMask;\n\t\tuniform sampler2D density;\n\t\tuniform float invDxSq;\n\t\tuniform float dt;\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 uvL;\n\t\tvarying vec2 uvR;\n\t\tvarying vec2 uvT;\n\t\tvarying vec2 uvB;\n\n\t\tconst float k = 0.0015;\n\n\t\t" + Common.glsl + "\n\n\t\tvoid main(){\n\t\t\tfloat L = unpackDensity(texture2D(density, uvL));\n\t\t\tfloat R = unpackDensity(texture2D(density, uvR));\n\t\t\tfloat T = unpackDensity(texture2D(density, uvT));\n\t\t\tfloat B = unpackDensity(texture2D(density, uvB));\n\t\t\tfloat C = unpackDensity(texture2D(density, vUv));\n\n\t\t\t//@! experimental - prevents diffusion into land, not a major effect if needs to be removed\n\t\t\t#define mask(uv) texture2D(landMask, uv).a;\n\t\t\tfloat ML = mask(uvL);\n\t\t\tfloat MR = mask(uvR);\n\t\t\tfloat MT = mask(uvT);\n\t\t\tfloat MB = mask(uvB);\n\t\t\tL = mix(C, L, 1. - ML);\n\t\t\tR = mix(C, R, 1. - MR);\n\t\t\tT = mix(C, T, 1. - MT);\n\t\t\tB = mix(C, B, 1. - MB);\n\n\t\t\tfloat X = (L + R - 2.0*C);\n\t\t\tfloat Y = (T + B - 2.0*C);\n\n\t\t\t//for stability under the explicit scheme: 2 * k * dt * invDxSq <= 1\n\t\t\t//s acts to enforce this condition by reducing the density\n\t\t\t//this results in stability at the expense of physical accuracy\n\t\t\tfloat s = clamp(1.0 / (4. * k * dt * invDxSq), 0., 1.0);//clamp means s can only reduce\n\n\t\t\tfloat dNew = s * k * dt * invDxSq * (X + Y) + C;\n\n\t\t\tgl_FragColor = packDensity(dNew);\n\t\t}\n\t";
shaderlib_Vertex.basic = "void main(){\n\t" + shaderlib_Chunks.basic_projection + "\n}";
shaderlib_Vertex.basic_uv = "varying vec2 vUv;\n\nvoid main(){\n\tvUv = uv;\n\t" + shaderlib_Chunks.basic_projection + "\n}";
Main.main();
})(typeof window != "undefined" ? window : typeof exports != "undefined" ? exports : typeof self != "undefined" ? self : this);
