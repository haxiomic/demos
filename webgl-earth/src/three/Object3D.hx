package three;

@:native("THREE.Object3D") extern class Object3D {
	function new():Void;
	var id : Float;
	var uuid : String;
	var name : String;
	var type : String;
	var parent : Object3D;
	var children : Array<Object3D>;
	var up : Vector3;
	var position : Vector3;
	var rotation : Euler;
	var quaternion : Quaternion;
	var scale : Vector3;
	var rotationAutoUpdate : Bool;
	var matrix : Matrix4;
	var matrixWorld : Matrix4;
	var matrixAutoUpdate : Bool;
	var matrixWorldNeedsUpdate : Bool;
	var visible : Bool;
	var castShadow : Bool;
	var receiveShadow : Bool;
	var frustumCulled : Bool;
	var renderOrder : Float;
	var userData : Dynamic;
	static var DefaultUp : Vector3;
	var eulerOrder : String;
	function applyMatrix(matrix:Matrix4):Void;
	function setRotationFromAxisAngle(axis:Vector3, angle:Float):Void;
	function setRotationFromEuler(euler:Euler):Void;
	function setRotationFromMatrix(m:Matrix4):Void;
	function setRotationFromQuaternion(q:Quaternion):Void;
	function rotateOnAxis(axis:Vector3, angle:Float):Object3D;
	function rotateX(angle:Float):Object3D;
	function rotateY(angle:Float):Object3D;
	function rotateZ(angle:Float):Object3D;
	function translateOnAxis(axis:Vector3, distance:Float):Object3D;
	function translate(distance:Float, axis:Vector3):Object3D;
	function translateX(distance:Float):Object3D;
	function translateY(distance:Float):Object3D;
	function translateZ(distance:Float):Object3D;
	function localToWorld(vector:Vector3):Vector3;
	function worldToLocal(vector:Vector3):Vector3;
	function lookAt(vector:Vector3):Void;
	function add(object:Object3D):Void;
	function remove(object:Object3D):Void;
	function getChildByName(name:String):Object3D;
	function getObjectById(id:String):Object3D;
	function getObjectByName(name:String):Object3D;
	function getObjectByProperty(name:String, value:String):Object3D;
	function getWorldPosition(?optionalTarget:Vector3):Vector3;
	function getWorldQuaternion(?optionalTarget:Quaternion):Quaternion;
	function getWorldRotation(?optionalTarget:Euler):Euler;
	function getWorldScale(?optionalTarget:Vector3):Vector3;
	function getWorldDirection(?optionalTarget:Vector3):Vector3;
	function traverse(callback:Object3D -> Dynamic):Void;
	function traverseVisible(callback:Object3D -> Dynamic):Void;
	function traverseAncestors(callback:Object3D -> Dynamic):Void;
	function updateMatrix():Void;
	function updateMatrixWorld(force:Bool):Void;
	function toJSON():Dynamic;
	function clone(?object:Object3D, ?recursive:Bool):Object3D;
	function addEventListener(type:String, listener:Dynamic -> Void):Void;
	function hasEventListener(type:String, listener:Dynamic -> Void):Void;
	function removeEventListener(type:String, listener:Dynamic -> Void):Void;
	function dispatchEvent(event:{ var type : String; var target : Dynamic; }):Void;
}