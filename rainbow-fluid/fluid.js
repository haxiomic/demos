// Generated by Haxe 4.0.0-rc.2+77068e1
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Console = function() { };
Console.__name__ = true;
Console.printFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	s += "<//>";
	var activeFormatFlagStack = [];
	var groupedProceedingTags = [];
	var browserFormatArguments = [];
	var result = Console.formatTagPattern.map(s,function(e) {
		var open = e.matched(1) == null;
		var tags = e.matched(2).split(",");
		if(!open && tags.length == 1) {
			if(tags[0] == "") {
				var last = activeFormatFlagStack[activeFormatFlagStack.length - 1];
				var i = activeFormatFlagStack.indexOf(last);
				if(i != -1) {
					var proceedingTags = groupedProceedingTags[i];
					activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
					groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
				}
			} else {
				var str = tags[0];
				str = str.toLowerCase();
				var result1;
				if(str.charAt(0) == "#" || HxOverrides.substr(str,0,3) == "bg#") {
					var hIdx = str.indexOf("#");
					var hex = HxOverrides.substr(str,hIdx + 1,null);
					if(hex.length == 3) {
						var a = hex.split("");
						hex = [a[0],a[0],a[1],a[1],a[2],a[2]].join("");
					}
					if(new EReg("[^0-9a-f]","i").match(hex) || hex.length < 6) {
						result1 = "";
					} else {
						var normalized = str.substring(0,hIdx) + "#" + hex;
						result1 = normalized;
					}
				} else {
					switch(str) {
					case "!":
						result1 = "invert";
						break;
					case "/":
						result1 = "reset";
						break;
					case "b":
						result1 = "bold";
						break;
					case "bg_gray":
						result1 = "bg_light_black";
						break;
					case "gray":
						result1 = "light_black";
						break;
					case "i":
						result1 = "italic";
						break;
					case "u":
						result1 = "underline";
						break;
					default:
						var transformed = str;
						result1 = transformed;
					}
				}
				if(result1 == "reset") {
					activeFormatFlagStack = [];
					groupedProceedingTags = [];
				} else {
					var str1 = tags[0];
					str1 = str1.toLowerCase();
					var flag;
					if(str1.charAt(0) == "#" || HxOverrides.substr(str1,0,3) == "bg#") {
						var hIdx1 = str1.indexOf("#");
						var hex1 = HxOverrides.substr(str1,hIdx1 + 1,null);
						if(hex1.length == 3) {
							var a1 = hex1.split("");
							hex1 = [a1[0],a1[0],a1[1],a1[1],a1[2],a1[2]].join("");
						}
						if(new EReg("[^0-9a-f]","i").match(hex1) || hex1.length < 6) {
							flag = "";
						} else {
							var normalized1 = str1.substring(0,hIdx1) + "#" + hex1;
							flag = normalized1;
						}
					} else {
						switch(str1) {
						case "!":
							flag = "invert";
							break;
						case "/":
							flag = "reset";
							break;
						case "b":
							flag = "bold";
							break;
						case "bg_gray":
							flag = "bg_light_black";
							break;
						case "gray":
							flag = "light_black";
							break;
						case "i":
							flag = "italic";
							break;
						case "u":
							flag = "underline";
							break;
						default:
							var transformed1 = str1;
							flag = transformed1;
						}
					}
					if(flag != null) {
						var i1 = activeFormatFlagStack.indexOf(flag);
						if(i1 != -1) {
							var proceedingTags1 = groupedProceedingTags[i1];
							activeFormatFlagStack.splice(i1 - proceedingTags1,proceedingTags1 + 1);
							groupedProceedingTags.splice(i1 - proceedingTags1,proceedingTags1 + 1);
						}
					}
				}
			}
		} else {
			var proceedingTags2 = 0;
			var _g = 0;
			while(_g < tags.length) {
				var tag = tags[_g];
				++_g;
				var str2 = tag;
				str2 = str2.toLowerCase();
				var flag1;
				if(str2.charAt(0) == "#" || HxOverrides.substr(str2,0,3) == "bg#") {
					var hIdx2 = str2.indexOf("#");
					var hex2 = HxOverrides.substr(str2,hIdx2 + 1,null);
					if(hex2.length == 3) {
						var a2 = hex2.split("");
						hex2 = [a2[0],a2[0],a2[1],a2[1],a2[2],a2[2]].join("");
					}
					if(new EReg("[^0-9a-f]","i").match(hex2) || hex2.length < 6) {
						flag1 = "";
					} else {
						var normalized2 = str2.substring(0,hIdx2) + "#" + hex2;
						flag1 = normalized2;
					}
				} else {
					switch(str2) {
					case "!":
						flag1 = "invert";
						break;
					case "/":
						flag1 = "reset";
						break;
					case "b":
						flag1 = "bold";
						break;
					case "bg_gray":
						flag1 = "bg_light_black";
						break;
					case "gray":
						flag1 = "light_black";
						break;
					case "i":
						flag1 = "italic";
						break;
					case "u":
						flag1 = "underline";
						break;
					default:
						var transformed2 = str2;
						flag1 = transformed2;
					}
				}
				if(flag1 == null) {
					return e.matched(0);
				}
				if(open) {
					activeFormatFlagStack.push(flag1);
					groupedProceedingTags.push(proceedingTags2);
					++proceedingTags2;
				} else {
					var i2 = activeFormatFlagStack.indexOf(flag1);
					if(i2 != -1) {
						var proceedingTags3 = groupedProceedingTags[i2];
						activeFormatFlagStack.splice(i2 - proceedingTags3,proceedingTags3 + 1);
						groupedProceedingTags.splice(i2 - proceedingTags3,proceedingTags3 + 1);
					}
				}
			}
		}
		switch(Console.formatMode) {
		case 1:
			var result2 = activeFormatFlagStack.map(function(f) {
				return Console.getBrowserFormat(f);
			}).filter(function(s1) {
				return s1 != null;
			}).join(";");
			browserFormatArguments.push(result2);
			return "%c";
		case 2:
			return "";
		}
	});
	if(Console.formatMode == 1) {
		var logArgs = [result].concat(browserFormatArguments);
		switch(outputStream) {
		case 1:
			console.warn.apply(console, logArgs);
			break;
		case 2:
			console.error.apply(console, logArgs);
			break;
		case 0:case 3:
			console.log.apply(console, logArgs);
			break;
		}
		return;
	}
	Console.print(result,outputStream);
};
Console.print = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	switch(outputStream) {
	case 1:
		console.warn(s);
		break;
	case 2:
		console.error(s);
		break;
	case 0:case 3:
		console.log(s);
		break;
	}
};
Console.getBrowserFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		return "color: " + flag;
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		return "background-color: " + HxOverrides.substr(flag,2,null);
	}
	if(flag.charAt(0) == "{") {
		return HxOverrides.substr(flag,1,flag.length - 2);
	}
	switch(flag) {
	case "bg_black":
		return "background-color: black";
	case "bg_blue":
		return "background-color: blue";
	case "bg_cyan":
		return "background-color: cyan";
	case "bg_green":
		return "background-color: green";
	case "bg_light_black":
		return "background-color: gray";
	case "bg_light_blue":
		return "background-color: lightBlue";
	case "bg_light_cyan":
		return "background-color: lightCyan";
	case "bg_light_green":
		return "background-color: lightGreen";
	case "bg_light_magenta":
		return "background-color: lightPink";
	case "bg_light_red":
		return "background-color: salmon";
	case "bg_light_white":
		return "background-color: white";
	case "bg_light_yellow":
		return "background-color: lightYellow";
	case "bg_magenta":
		return "background-color: magenta";
	case "bg_red":
		return "background-color: red";
	case "bg_white":
		return "background-color: whiteSmoke";
	case "bg_yellow":
		return "background-color: gold";
	case "black":
		return "color: black";
	case "blink":
		return "text-decoration: blink";
	case "blue":
		return "color: blue";
	case "bold":
		return "font-weight: bold";
	case "cyan":
		return "color: cyan";
	case "dim":
		return "color: gray";
	case "green":
		return "color: green";
	case "hidden":
		return "visibility: hidden; color: white";
	case "invert":
		return "-webkit-filter: invert(100%); filter: invert(100%)";
	case "italic":
		return "font-style: italic";
	case "light_black":
		return "color: gray";
	case "light_blue":
		return "color: lightBlue";
	case "light_cyan":
		return "color: lightCyan";
	case "light_green":
		return "color: lightGreen";
	case "light_magenta":
		return "color: lightPink";
	case "light_red":
		return "color: salmon";
	case "light_white":
		return "color: white";
	case "light_yellow":
		return "color: #ffed88";
	case "magenta":
		return "color: magenta";
	case "red":
		return "color: red";
	case "reset":
		return "";
	case "underline":
		return "text-decoration: underline";
	case "white":
		return "color: whiteSmoke";
	case "yellow":
		return "color: #f5ba00";
	default:
		return null;
	}
};
Console.determineConsoleFormatMode = function() {
	if(typeof(window) != "undefined") {
		return 1;
	}
	return 2;
};
var FluidComponent = $hx_exports["FluidComponent"] = function(gl,drawingBufferWidth,drawingBufferHeight) {
	this.savedSettings = null;
	this.settings = new Settings();
	this.particleCount = 65536;
	this.showDebugTextures = false;
	this.postProcessingEnabled = false;
	this.remapFluidColor = true;
	this.renderFluidEnabled = true;
	this.renderParticlesEnabled = false;
	this.pointerColorBuffer = new Float32Array(40);
	this.pointerDataBuffer = new Float32Array(20);
	this.pointerPositionsBuffer = new Float32Array(40);
	this.activePointersLastFrame = new haxe_ds_IntMap();
	this.activePointers = new haxe_ds_IntMap();
	this.screenBuffer = null;
	this.screenTriangle = null;
	this.gl = gl;
	this.drawingBufferWidth = drawingBufferWidth;
	this.drawingBufferHeight = drawingBufferHeight;
	this.screenBuffer = gl.getParameter(36006);
	if(this.screenBuffer != null) {
		Console.printFormatted(Console.logPrefix + ("<b,yellow>Screenbuffer at initialization is" + " " + Std.string(this.screenBuffer)) + "\n",0);
	}
	var debugRenderExt = gl.getExtension("WEBGL_debug_renderer_info");
	var deviceInfo = debugRenderExt != null ? { renderer : gl.getParameter(37446), vendor : gl.getParameter(37445)} : { renderer : gl.getParameter(7937), vendor : gl.getParameter(7936)};
	Console.printFormatted(Console.logPrefix + ("" + ("<b>" + Std.string(deviceInfo.vendor) + "</b> - <b>" + Std.string(deviceInfo.renderer) + "</b>")) + "\n",0);
	GPUCapabilities.get(gl).printReport();
	gl.disable(2929);
	gl.disable(2884);
	gl.disable(3024);
	this.initializeGPUResources();
	this.lastTime = 0;
};
FluidComponent.__name__ = true;
FluidComponent.prototype = {
	initializeShaders: function() {
		this.screenTextureShader = new ScreenTexture(this.gl);
		this.renderParticlesShader = new ColorParticleMotion(this.gl);
		this.updateSurfaceShader = new UpdateSurfaceShader(this.gl);
		var _this = this.updateSurfaceShader.decayFactor;
		_this.dirty = true;
		_this.data = this.settings.surfaceDecayFactor;
		var _this1 = this.updateSurfaceShader.pointerPositions;
		_this1.dirty = true;
		_this1.data = this.pointerPositionsBuffer;
		this.updateSurfaceShader.pointerPositions.alwaysDirty = true;
		var _this2 = this.updateSurfaceShader.pointerData;
		_this2.dirty = true;
		_this2.data = this.pointerDataBuffer;
		this.updateSurfaceShader.pointerData.alwaysDirty = true;
		var _this3 = this.updateSurfaceShader.pointerColor;
		_this3.dirty = true;
		_this3.data = this.pointerColorBuffer;
		this.updateSurfaceShader.pointerColor.alwaysDirty = true;
		var this1 = this.updateSurfaceShader.steadyStateColor.data;
		var y = this.settings.steadyStateColor[1];
		var z = this.settings.steadyStateColor[2];
		this1[0] = this.settings.steadyStateColor[0];
		this1[1] = y;
		this1[2] = z;
		this1[3] = this.settings.steadyStateAlpha;
		this.updateForceShader = new UpdateForceShader(this.gl);
		var _this4 = this.updateForceShader.userVelocityTexture;
		var data = SharedGPUResources.getNullTexture(this.gl).native;
		_this4.dirty = true;
		_this4.data = data;
		var _this5 = this.updateForceShader.dragCoefficient;
		_this5.dirty = true;
		_this5.data = this.settings.dragCoefficient;
		var _this6 = this.updateForceShader.dragSpeed;
		_this6.dirty = true;
		_this6.data = this.settings.dragSpeed;
		var _this7 = this.updateForceShader.decayFactor;
		_this7.dirty = true;
		_this7.data = this.settings.motionDecayFactor;
		var _this8 = this.updateForceShader.pointerPositions;
		_this8.dirty = true;
		_this8.data = this.pointerPositionsBuffer;
		this.updateForceShader.pointerPositions.alwaysDirty = true;
		var _this9 = this.updateForceShader.pointerData;
		_this9.dirty = true;
		_this9.data = this.pointerDataBuffer;
		this.updateForceShader.pointerData.alwaysDirty = true;
		var _this10 = this.updateForceShader.opticalFlowExponent;
		_this10.dirty = true;
		_this10.data = this.settings.opticalFlowExponent;
		var this2 = this.updateForceShader.gravity.data;
		this2[0] = 0;
		this2[1] = 0;
		this.renderFluidShader = new RenderFluidShader(this.gl);
		var _this11 = this.renderFluidShader.invGamma;
		_this11.dirty = true;
		_this11.data = 1. / this.settings.gamma;
		var this3 = this.renderFluidShader.backgroundColor.data;
		var y1 = this.settings.backgroundColor[1];
		var z1 = this.settings.backgroundColor[2];
		this3[0] = this.settings.backgroundColor[0];
		this3[1] = y1;
		this3[2] = z1;
	}
	,initializeGPUResources: function() {
		var _gthis = this;
		this.initializeShaders();
		this.screenTriangle = SharedGPUResources.getScreenTriangle(this.gl);
		var fluidWidth = this.settings.fluidScale * this.drawingBufferWidth | 0;
		var fluidHeight = this.settings.fluidScale * this.drawingBufferHeight | 0;
		this.fluid = new GPUFluid(this.gl,fluidWidth,fluidHeight,this.settings.simulationScale,this.settings.fluidPhysicsScale,this.settings.fluidIterations,this.settings.powerOf2Fluid,this.updateForceShader,this.updateSurfaceShader);
		var _this = this.fluid;
		var v = this.settings.periodicBoundary;
		_this.periodicBoundary = v;
		_this.setWrapMode(v ? 10497 : 33071);
		_this.updateBaseUniforms();
		this.fluid.solverIterations = 0;
		var _this1 = this.updateSurfaceShader.decayFactor;
		_this1.dirty = true;
		_this1.data = 1;
		var _this2 = this.updateForceShader.decayFactor;
		_this2.dirty = true;
		_this2.data = 1;
		this.fluid.step(1);
		this.fluid.solverIterations = this.settings.fluidIterations;
		var _this3 = this.updateSurfaceShader.decayFactor;
		_this3.dirty = true;
		_this3.data = this.settings.surfaceDecayFactor;
		var _this4 = this.updateForceShader.decayFactor;
		_this4.dirty = true;
		_this4.data = this.settings.motionDecayFactor;
		var rgbHalfFloatLinear = GPUCapabilities.get(this.gl).getWritableFloatColorBufferParameters(6407,5131,9729);
		this.offscreenTarget = new render_RenderTarget(this.gl,this.fluid.width,this.fluid.height,new TextureParams(rgbHalfFloatLinear.format,rgbHalfFloatLinear.internalFormat,rgbHalfFloatLinear.dataType,rgbHalfFloatLinear.filtering,rgbHalfFloatLinear.filtering,33071,33071));
		this.settings.setChangeCallbacks({ onChangeVersion : function(_,_1) {
			return { };
		}, onChangePaused : function(_2,_3) {
			return { };
		}, onChangeTimestepMultiplier : function(_4,_5) {
			return { };
		}, onChangeFluidPhysicsScale : function(v1,_6) {
			var _this5 = _gthis.fluid;
			_this5.physicsScale = v1;
			_this5.updateBaseUniforms();
			return _this5.physicsScale;
		}, onChangeSurfaceDecayFactor : function(v2,_7) {
			var _this6 = _gthis.updateSurfaceShader.decayFactor;
			_this6.dirty = true;
			return _this6.data = v2;
		}, onChangeMotionDecayFactor : function(v3,_8) {
			var _this7 = _gthis.updateForceShader.decayFactor;
			_this7.dirty = true;
			return _this7.data = v3;
		}, onChangeDragCoefficient : function(v4,_9) {
			var _this8 = _gthis.updateForceShader.dragCoefficient;
			_this8.dirty = true;
			return _this8.data = v4;
		}, onChangeDragSpeed : function(v5,_10) {
			var _this9 = _gthis.updateForceShader.dragSpeed;
			_this9.dirty = true;
			return _this9.data = v5;
		}, onChangePeriodicBoundary : function(v6,_11) {
			var _this10 = _gthis.fluid;
			_this10.periodicBoundary = v6;
			_this10.setWrapMode(v6 ? 10497 : 33071);
			_this10.updateBaseUniforms();
			return v6;
		}, onChangeBackgroundMultiplier : function(v7,_12) {
			return { };
		}, onChangeBackgroundPalette : function(v8,_13) {
			return { };
		}, onChangeFluidIterations : function(v9,_14) {
			return _gthis.fluid.solverIterations = v9;
		}, onChangeBackgroundColor : function(v10,_15) {
			var this1 = _gthis.renderFluidShader.backgroundColor.data;
			this1[0] = v10[0];
			this1[1] = v10[1];
			this1[2] = v10[2];
			return _gthis.renderFluidShader.backgroundColor.dirty = true;
		}, onChangeSteadyStateColor : function(v11,_16) {
			var this2 = _gthis.updateSurfaceShader.steadyStateColor.data;
			var w = _gthis.settings.steadyStateAlpha;
			this2[0] = v11[0];
			this2[1] = v11[1];
			this2[2] = v11[2];
			this2[3] = w;
			return _gthis.updateSurfaceShader.steadyStateColor.dirty = true;
		}, onChangeSteadyStateAlpha : function(v12,_17) {
			_gthis.updateSurfaceShader.steadyStateColor.data[3] = v12;
			return _gthis.updateSurfaceShader.steadyStateColor.dirty = true;
		}, onChangeBbColor1 : function(v13,_18) {
			var this3 = _gthis.updateSurfaceShader.bbColor1.data;
			this3[0] = v13[0];
			this3[1] = v13[1];
			this3[2] = v13[2];
			return _gthis.updateSurfaceShader.bbColor1.dirty = true;
		}, onChangeBbColor2 : function(v14,_19) {
			var this4 = _gthis.updateSurfaceShader.bbColor2.data;
			this4[0] = v14[0];
			this4[1] = v14[1];
			this4[2] = v14[2];
			return _gthis.updateSurfaceShader.bbColor2.dirty = true;
		}, onChangeBbColor3 : function(v15,_20) {
			var this5 = _gthis.updateSurfaceShader.bbColor3.data;
			this5[0] = v15[0];
			this5[1] = v15[1];
			this5[2] = v15[2];
			return _gthis.updateSurfaceShader.bbColor3.dirty = true;
		}, onChangeBbColor4 : function(v16,_21) {
			var this6 = _gthis.updateSurfaceShader.bbColor4.data;
			this6[0] = v16[0];
			this6[1] = v16[1];
			this6[2] = v16[2];
			return _gthis.updateSurfaceShader.bbColor4.dirty = true;
		}, onChangeBbAdditiveFactor : function(v17,_22) {
			var _this11 = _gthis.updateSurfaceShader.bbAdditiveFactor;
			_this11.dirty = true;
			return _this11.data = v17;
		}, onChangeAlphaGradient : function(v18,_23) {
			return { };
		}, onChangeVelocityGradient : function(v19,_24) {
			return { };
		}, onChangeDyeGradient : function(v20,_25) {
			return { };
		}, onChangeGamma : function(v21,_26) {
			var _this12 = _gthis.renderFluidShader.invGamma;
			_this12.dirty = true;
			return _this12.data = 1.0 / v21;
		}, onChangeVignetteMagnitude : function(v22,_27) {
			return { };
		}, onChangeVignetteExponent : function(v23,_28) {
			return { };
		}, onChangeVignetteOpacity : function(v24,_29) {
			return { };
		}, onChangeOpticalFlowMirrorX : function(v25,_30) {
			return _gthis.opticalFlow.mirrorX = v25;
		}, onChangeOpticalFlowTemporalSmoothing : function(v26,_31) {
			return _gthis.opticalFlow.temporalSmoothing = v26;
		}, onChangeOpticalFlowScale : function(v27,_32) {
			return _gthis.opticalFlow.scale = v27;
		}, onChangeOpticalFlowExponent : function(v28,_33) {
			var _this13 = _gthis.updateForceShader.opticalFlowExponent;
			_this13.dirty = true;
			return _this13.data = v28;
		}, onChangeOpticalFlowBlurKernel : function(v29,_34) {
			return _gthis.opticalFlow.blurKernel = v29;
		}, onChangeOpticalFlowGamma : function(v30,_35) {
			return _gthis.opticalFlow.gamma = v30;
		}, onChangeFluidScale : function(v31,_36) {
			_gthis.resize(_gthis.drawingBufferWidth,_gthis.drawingBufferHeight);
			return;
		}, onChangeSimulationScale : function(v32,_37) {
			_gthis.resize(_gthis.drawingBufferWidth,_gthis.drawingBufferHeight);
			return;
		}, onChangePowerOf2Fluid : function(v33,_38) {
			_gthis.resize(_gthis.drawingBufferWidth,_gthis.drawingBufferHeight);
			return;
		}});
		this.opticalFlow = new GPUOpticalFlow(this.gl);
		this.opticalFlow.mirrorX = this.settings.opticalFlowMirrorX;
		this.opticalFlow.scale = this.settings.opticalFlowScale;
		this.opticalFlow.blurKernel = this.settings.opticalFlowBlurKernel;
		this.opticalFlow.gamma = this.settings.opticalFlowGamma;
		this.bloomFilter = new filter_Bloom(this.gl);
	}
	,initializeParticles: function() {
		this.particles = new GPUParticles(this.gl,this.particleCount);
		var _this = this.fluid;
		this.particles.stepParticlesShader.flowScale.data[0] = 1 / (_this.physicsScale * _this.aspectRatio);
		this.particles.stepParticlesShader.flowScale.data[1] = 1 / this.fluid.physicsScale;
		var _this1 = this.particles.stepParticlesShader.dragCoefficient;
		_this1.dirty = true;
		_this1.data = 1;
	}
	,resize: function(width,height) {
		this.drawingBufferWidth = width;
		this.drawingBufferHeight = height;
		var fluidWidth = this.settings.fluidScale * this.drawingBufferWidth | 0;
		var fluidHeight = this.settings.fluidScale * this.drawingBufferHeight | 0;
		var _this = this.fluid;
		var simulationScale = this.settings.simulationScale;
		var powerOf2Surface = this.settings.powerOf2Fluid;
		if(fluidWidth != null) {
			_this.width = fluidWidth;
		}
		if(fluidHeight != null) {
			_this.height = fluidHeight;
		}
		if(simulationScale != null) {
			_this.simulationScale = simulationScale;
		}
		if(powerOf2Surface != null) {
			_this.powerOf2Surface = powerOf2Surface;
		}
		_this.aspectRatio = _this.width / _this.height;
		_this.updateTextureSizes();
		var _this1 = this.offscreenTarget;
		var width1 = this.fluid.width;
		var height1 = this.fluid.height;
		var newTexture = _this1.createEmptyTexture(width1,height1);
		_this1.gl.bindFramebuffer(36160,_this1.frameBufferObject);
		_this1.gl.framebufferTexture2D(36160,36064,3553,newTexture.native,0);
		if(_this1.texture != null) {
			var resampler = SharedGPUResources.getResampleShader(_this1.gl);
			var _this2 = resampler.texture;
			_this2.dirty = true;
			_this2.data = _this1.texture.native;
			_this1.gl.bindFramebuffer(36160,_this1.frameBufferObject);
			_this1.gl.viewport(0,0,width1,height1);
			_this1.gl.bindBuffer(34962,SharedGPUResources.getScreenTriangle(_this1.gl));
			if(resampler._active) {
				var _g = 0;
				var _g1 = resampler._uniforms;
				while(_g < _g1.length) {
					var u = _g1[_g];
					++_g;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g2 = 0;
				var _g11 = resampler._attributes.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var att = resampler._attributes[i];
					var location = att.location;
					if(location != -1) {
						resampler.gl.enableVertexAttribArray(location);
						resampler.gl.vertexAttribPointer(location,att.itemCount,att.type,false,resampler._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!resampler._ready) {
					resampler.create();
				}
				resampler.gl.useProgram(resampler._prog);
				var _g3 = 0;
				var _g12 = resampler._uniforms;
				while(_g3 < _g12.length) {
					var u1 = _g12[_g3];
					++_g3;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g4 = 0;
				var _g13 = resampler._attributes.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var att1 = resampler._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						resampler.gl.enableVertexAttribArray(location1);
						resampler.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,resampler._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				resampler._active = true;
			}
			_this1.gl.drawArrays(4,0,3);
			resampler.deactivate();
			_this1.gl.deleteTexture(_this1.texture.native);
		} else {
			_this1.gl.bindFramebuffer(36160,_this1.frameBufferObject);
			_this1.gl.viewport(0,0,_this1.width,_this1.height);
			_this1.gl.clearColor(0,0,0,1);
			_this1.gl.clear(16384);
		}
		_this1.width = width1;
		_this1.height = height1;
		_this1.texture = newTexture;
	}
	,onFrame: function(t_ms) {
		var _gthis = this;
		if(this.settings.paused) {
			return;
		}
		var dt_s = Math.min(t_ms - this.lastTime,33.3333333333333357) / 1000;
		this.lastTime = t_ms;
		var nullTexture = SharedGPUResources.getNullTexture(this.gl);
		var _this = this.updateForceShader.userVelocityTexture;
		_this.dirty = true;
		_this.data = nullTexture.native;
		var time_s = t_ms / 1000;
		var _this1 = this.updateSurfaceShader.time_s;
		_this1.dirty = true;
		_this1.data = time_s;
		var _this2 = this.updateForceShader.time_s;
		_this2.dirty = true;
		_this2.data = time_s;
		var pointerIndex = 0;
		var _g = new haxe_iterators_MapKeyValueIterator(this.activePointers);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var pointerId = _g1.key;
			var pointer = _g1.value;
			if(pointerIndex >= 10) {
				break;
			}
			var lastFramePointer = this.activePointersLastFrame.h[pointerId];
			if(lastFramePointer == null) {
				lastFramePointer = pointer;
			}
			var velocityX = pointer.overrideVelocityX != null ? pointer.overrideVelocityX : ((pointer.x / _gthis.drawingBufferWidth * 2 - 1) * _gthis.fluid.aspectRatio - (lastFramePointer.x / _gthis.drawingBufferWidth * 2 - 1) * _gthis.fluid.aspectRatio) / dt_s;
			var velocityY = pointer.overrideVelocityY != null ? pointer.overrideVelocityY : ((_gthis.drawingBufferHeight - pointer.y) / _gthis.drawingBufferHeight * 2 - 1 - ((_gthis.drawingBufferHeight - lastFramePointer.y) / _gthis.drawingBufferHeight * 2 - 1)) / dt_s;
			var p = pointerIndex * 4;
			this.pointerPositionsBuffer[p] = (pointer.x / _gthis.drawingBufferWidth * 2 - 1) * _gthis.fluid.aspectRatio;
			this.pointerPositionsBuffer[p + 1] = (_gthis.drawingBufferHeight - pointer.y) / _gthis.drawingBufferHeight * 2 - 1;
			this.pointerPositionsBuffer[p + 2] = velocityX;
			this.pointerPositionsBuffer[p + 3] = velocityY;
			var q = pointerIndex * 2;
			this.pointerDataBuffer[q] = pointer.radius / this.drawingBufferWidth * this.fluid.aspectRatio;
			this.pointerDataBuffer[q + 1] = pointer.pressure;
			var t = pointerIndex * 4;
			this.pointerColorBuffer[t] = pointer.color[0];
			this.pointerColorBuffer[t + 1] = pointer.color[1];
			this.pointerColorBuffer[t + 2] = pointer.color[2];
			this.pointerColorBuffer[t + 3] = pointer.color[3];
			var lastFramePointer1 = this.activePointersLastFrame.h[pointerId];
			if(lastFramePointer1 != null) {
				lastFramePointer1.type = pointer.type;
				lastFramePointer1.x = pointer.x;
				lastFramePointer1.y = pointer.y;
				lastFramePointer1.buttonState = pointer.buttonState;
				lastFramePointer1.pressure = pointer.pressure;
				lastFramePointer1.radius = pointer.radius;
				lastFramePointer1.angle = pointer.angle;
				lastFramePointer1.altitudeAngle = pointer.altitudeAngle;
				lastFramePointer1.azimuthAngle = pointer.azimuthAngle;
				lastFramePointer1.color = pointer.color;
				lastFramePointer1.overrideVelocityX = pointer.overrideVelocityX;
				lastFramePointer1.overrideVelocityY = pointer.overrideVelocityY;
			} else {
				var this1 = this.activePointersLastFrame;
				var v = new Pointer(pointer.type,pointer.x,pointer.y,pointer.buttonState,pointer.pressure,pointer.radius,pointer.angle,pointer.altitudeAngle,pointer.azimuthAngle,pointer.color,pointer.overrideVelocityX,pointer.overrideVelocityY);
				this1.h[pointerId] = v;
			}
			++pointerIndex;
		}
		var _this3 = this.updateSurfaceShader.activePointerCount;
		_this3.dirty = true;
		_this3.data = pointerIndex;
		var _this4 = this.updateForceShader.activePointerCount;
		_this4.dirty = true;
		_this4.data = pointerIndex;
		this.fluid.step(dt_s * this.settings.timestepMultiplier);
		if(this.renderParticlesEnabled && this.particles == null) {
			this.initializeParticles();
		}
		if(this.renderParticlesEnabled) {
			var _this5 = this.particles.stepParticlesShader.flowVelocityField;
			_this5.dirty = true;
			_this5.data = this.fluid.velocityRenderTarget.readFromTexture.native;
			var _this6 = this.particles;
			var _this7 = _this6.stepParticlesShader.dt;
			_this7.dirty = true;
			_this7.data = dt_s * this.settings.timestepMultiplier;
			var _this8 = _this6.stepParticlesShader.particleData;
			_this8.dirty = true;
			_this8.data = _this6.particleData.readFromTexture.native;
			var shader = _this6.stepParticlesShader;
			var target = _this6.particleData;
			_this6.gl.viewport(0,0,target.width,target.height);
			_this6.gl.bindFramebuffer(36160,target.writeFrameBufferObject);
			_this6.gl.bindBuffer(34962,_this6.screenTriangle);
			if(shader._active) {
				var _g2 = 0;
				var _g11 = shader._uniforms;
				while(_g2 < _g11.length) {
					var u = _g11[_g2];
					++_g2;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g3 = 0;
				var _g12 = shader._attributes.length;
				while(_g3 < _g12) {
					var i = _g3++;
					var att = shader._attributes[i];
					var location = att.location;
					if(location != -1) {
						shader.gl.enableVertexAttribArray(location);
						shader.gl.vertexAttribPointer(location,att.itemCount,att.type,false,shader._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!shader._ready) {
					shader.create();
				}
				shader.gl.useProgram(shader._prog);
				var _g4 = 0;
				var _g13 = shader._uniforms;
				while(_g4 < _g13.length) {
					var u1 = _g13[_g4];
					++_g4;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g5 = 0;
				var _g14 = shader._attributes.length;
				while(_g5 < _g14) {
					var i1 = _g5++;
					var att1 = shader._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						shader.gl.enableVertexAttribArray(location1);
						shader.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,shader._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				shader._active = true;
			}
			_this6.gl.drawArrays(4,0,3);
			shader.deactivate();
			target.tmpFBO = target.writeFrameBufferObject;
			target.writeFrameBufferObject = target.readFrameBufferObject;
			target.readFrameBufferObject = target.tmpFBO;
			target.tmpTex = target.writeToTexture;
			target.writeToTexture = target.readFromTexture;
			target.readFromTexture = target.tmpTex;
		}
		if(this.postProcessingEnabled) {
			var target1 = this.offscreenTarget;
			if(target1 == null) {
				this.gl.viewport(0,0,this.drawingBufferWidth,this.drawingBufferHeight);
				this.gl.bindFramebuffer(36160,this.screenBuffer);
			} else {
				this.gl.viewport(0,0,target1.width,target1.height);
				this.gl.bindFramebuffer(36160,target1.frameBufferObject);
			}
			this.gl.clearColor(0,0,0,1);
			this.gl.clear(16384);
			if(this.remapFluidColor) {
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this9 = this.renderFluidShader.texture;
				_this9.dirty = true;
				_this9.data = this.fluid.surfaceRenderTarget.readFromTexture.native;
				var _this10 = this.renderFluidShader;
				if(_this10._active) {
					var _g6 = 0;
					var _g15 = _this10._uniforms;
					while(_g6 < _g15.length) {
						var u2 = _g15[_g6];
						++_g6;
						if(u2.dirty || u2.alwaysDirty) {
							u2.apply();
						}
					}
					var offset2 = 0;
					var _g7 = 0;
					var _g16 = _this10._attributes.length;
					while(_g7 < _g16) {
						var i2 = _g7++;
						var att2 = _this10._attributes[i2];
						var location2 = att2.location;
						if(location2 != -1) {
							_this10.gl.enableVertexAttribArray(location2);
							_this10.gl.vertexAttribPointer(location2,att2.itemCount,att2.type,false,_this10._aStride,offset2);
						}
						offset2 += att2.byteSize;
					}
				} else {
					if(!_this10._ready) {
						_this10.create();
					}
					_this10.gl.useProgram(_this10._prog);
					var _g8 = 0;
					var _g17 = _this10._uniforms;
					while(_g8 < _g17.length) {
						var u3 = _g17[_g8];
						++_g8;
						if(u3.dirty || u3.alwaysDirty) {
							u3.apply();
						}
					}
					var offset3 = 0;
					var _g9 = 0;
					var _g18 = _this10._attributes.length;
					while(_g9 < _g18) {
						var i3 = _g9++;
						var att3 = _this10._attributes[i3];
						var location3 = att3.location;
						if(location3 != -1) {
							_this10.gl.enableVertexAttribArray(location3);
							_this10.gl.vertexAttribPointer(location3,att3.itemCount,att3.type,false,_this10._aStride,offset3);
						}
						offset3 += att3.byteSize;
					}
					_this10._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.renderFluidShader.deactivate();
			} else {
				var texture = this.fluid.surfaceRenderTarget.readFromTexture.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this11 = this.screenTextureShader.texture;
				_this11.dirty = true;
				_this11.data = texture;
				var _this12 = this.screenTextureShader;
				if(_this12._active) {
					var _g10 = 0;
					var _g19 = _this12._uniforms;
					while(_g10 < _g19.length) {
						var u4 = _g19[_g10];
						++_g10;
						if(u4.dirty || u4.alwaysDirty) {
							u4.apply();
						}
					}
					var offset4 = 0;
					var _g20 = 0;
					var _g110 = _this12._attributes.length;
					while(_g20 < _g110) {
						var i4 = _g20++;
						var att4 = _this12._attributes[i4];
						var location4 = att4.location;
						if(location4 != -1) {
							_this12.gl.enableVertexAttribArray(location4);
							_this12.gl.vertexAttribPointer(location4,att4.itemCount,att4.type,false,_this12._aStride,offset4);
						}
						offset4 += att4.byteSize;
					}
				} else {
					if(!_this12._ready) {
						_this12.create();
					}
					_this12.gl.useProgram(_this12._prog);
					var _g21 = 0;
					var _g111 = _this12._uniforms;
					while(_g21 < _g111.length) {
						var u5 = _g111[_g21];
						++_g21;
						if(u5.dirty || u5.alwaysDirty) {
							u5.apply();
						}
					}
					var offset5 = 0;
					var _g22 = 0;
					var _g112 = _this12._attributes.length;
					while(_g22 < _g112) {
						var i5 = _g22++;
						var att5 = _this12._attributes[i5];
						var location5 = att5.location;
						if(location5 != -1) {
							_this12.gl.enableVertexAttribArray(location5);
							_this12.gl.vertexAttribPointer(location5,att5.itemCount,att5.type,false,_this12._aStride,offset5);
						}
						offset5 += att5.byteSize;
					}
					_this12._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
			var _this13 = this.bloomFilter;
			var input = this.offscreenTarget.texture;
			var textureParams = null;
			if(textureParams == null) {
				textureParams = input;
			}
			var downsampleCount = Math.floor(math_POT.log2(Math.max(input.width,input.height) / _this13.downsampleSize));
			if(_this13.downsampleChain != null && _this13.downsampleChain.count != downsampleCount) {
				_this13.downsampleChain.releaseGPUMemory();
				_this13.downsampleChain = null;
			}
			if(_this13.downsampleChain == null && downsampleCount > 0) {
				haxe_Log.trace("creating downsample chain",{ fileName : "src/filter/Bloom.hx", lineNumber : 36, className : "filter.Bloom", methodName : "apply", customParams : [downsampleCount]});
				_this13.downsampleChain = new filter_DownsampleHalfChain(_this13.gl,downsampleCount);
			}
			var downsampled = _this13.downsampleChain != null ? _this13.downsampleChain.apply(input) : input;
			var blurKernelX = _this13.blurKernelNormalized * input.width;
			var blurKernelY = _this13.blurKernelNormalized * input.height;
			var downsampleEffectiveKernel = 1 << downsampleCount;
			var gaussKernelX = blurKernelX / downsampleEffectiveKernel;
			var gaussKernelY = blurKernelY / downsampleEffectiveKernel;
			if(_this13.blur != null && (_this13.blur.kernelX != gaussKernelX || _this13.blur.kernelY != gaussKernelY)) {
				_this13.blur.releaseGPUMemory();
				_this13.blur = null;
			}
			if(_this13.blur == null && (gaussKernelX > 1 || gaussKernelY > 1)) {
				_this13.blur = new filter_Blur(_this13.gl,gaussKernelX,gaussKernelY);
			}
			var blurred = _this13.blur != null ? _this13.blur.apply(downsampled) : downsampled;
			var postProcessed = blurred;
			this.gl.viewport(0,0,this.drawingBufferWidth,this.drawingBufferHeight);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			this.gl.clearColor(0,0,0,1);
			this.gl.clear(16384);
			var texture1 = postProcessed.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this14 = this.screenTextureShader.texture;
			_this14.dirty = true;
			_this14.data = texture1;
			var _this15 = this.screenTextureShader;
			if(_this15._active) {
				var _g23 = 0;
				var _g113 = _this15._uniforms;
				while(_g23 < _g113.length) {
					var u6 = _g113[_g23];
					++_g23;
					if(u6.dirty || u6.alwaysDirty) {
						u6.apply();
					}
				}
				var offset6 = 0;
				var _g24 = 0;
				var _g114 = _this15._attributes.length;
				while(_g24 < _g114) {
					var i6 = _g24++;
					var att6 = _this15._attributes[i6];
					var location6 = att6.location;
					if(location6 != -1) {
						_this15.gl.enableVertexAttribArray(location6);
						_this15.gl.vertexAttribPointer(location6,att6.itemCount,att6.type,false,_this15._aStride,offset6);
					}
					offset6 += att6.byteSize;
				}
			} else {
				if(!_this15._ready) {
					_this15.create();
				}
				_this15.gl.useProgram(_this15._prog);
				var _g25 = 0;
				var _g115 = _this15._uniforms;
				while(_g25 < _g115.length) {
					var u7 = _g115[_g25];
					++_g25;
					if(u7.dirty || u7.alwaysDirty) {
						u7.apply();
					}
				}
				var offset7 = 0;
				var _g26 = 0;
				var _g116 = _this15._attributes.length;
				while(_g26 < _g116) {
					var i7 = _g26++;
					var att7 = _this15._attributes[i7];
					var location7 = att7.location;
					if(location7 != -1) {
						_this15.gl.enableVertexAttribArray(location7);
						_this15.gl.vertexAttribPointer(location7,att7.itemCount,att7.type,false,_this15._aStride,offset7);
					}
					offset7 += att7.byteSize;
				}
				_this15._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		} else {
			this.gl.viewport(0,0,this.drawingBufferWidth,this.drawingBufferHeight);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			this.gl.clearColor(0,0,0,1);
			this.gl.clear(16384);
			if(this.remapFluidColor) {
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this16 = this.renderFluidShader.texture;
				_this16.dirty = true;
				_this16.data = this.fluid.surfaceRenderTarget.readFromTexture.native;
				var _this17 = this.renderFluidShader;
				if(_this17._active) {
					var _g27 = 0;
					var _g117 = _this17._uniforms;
					while(_g27 < _g117.length) {
						var u8 = _g117[_g27];
						++_g27;
						if(u8.dirty || u8.alwaysDirty) {
							u8.apply();
						}
					}
					var offset8 = 0;
					var _g28 = 0;
					var _g118 = _this17._attributes.length;
					while(_g28 < _g118) {
						var i8 = _g28++;
						var att8 = _this17._attributes[i8];
						var location8 = att8.location;
						if(location8 != -1) {
							_this17.gl.enableVertexAttribArray(location8);
							_this17.gl.vertexAttribPointer(location8,att8.itemCount,att8.type,false,_this17._aStride,offset8);
						}
						offset8 += att8.byteSize;
					}
				} else {
					if(!_this17._ready) {
						_this17.create();
					}
					_this17.gl.useProgram(_this17._prog);
					var _g29 = 0;
					var _g119 = _this17._uniforms;
					while(_g29 < _g119.length) {
						var u9 = _g119[_g29];
						++_g29;
						if(u9.dirty || u9.alwaysDirty) {
							u9.apply();
						}
					}
					var offset9 = 0;
					var _g30 = 0;
					var _g120 = _this17._attributes.length;
					while(_g30 < _g120) {
						var i9 = _g30++;
						var att9 = _this17._attributes[i9];
						var location9 = att9.location;
						if(location9 != -1) {
							_this17.gl.enableVertexAttribArray(location9);
							_this17.gl.vertexAttribPointer(location9,att9.itemCount,att9.type,false,_this17._aStride,offset9);
						}
						offset9 += att9.byteSize;
					}
					_this17._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.renderFluidShader.deactivate();
			} else {
				var texture2 = this.fluid.surfaceRenderTarget.readFromTexture.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this18 = this.screenTextureShader.texture;
				_this18.dirty = true;
				_this18.data = texture2;
				var _this19 = this.screenTextureShader;
				if(_this19._active) {
					var _g31 = 0;
					var _g121 = _this19._uniforms;
					while(_g31 < _g121.length) {
						var u10 = _g121[_g31];
						++_g31;
						if(u10.dirty || u10.alwaysDirty) {
							u10.apply();
						}
					}
					var offset10 = 0;
					var _g32 = 0;
					var _g122 = _this19._attributes.length;
					while(_g32 < _g122) {
						var i10 = _g32++;
						var att10 = _this19._attributes[i10];
						var location10 = att10.location;
						if(location10 != -1) {
							_this19.gl.enableVertexAttribArray(location10);
							_this19.gl.vertexAttribPointer(location10,att10.itemCount,att10.type,false,_this19._aStride,offset10);
						}
						offset10 += att10.byteSize;
					}
				} else {
					if(!_this19._ready) {
						_this19.create();
					}
					_this19.gl.useProgram(_this19._prog);
					var _g33 = 0;
					var _g123 = _this19._uniforms;
					while(_g33 < _g123.length) {
						var u11 = _g123[_g33];
						++_g33;
						if(u11.dirty || u11.alwaysDirty) {
							u11.apply();
						}
					}
					var offset11 = 0;
					var _g34 = 0;
					var _g124 = _this19._attributes.length;
					while(_g34 < _g124) {
						var i11 = _g34++;
						var att11 = _this19._attributes[i11];
						var location11 = att11.location;
						if(location11 != -1) {
							_this19.gl.enableVertexAttribArray(location11);
							_this19.gl.vertexAttribPointer(location11,att11.itemCount,att11.type,false,_this19._aStride,offset11);
						}
						offset11 += att11.byteSize;
					}
					_this19._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
		}
		if(this.renderParticlesEnabled) {
			this.gl.enable(3042);
			this.gl.blendFunc(774,768);
			this.gl.blendEquation(32774);
			this.gl.bindBuffer(34962,this.particles.particleUVs);
			var _this20 = this.renderParticlesShader.particleData;
			_this20.dirty = true;
			_this20.data = this.particles.particleData.readFromTexture.native;
			var _this21 = this.renderParticlesShader;
			if(_this21._active) {
				var _g35 = 0;
				var _g125 = _this21._uniforms;
				while(_g35 < _g125.length) {
					var u12 = _g125[_g35];
					++_g35;
					if(u12.dirty || u12.alwaysDirty) {
						u12.apply();
					}
				}
				var offset12 = 0;
				var _g36 = 0;
				var _g126 = _this21._attributes.length;
				while(_g36 < _g126) {
					var i12 = _g36++;
					var att12 = _this21._attributes[i12];
					var location12 = att12.location;
					if(location12 != -1) {
						_this21.gl.enableVertexAttribArray(location12);
						_this21.gl.vertexAttribPointer(location12,att12.itemCount,att12.type,false,_this21._aStride,offset12);
					}
					offset12 += att12.byteSize;
				}
			} else {
				if(!_this21._ready) {
					_this21.create();
				}
				_this21.gl.useProgram(_this21._prog);
				var _g37 = 0;
				var _g127 = _this21._uniforms;
				while(_g37 < _g127.length) {
					var u13 = _g127[_g37];
					++_g37;
					if(u13.dirty || u13.alwaysDirty) {
						u13.apply();
					}
				}
				var offset13 = 0;
				var _g38 = 0;
				var _g128 = _this21._attributes.length;
				while(_g38 < _g128) {
					var i13 = _g38++;
					var att13 = _this21._attributes[i13];
					var location13 = att13.location;
					if(location13 != -1) {
						_this21.gl.enableVertexAttribArray(location13);
						_this21.gl.vertexAttribPointer(location13,att13.itemCount,att13.type,false,_this21._aStride,offset13);
					}
					offset13 += att13.byteSize;
				}
				_this21._active = true;
			}
			this.gl.drawArrays(0,0,this.particles.count);
			this.renderParticlesShader.deactivate();
			this.gl.disable(3042);
		}
		this.debugTextureBL = this.opticalFlow.currentFrame.processedImage;
		this.debugTextureTL = this.opticalFlow.averageVelocity._currentTarget.readFromTexture;
		if(this.showDebugTextures) {
			var size = 0.25;
			if(this.debugTextureBL != null) {
				this.gl.viewport(0,0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
				this.gl.bindFramebuffer(36160,this.screenBuffer);
				var texture3 = this.debugTextureBL.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this22 = this.screenTextureShader.texture;
				_this22.dirty = true;
				_this22.data = texture3;
				var _this23 = this.screenTextureShader;
				if(_this23._active) {
					var _g39 = 0;
					var _g129 = _this23._uniforms;
					while(_g39 < _g129.length) {
						var u14 = _g129[_g39];
						++_g39;
						if(u14.dirty || u14.alwaysDirty) {
							u14.apply();
						}
					}
					var offset14 = 0;
					var _g40 = 0;
					var _g130 = _this23._attributes.length;
					while(_g40 < _g130) {
						var i14 = _g40++;
						var att14 = _this23._attributes[i14];
						var location14 = att14.location;
						if(location14 != -1) {
							_this23.gl.enableVertexAttribArray(location14);
							_this23.gl.vertexAttribPointer(location14,att14.itemCount,att14.type,false,_this23._aStride,offset14);
						}
						offset14 += att14.byteSize;
					}
				} else {
					if(!_this23._ready) {
						_this23.create();
					}
					_this23.gl.useProgram(_this23._prog);
					var _g41 = 0;
					var _g131 = _this23._uniforms;
					while(_g41 < _g131.length) {
						var u15 = _g131[_g41];
						++_g41;
						if(u15.dirty || u15.alwaysDirty) {
							u15.apply();
						}
					}
					var offset15 = 0;
					var _g42 = 0;
					var _g132 = _this23._attributes.length;
					while(_g42 < _g132) {
						var i15 = _g42++;
						var att15 = _this23._attributes[i15];
						var location15 = att15.location;
						if(location15 != -1) {
							_this23.gl.enableVertexAttribArray(location15);
							_this23.gl.vertexAttribPointer(location15,att15.itemCount,att15.type,false,_this23._aStride,offset15);
						}
						offset15 += att15.byteSize;
					}
					_this23._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
			if(this.debugTextureBR != null) {
				this.gl.viewport(this.drawingBufferWidth - this.drawingBufferWidth * size | 0,0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
				this.gl.bindFramebuffer(36160,this.screenBuffer);
				var texture4 = this.debugTextureBR.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this24 = this.screenTextureShader.texture;
				_this24.dirty = true;
				_this24.data = texture4;
				var _this25 = this.screenTextureShader;
				if(_this25._active) {
					var _g43 = 0;
					var _g133 = _this25._uniforms;
					while(_g43 < _g133.length) {
						var u16 = _g133[_g43];
						++_g43;
						if(u16.dirty || u16.alwaysDirty) {
							u16.apply();
						}
					}
					var offset16 = 0;
					var _g44 = 0;
					var _g134 = _this25._attributes.length;
					while(_g44 < _g134) {
						var i16 = _g44++;
						var att16 = _this25._attributes[i16];
						var location16 = att16.location;
						if(location16 != -1) {
							_this25.gl.enableVertexAttribArray(location16);
							_this25.gl.vertexAttribPointer(location16,att16.itemCount,att16.type,false,_this25._aStride,offset16);
						}
						offset16 += att16.byteSize;
					}
				} else {
					if(!_this25._ready) {
						_this25.create();
					}
					_this25.gl.useProgram(_this25._prog);
					var _g45 = 0;
					var _g135 = _this25._uniforms;
					while(_g45 < _g135.length) {
						var u17 = _g135[_g45];
						++_g45;
						if(u17.dirty || u17.alwaysDirty) {
							u17.apply();
						}
					}
					var offset17 = 0;
					var _g46 = 0;
					var _g136 = _this25._attributes.length;
					while(_g46 < _g136) {
						var i17 = _g46++;
						var att17 = _this25._attributes[i17];
						var location17 = att17.location;
						if(location17 != -1) {
							_this25.gl.enableVertexAttribArray(location17);
							_this25.gl.vertexAttribPointer(location17,att17.itemCount,att17.type,false,_this25._aStride,offset17);
						}
						offset17 += att17.byteSize;
					}
					_this25._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
			if(this.debugTextureTL != null) {
				this.gl.viewport(0,this.drawingBufferHeight - this.drawingBufferHeight * size | 0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
				this.gl.bindFramebuffer(36160,this.screenBuffer);
				var texture5 = this.debugTextureTL.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this26 = this.screenTextureShader.texture;
				_this26.dirty = true;
				_this26.data = texture5;
				var _this27 = this.screenTextureShader;
				if(_this27._active) {
					var _g47 = 0;
					var _g137 = _this27._uniforms;
					while(_g47 < _g137.length) {
						var u18 = _g137[_g47];
						++_g47;
						if(u18.dirty || u18.alwaysDirty) {
							u18.apply();
						}
					}
					var offset18 = 0;
					var _g48 = 0;
					var _g138 = _this27._attributes.length;
					while(_g48 < _g138) {
						var i18 = _g48++;
						var att18 = _this27._attributes[i18];
						var location18 = att18.location;
						if(location18 != -1) {
							_this27.gl.enableVertexAttribArray(location18);
							_this27.gl.vertexAttribPointer(location18,att18.itemCount,att18.type,false,_this27._aStride,offset18);
						}
						offset18 += att18.byteSize;
					}
				} else {
					if(!_this27._ready) {
						_this27.create();
					}
					_this27.gl.useProgram(_this27._prog);
					var _g49 = 0;
					var _g139 = _this27._uniforms;
					while(_g49 < _g139.length) {
						var u19 = _g139[_g49];
						++_g49;
						if(u19.dirty || u19.alwaysDirty) {
							u19.apply();
						}
					}
					var offset19 = 0;
					var _g50 = 0;
					var _g140 = _this27._attributes.length;
					while(_g50 < _g140) {
						var i19 = _g50++;
						var att19 = _this27._attributes[i19];
						var location19 = att19.location;
						if(location19 != -1) {
							_this27.gl.enableVertexAttribArray(location19);
							_this27.gl.vertexAttribPointer(location19,att19.itemCount,att19.type,false,_this27._aStride,offset19);
						}
						offset19 += att19.byteSize;
					}
					_this27._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
			if(this.debugTextureTR != null) {
				this.gl.viewport(this.drawingBufferWidth - this.drawingBufferWidth * size | 0,this.drawingBufferHeight - this.drawingBufferHeight * size | 0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
				this.gl.bindFramebuffer(36160,this.screenBuffer);
				var texture6 = this.debugTextureTR.native;
				this.gl.bindBuffer(34962,this.screenTriangle);
				var _this28 = this.screenTextureShader.texture;
				_this28.dirty = true;
				_this28.data = texture6;
				var _this29 = this.screenTextureShader;
				if(_this29._active) {
					var _g51 = 0;
					var _g141 = _this29._uniforms;
					while(_g51 < _g141.length) {
						var u20 = _g141[_g51];
						++_g51;
						if(u20.dirty || u20.alwaysDirty) {
							u20.apply();
						}
					}
					var offset20 = 0;
					var _g52 = 0;
					var _g142 = _this29._attributes.length;
					while(_g52 < _g142) {
						var i20 = _g52++;
						var att20 = _this29._attributes[i20];
						var location20 = att20.location;
						if(location20 != -1) {
							_this29.gl.enableVertexAttribArray(location20);
							_this29.gl.vertexAttribPointer(location20,att20.itemCount,att20.type,false,_this29._aStride,offset20);
						}
						offset20 += att20.byteSize;
					}
				} else {
					if(!_this29._ready) {
						_this29.create();
					}
					_this29.gl.useProgram(_this29._prog);
					var _g53 = 0;
					var _g143 = _this29._uniforms;
					while(_g53 < _g143.length) {
						var u21 = _g143[_g53];
						++_g53;
						if(u21.dirty || u21.alwaysDirty) {
							u21.apply();
						}
					}
					var offset21 = 0;
					var _g54 = 0;
					var _g144 = _this29._attributes.length;
					while(_g54 < _g144) {
						var i21 = _g54++;
						var att21 = _this29._attributes[i21];
						var location21 = att21.location;
						if(location21 != -1) {
							_this29.gl.enableVertexAttribArray(location21);
							_this29.gl.vertexAttribPointer(location21,att21.itemCount,att21.type,false,_this29._aStride,offset21);
						}
						offset21 += att21.byteSize;
					}
					_this29._active = true;
				}
				this.gl.drawArrays(4,0,3);
				this.screenTextureShader.deactivate();
			}
		}
	}
	,renderFluid: function(target) {
		if(target == null) {
			this.gl.viewport(0,0,this.drawingBufferWidth,this.drawingBufferHeight);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
		} else {
			this.gl.viewport(0,0,target.width,target.height);
			this.gl.bindFramebuffer(36160,target.frameBufferObject);
		}
		this.gl.clearColor(0,0,0,1);
		this.gl.clear(16384);
		if(this.remapFluidColor) {
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this = this.renderFluidShader.texture;
			_this.dirty = true;
			_this.data = this.fluid.surfaceRenderTarget.readFromTexture.native;
			var _this1 = this.renderFluidShader;
			if(_this1._active) {
				var _g = 0;
				var _g1 = _this1._uniforms;
				while(_g < _g1.length) {
					var u = _g1[_g];
					++_g;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g2 = 0;
				var _g11 = _this1._attributes.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var att = _this1._attributes[i];
					var location = att.location;
					if(location != -1) {
						_this1.gl.enableVertexAttribArray(location);
						_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!_this1._ready) {
					_this1.create();
				}
				_this1.gl.useProgram(_this1._prog);
				var _g3 = 0;
				var _g12 = _this1._uniforms;
				while(_g3 < _g12.length) {
					var u1 = _g12[_g3];
					++_g3;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g4 = 0;
				var _g13 = _this1._attributes.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var att1 = _this1._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						_this1.gl.enableVertexAttribArray(location1);
						_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				_this1._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.renderFluidShader.deactivate();
		} else {
			var texture = this.fluid.surfaceRenderTarget.readFromTexture.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this2 = this.screenTextureShader.texture;
			_this2.dirty = true;
			_this2.data = texture;
			var _this3 = this.screenTextureShader;
			if(_this3._active) {
				var _g5 = 0;
				var _g14 = _this3._uniforms;
				while(_g5 < _g14.length) {
					var u2 = _g14[_g5];
					++_g5;
					if(u2.dirty || u2.alwaysDirty) {
						u2.apply();
					}
				}
				var offset2 = 0;
				var _g6 = 0;
				var _g15 = _this3._attributes.length;
				while(_g6 < _g15) {
					var i2 = _g6++;
					var att2 = _this3._attributes[i2];
					var location2 = att2.location;
					if(location2 != -1) {
						_this3.gl.enableVertexAttribArray(location2);
						_this3.gl.vertexAttribPointer(location2,att2.itemCount,att2.type,false,_this3._aStride,offset2);
					}
					offset2 += att2.byteSize;
				}
			} else {
				if(!_this3._ready) {
					_this3.create();
				}
				_this3.gl.useProgram(_this3._prog);
				var _g7 = 0;
				var _g16 = _this3._uniforms;
				while(_g7 < _g16.length) {
					var u3 = _g16[_g7];
					++_g7;
					if(u3.dirty || u3.alwaysDirty) {
						u3.apply();
					}
				}
				var offset3 = 0;
				var _g8 = 0;
				var _g17 = _this3._attributes.length;
				while(_g8 < _g17) {
					var i3 = _g8++;
					var att3 = _this3._attributes[i3];
					var location3 = att3.location;
					if(location3 != -1) {
						_this3.gl.enableVertexAttribArray(location3);
						_this3.gl.vertexAttribPointer(location3,att3.itemCount,att3.type,false,_this3._aStride,offset3);
					}
					offset3 += att3.byteSize;
				}
				_this3._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		}
	}
	,renderTexture: function(texture) {
		this.gl.bindBuffer(34962,this.screenTriangle);
		var _this = this.screenTextureShader.texture;
		_this.dirty = true;
		_this.data = texture;
		var _this1 = this.screenTextureShader;
		if(_this1._active) {
			var _g = 0;
			var _g1 = _this1._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = _this1._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = _this1._attributes[i];
				var location = att.location;
				if(location != -1) {
					_this1.gl.enableVertexAttribArray(location);
					_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!_this1._ready) {
				_this1.create();
			}
			_this1.gl.useProgram(_this1._prog);
			var _g3 = 0;
			var _g12 = _this1._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = _this1._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = _this1._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					_this1.gl.enableVertexAttribArray(location1);
					_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			_this1._active = true;
		}
		this.gl.drawArrays(4,0,3);
		this.screenTextureShader.deactivate();
	}
	,renderParticles: function() {
		this.gl.bindBuffer(34962,this.particles.particleUVs);
		var _this = this.renderParticlesShader.particleData;
		_this.dirty = true;
		_this.data = this.particles.particleData.readFromTexture.native;
		var _this1 = this.renderParticlesShader;
		if(_this1._active) {
			var _g = 0;
			var _g1 = _this1._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = _this1._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = _this1._attributes[i];
				var location = att.location;
				if(location != -1) {
					_this1.gl.enableVertexAttribArray(location);
					_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!_this1._ready) {
				_this1.create();
			}
			_this1.gl.useProgram(_this1._prog);
			var _g3 = 0;
			var _g12 = _this1._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = _this1._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = _this1._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					_this1.gl.enableVertexAttribArray(location1);
					_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			_this1._active = true;
		}
		this.gl.drawArrays(0,0,this.particles.count);
		this.renderParticlesShader.deactivate();
	}
	,renderDebugTextures: function() {
		var size = 0.25;
		if(this.debugTextureBL != null) {
			this.gl.viewport(0,0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			var texture = this.debugTextureBL.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this = this.screenTextureShader.texture;
			_this.dirty = true;
			_this.data = texture;
			var _this1 = this.screenTextureShader;
			if(_this1._active) {
				var _g = 0;
				var _g1 = _this1._uniforms;
				while(_g < _g1.length) {
					var u = _g1[_g];
					++_g;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g2 = 0;
				var _g11 = _this1._attributes.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var att = _this1._attributes[i];
					var location = att.location;
					if(location != -1) {
						_this1.gl.enableVertexAttribArray(location);
						_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!_this1._ready) {
					_this1.create();
				}
				_this1.gl.useProgram(_this1._prog);
				var _g3 = 0;
				var _g12 = _this1._uniforms;
				while(_g3 < _g12.length) {
					var u1 = _g12[_g3];
					++_g3;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g4 = 0;
				var _g13 = _this1._attributes.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var att1 = _this1._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						_this1.gl.enableVertexAttribArray(location1);
						_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				_this1._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		}
		if(this.debugTextureBR != null) {
			this.gl.viewport(this.drawingBufferWidth - this.drawingBufferWidth * size | 0,0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			var texture1 = this.debugTextureBR.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this2 = this.screenTextureShader.texture;
			_this2.dirty = true;
			_this2.data = texture1;
			var _this3 = this.screenTextureShader;
			if(_this3._active) {
				var _g5 = 0;
				var _g14 = _this3._uniforms;
				while(_g5 < _g14.length) {
					var u2 = _g14[_g5];
					++_g5;
					if(u2.dirty || u2.alwaysDirty) {
						u2.apply();
					}
				}
				var offset2 = 0;
				var _g6 = 0;
				var _g15 = _this3._attributes.length;
				while(_g6 < _g15) {
					var i2 = _g6++;
					var att2 = _this3._attributes[i2];
					var location2 = att2.location;
					if(location2 != -1) {
						_this3.gl.enableVertexAttribArray(location2);
						_this3.gl.vertexAttribPointer(location2,att2.itemCount,att2.type,false,_this3._aStride,offset2);
					}
					offset2 += att2.byteSize;
				}
			} else {
				if(!_this3._ready) {
					_this3.create();
				}
				_this3.gl.useProgram(_this3._prog);
				var _g7 = 0;
				var _g16 = _this3._uniforms;
				while(_g7 < _g16.length) {
					var u3 = _g16[_g7];
					++_g7;
					if(u3.dirty || u3.alwaysDirty) {
						u3.apply();
					}
				}
				var offset3 = 0;
				var _g8 = 0;
				var _g17 = _this3._attributes.length;
				while(_g8 < _g17) {
					var i3 = _g8++;
					var att3 = _this3._attributes[i3];
					var location3 = att3.location;
					if(location3 != -1) {
						_this3.gl.enableVertexAttribArray(location3);
						_this3.gl.vertexAttribPointer(location3,att3.itemCount,att3.type,false,_this3._aStride,offset3);
					}
					offset3 += att3.byteSize;
				}
				_this3._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		}
		if(this.debugTextureTL != null) {
			this.gl.viewport(0,this.drawingBufferHeight - this.drawingBufferHeight * size | 0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			var texture2 = this.debugTextureTL.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this4 = this.screenTextureShader.texture;
			_this4.dirty = true;
			_this4.data = texture2;
			var _this5 = this.screenTextureShader;
			if(_this5._active) {
				var _g9 = 0;
				var _g18 = _this5._uniforms;
				while(_g9 < _g18.length) {
					var u4 = _g18[_g9];
					++_g9;
					if(u4.dirty || u4.alwaysDirty) {
						u4.apply();
					}
				}
				var offset4 = 0;
				var _g10 = 0;
				var _g19 = _this5._attributes.length;
				while(_g10 < _g19) {
					var i4 = _g10++;
					var att4 = _this5._attributes[i4];
					var location4 = att4.location;
					if(location4 != -1) {
						_this5.gl.enableVertexAttribArray(location4);
						_this5.gl.vertexAttribPointer(location4,att4.itemCount,att4.type,false,_this5._aStride,offset4);
					}
					offset4 += att4.byteSize;
				}
			} else {
				if(!_this5._ready) {
					_this5.create();
				}
				_this5.gl.useProgram(_this5._prog);
				var _g20 = 0;
				var _g110 = _this5._uniforms;
				while(_g20 < _g110.length) {
					var u5 = _g110[_g20];
					++_g20;
					if(u5.dirty || u5.alwaysDirty) {
						u5.apply();
					}
				}
				var offset5 = 0;
				var _g21 = 0;
				var _g111 = _this5._attributes.length;
				while(_g21 < _g111) {
					var i5 = _g21++;
					var att5 = _this5._attributes[i5];
					var location5 = att5.location;
					if(location5 != -1) {
						_this5.gl.enableVertexAttribArray(location5);
						_this5.gl.vertexAttribPointer(location5,att5.itemCount,att5.type,false,_this5._aStride,offset5);
					}
					offset5 += att5.byteSize;
				}
				_this5._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		}
		if(this.debugTextureTR != null) {
			this.gl.viewport(this.drawingBufferWidth - this.drawingBufferWidth * size | 0,this.drawingBufferHeight - this.drawingBufferHeight * size | 0,this.drawingBufferWidth * size | 0,this.drawingBufferHeight * size | 0);
			this.gl.bindFramebuffer(36160,this.screenBuffer);
			var texture3 = this.debugTextureTR.native;
			this.gl.bindBuffer(34962,this.screenTriangle);
			var _this6 = this.screenTextureShader.texture;
			_this6.dirty = true;
			_this6.data = texture3;
			var _this7 = this.screenTextureShader;
			if(_this7._active) {
				var _g22 = 0;
				var _g112 = _this7._uniforms;
				while(_g22 < _g112.length) {
					var u6 = _g112[_g22];
					++_g22;
					if(u6.dirty || u6.alwaysDirty) {
						u6.apply();
					}
				}
				var offset6 = 0;
				var _g23 = 0;
				var _g113 = _this7._attributes.length;
				while(_g23 < _g113) {
					var i6 = _g23++;
					var att6 = _this7._attributes[i6];
					var location6 = att6.location;
					if(location6 != -1) {
						_this7.gl.enableVertexAttribArray(location6);
						_this7.gl.vertexAttribPointer(location6,att6.itemCount,att6.type,false,_this7._aStride,offset6);
					}
					offset6 += att6.byteSize;
				}
			} else {
				if(!_this7._ready) {
					_this7.create();
				}
				_this7.gl.useProgram(_this7._prog);
				var _g24 = 0;
				var _g114 = _this7._uniforms;
				while(_g24 < _g114.length) {
					var u7 = _g114[_g24];
					++_g24;
					if(u7.dirty || u7.alwaysDirty) {
						u7.apply();
					}
				}
				var offset7 = 0;
				var _g25 = 0;
				var _g115 = _this7._attributes.length;
				while(_g25 < _g115) {
					var i7 = _g25++;
					var att7 = _this7._attributes[i7];
					var location7 = att7.location;
					if(location7 != -1) {
						_this7.gl.enableVertexAttribArray(location7);
						_this7.gl.vertexAttribPointer(location7,att7.itemCount,att7.type,false,_this7._aStride,offset7);
					}
					offset7 += att7.byteSize;
				}
				_this7._active = true;
			}
			this.gl.drawArrays(4,0,3);
			this.screenTextureShader.deactivate();
		}
	}
	,reset: function() {
		var _this = this.fluid;
		var _this1 = _this.velocityRenderTarget;
		var mask = 16384;
		_this1.gl.bindFramebuffer(36160,_this1.readFrameBufferObject);
		_this1.gl.viewport(0,0,_this1.width,_this1.height);
		_this1.gl.clearColor(0,0,0,1);
		_this1.gl.clear(mask);
		_this1.gl.bindFramebuffer(36160,_this1.writeFrameBufferObject);
		_this1.gl.viewport(0,0,_this1.width,_this1.height);
		_this1.gl.clearColor(0,0,0,1);
		_this1.gl.clear(mask);
		var _this2 = _this.pressureRenderTarget;
		var mask1 = 16384;
		_this2.gl.bindFramebuffer(36160,_this2.readFrameBufferObject);
		_this2.gl.viewport(0,0,_this2.width,_this2.height);
		_this2.gl.clearColor(0,0,0,1);
		_this2.gl.clear(mask1);
		_this2.gl.bindFramebuffer(36160,_this2.writeFrameBufferObject);
		_this2.gl.viewport(0,0,_this2.width,_this2.height);
		_this2.gl.clearColor(0,0,0,1);
		_this2.gl.clear(mask1);
		var _this3 = _this.surfaceRenderTarget;
		var mask2 = 16384;
		_this3.gl.bindFramebuffer(36160,_this3.readFrameBufferObject);
		_this3.gl.viewport(0,0,_this3.width,_this3.height);
		_this3.gl.clearColor(0,0,0,1);
		_this3.gl.clear(mask2);
		_this3.gl.bindFramebuffer(36160,_this3.writeFrameBufferObject);
		_this3.gl.viewport(0,0,_this3.width,_this3.height);
		_this3.gl.clearColor(0,0,0,1);
		_this3.gl.clear(mask2);
		if(this.particles != null) {
			var _this4 = this.particles;
			var shader = _this4.inititalConditionsShader;
			var target = _this4.particleData;
			_this4.gl.viewport(0,0,target.width,target.height);
			_this4.gl.bindFramebuffer(36160,target.writeFrameBufferObject);
			_this4.gl.bindBuffer(34962,_this4.screenTriangle);
			if(shader._active) {
				var _g = 0;
				var _g1 = shader._uniforms;
				while(_g < _g1.length) {
					var u = _g1[_g];
					++_g;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g2 = 0;
				var _g11 = shader._attributes.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var att = shader._attributes[i];
					var location = att.location;
					if(location != -1) {
						shader.gl.enableVertexAttribArray(location);
						shader.gl.vertexAttribPointer(location,att.itemCount,att.type,false,shader._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!shader._ready) {
					shader.create();
				}
				shader.gl.useProgram(shader._prog);
				var _g3 = 0;
				var _g12 = shader._uniforms;
				while(_g3 < _g12.length) {
					var u1 = _g12[_g3];
					++_g3;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g4 = 0;
				var _g13 = shader._attributes.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var att1 = shader._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						shader.gl.enableVertexAttribArray(location1);
						shader.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,shader._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				shader._active = true;
			}
			_this4.gl.drawArrays(4,0,3);
			shader.deactivate();
			target.tmpFBO = target.writeFrameBufferObject;
			target.writeFrameBufferObject = target.readFrameBufferObject;
			target.readFrameBufferObject = target.tmpFBO;
			target.tmpTex = target.writeToTexture;
			target.writeToTexture = target.readFromTexture;
			target.readFromTexture = target.tmpTex;
		}
	}
	,pixelToClipSpaceX: function(x) {
		return x / this.drawingBufferWidth * 2 - 1;
	}
	,pixelToClipSpaceY: function(y) {
		return (this.drawingBufferHeight - y) / this.drawingBufferHeight * 2 - 1;
	}
	,updateSettings: function(settingsJson) {
		try {
			var obj = JSON.parse(settingsJson);
			var tmp = Object.prototype.hasOwnProperty.call(obj,"version");
			this.settings.setFromDynamic(obj);
		} catch( e ) {
			Console.printFormatted(Console.errorPrefix + ("" + ("Failed to update settings: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e))) + "\n",2);
		}
	}
	,getSettingsJson: function(pretty) {
		if(pretty == null) {
			pretty = false;
		}
		var _this = this.settings;
		return JSON.stringify({ version : _this.version, paused : _this.paused, fluidPhysicsScale : _this.fluidPhysicsScale, timestepMultiplier : _this.timestepMultiplier, surfaceDecayFactor : _this.surfaceDecayFactor, motionDecayFactor : _this.motionDecayFactor, dragCoefficient : _this.dragCoefficient, dragSpeed : _this.dragSpeed, periodicBoundary : _this.periodicBoundary, backgroundMultiplier : _this.backgroundMultiplier, backgroundPalette : _this.backgroundPalette, alphaGradient : _this.alphaGradient, velocityGradient : _this.velocityGradient, dyeGradient : _this.dyeGradient, backgroundColor : _this.backgroundColor, steadyStateColor : _this.steadyStateColor, steadyStateAlpha : _this.steadyStateAlpha, bbColor1 : _this.bbColor1, bbColor2 : _this.bbColor2, bbColor3 : _this.bbColor3, bbColor4 : _this.bbColor4, bbAdditiveFactor : _this.bbAdditiveFactor, gamma : _this.gamma, vignetteOpacity : _this.vignetteOpacity, vignetteMagnitude : _this.vignetteMagnitude, vignetteExponent : _this.vignetteExponent, opticalFlowMirrorX : _this.opticalFlowMirrorX, opticalFlowTemporalSmoothing : _this.opticalFlowTemporalSmoothing, opticalFlowScale : _this.opticalFlowScale, opticalFlowExponent : _this.opticalFlowExponent, opticalFlowBlurKernel : _this.opticalFlowBlurKernel, opticalFlowGamma : _this.opticalFlowGamma, fluidIterations : _this.fluidIterations, fluidScale : _this.fluidScale, simulationScale : _this.simulationScale, powerOf2Fluid : _this.powerOf2Fluid},null,pretty ? "\t" : null);
	}
	,saveSettings: function() {
		this.savedSettings = this.getSettingsJson();
	}
	,restoreSettings: function() {
		if(this.savedSettings != null) {
			this.updateSettings(this.savedSettings);
			this.savedSettings = null;
		}
	}
	,onPointerDown: function(pointerId,type,x,y,buttonState,buttonChange,pressure,radius,angle,altitudeAngle,azimuthAngle,color) {
		var this1 = this.activePointers;
		var v = new Pointer(type,x,y,buttonState,pressure,radius,angle,altitudeAngle,azimuthAngle,color,null,null);
		this1.h[pointerId] = v;
	}
	,onPointerChange: function(pointerId,type,x,y,buttonState,buttonChange,pressure,radius,angle,altitudeAngle,azimuthAngle,color) {
		var pointer = this.activePointers.h[pointerId];
		if(pointer != null) {
			pointer.type = type;
			pointer.x = x;
			pointer.y = y;
			pointer.buttonState = buttonState;
			pointer.pressure = pressure;
			pointer.radius = radius;
			pointer.angle = angle;
			pointer.altitudeAngle = altitudeAngle;
			pointer.azimuthAngle = azimuthAngle;
			pointer.color = color;
		}
	}
	,onPointerUp: function(pointerId,type,x,y,buttonState,buttonChange,pressure,radius,angle,altitudeAngle,azimuthAngle,color) {
		this.activePointers.remove(pointerId);
		this.activePointersLastFrame.remove(pointerId);
	}
	,onKeyUp: function(keyCode) {
		var handled;
		switch(keyCode) {
		case 69:
			var _this = this.settings;
			var newValue = this.settings.opticalFlowScale + 0.2;
			var oldValue = _this.opticalFlowScale;
			_this.opticalFlowScale = newValue;
			if(_this.onChangeOpticalFlowScale != null && oldValue != newValue) {
				_this.onChangeOpticalFlowScale(newValue,oldValue);
				if(_this.onAnyFieldChange != null) {
					_this.onAnyFieldChange("opticalFlowScale",newValue,oldValue);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowScale" + ": <b>" + this.settings.opticalFlowScale + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 70:
			var _this1 = this.settings;
			var newValue1 = this.settings.opticalFlowTemporalSmoothing - 1;
			var oldValue1 = _this1.opticalFlowTemporalSmoothing;
			_this1.opticalFlowTemporalSmoothing = newValue1;
			if(_this1.onChangeOpticalFlowTemporalSmoothing != null && oldValue1 != newValue1) {
				_this1.onChangeOpticalFlowTemporalSmoothing(newValue1,oldValue1);
				if(_this1.onAnyFieldChange != null) {
					_this1.onAnyFieldChange("opticalFlowTemporalSmoothing",newValue1,oldValue1);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowTemporalSmoothing" + ": <b>" + this.settings.opticalFlowTemporalSmoothing + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 71:
			var _this2 = this.settings;
			var newValue2 = this.settings.opticalFlowGamma - 0.1;
			var oldValue2 = _this2.opticalFlowGamma;
			_this2.opticalFlowGamma = newValue2;
			if(_this2.onChangeOpticalFlowGamma != null && oldValue2 != newValue2) {
				_this2.onChangeOpticalFlowGamma(newValue2,oldValue2);
				if(_this2.onAnyFieldChange != null) {
					_this2.onAnyFieldChange("opticalFlowGamma",newValue2,oldValue2);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowGamma" + ": <b>" + this.settings.opticalFlowGamma + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 73:
			var _this3 = this.settings;
			var newValue3 = this.settings.opticalFlowExponent + 0.2;
			var oldValue3 = _this3.opticalFlowExponent;
			_this3.opticalFlowExponent = newValue3;
			if(_this3.onChangeOpticalFlowExponent != null && oldValue3 != newValue3) {
				_this3.onChangeOpticalFlowExponent(newValue3,oldValue3);
				if(_this3.onAnyFieldChange != null) {
					_this3.onAnyFieldChange("opticalFlowExponent",newValue3,oldValue3);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowExponent" + ": <b>" + this.settings.opticalFlowExponent + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 74:
			var _this4 = this.settings;
			var newValue4 = this.settings.opticalFlowExponent - 0.2;
			var oldValue4 = _this4.opticalFlowExponent;
			_this4.opticalFlowExponent = newValue4;
			if(_this4.onChangeOpticalFlowExponent != null && oldValue4 != newValue4) {
				_this4.onChangeOpticalFlowExponent(newValue4,oldValue4);
				if(_this4.onAnyFieldChange != null) {
					_this4.onAnyFieldChange("opticalFlowExponent",newValue4,oldValue4);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowExponent" + ": <b>" + this.settings.opticalFlowExponent + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 75:
			var _this5 = this.settings;
			var newValue5 = this.settings.opticalFlowBlurKernel - 2;
			var oldValue5 = _this5.opticalFlowBlurKernel;
			_this5.opticalFlowBlurKernel = newValue5;
			if(_this5.onChangeOpticalFlowBlurKernel != null && oldValue5 != newValue5) {
				_this5.onChangeOpticalFlowBlurKernel(newValue5,oldValue5);
				if(_this5.onAnyFieldChange != null) {
					_this5.onAnyFieldChange("opticalFlowBlurKernel",newValue5,oldValue5);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowBlurKernel" + ": <b>" + this.settings.opticalFlowBlurKernel + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 76:
			var _this6 = this.settings;
			var newValue6 = this.settings.gamma - 0.1;
			var oldValue6 = _this6.gamma;
			_this6.gamma = newValue6;
			if(_this6.onChangeGamma != null && oldValue6 != newValue6) {
				_this6.onChangeGamma(newValue6,oldValue6);
				if(_this6.onAnyFieldChange != null) {
					_this6.onAnyFieldChange("gamma",newValue6,oldValue6);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.gamma" + ": <b>" + this.settings.gamma + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 79:
			var _this7 = this.settings;
			var newValue7 = this.settings.opticalFlowBlurKernel + 2;
			var oldValue7 = _this7.opticalFlowBlurKernel;
			_this7.opticalFlowBlurKernel = newValue7;
			if(_this7.onChangeOpticalFlowBlurKernel != null && oldValue7 != newValue7) {
				_this7.onChangeOpticalFlowBlurKernel(newValue7,oldValue7);
				if(_this7.onAnyFieldChange != null) {
					_this7.onAnyFieldChange("opticalFlowBlurKernel",newValue7,oldValue7);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowBlurKernel" + ": <b>" + this.settings.opticalFlowBlurKernel + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 80:
			var _this8 = this.settings;
			var newValue8 = this.settings.gamma + 0.1;
			var oldValue8 = _this8.gamma;
			_this8.gamma = newValue8;
			if(_this8.onChangeGamma != null && oldValue8 != newValue8) {
				_this8.onChangeGamma(newValue8,oldValue8);
				if(_this8.onAnyFieldChange != null) {
					_this8.onAnyFieldChange("gamma",newValue8,oldValue8);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.gamma" + ": <b>" + this.settings.gamma + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 82:
			this.reset();
			handled = true;
			break;
		case 83:
			var _this9 = this.settings;
			var newValue9 = this.settings.opticalFlowScale - 0.2;
			var oldValue9 = _this9.opticalFlowScale;
			_this9.opticalFlowScale = newValue9;
			if(_this9.onChangeOpticalFlowScale != null && oldValue9 != newValue9) {
				_this9.onChangeOpticalFlowScale(newValue9,oldValue9);
				if(_this9.onAnyFieldChange != null) {
					_this9.onAnyFieldChange("opticalFlowScale",newValue9,oldValue9);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowScale" + ": <b>" + this.settings.opticalFlowScale + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 84:
			var _this10 = this.settings;
			var newValue10 = this.settings.opticalFlowTemporalSmoothing + 1;
			var oldValue10 = _this10.opticalFlowTemporalSmoothing;
			_this10.opticalFlowTemporalSmoothing = newValue10;
			if(_this10.onChangeOpticalFlowTemporalSmoothing != null && oldValue10 != newValue10) {
				_this10.onChangeOpticalFlowTemporalSmoothing(newValue10,oldValue10);
				if(_this10.onAnyFieldChange != null) {
					_this10.onAnyFieldChange("opticalFlowTemporalSmoothing",newValue10,oldValue10);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowTemporalSmoothing" + ": <b>" + this.settings.opticalFlowTemporalSmoothing + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 86:
			this.showDebugTextures = !this.showDebugTextures;
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("showDebugTextures" + ": <b>" + Std.string(this.showDebugTextures) + "</b>"))) + "\n",0);
			handled = true;
			break;
		case 89:
			var _this11 = this.settings;
			var newValue11 = this.settings.opticalFlowGamma + 0.1;
			var oldValue11 = _this11.opticalFlowGamma;
			_this11.opticalFlowGamma = newValue11;
			if(_this11.onChangeOpticalFlowGamma != null && oldValue11 != newValue11) {
				_this11.onChangeOpticalFlowGamma(newValue11,oldValue11);
				if(_this11.onAnyFieldChange != null) {
					_this11.onAnyFieldChange("opticalFlowGamma",newValue11,oldValue11);
				}
			}
			Console.printFormatted(Console.logPrefix + ("" + ("" + ("settings.opticalFlowGamma" + ": <b>" + this.settings.opticalFlowGamma + "</b>"))) + "\n",0);
			handled = true;
			break;
		default:
			handled = false;
		}
		return handled;
	}
	,setGravity: function(x,y) {
		this.updateForceShader.gravity.data[0] = x;
		this.updateForceShader.gravity.data[1] = y;
		this.updateForceShader.gravity.dirty = true;
	}
	,releaseGPUMemory: function() {
		if(this.fluid != null) {
			this.fluid.releaseGPUMemory();
		}
		if(this.particles != null) {
			this.particles.releaseGPUMemory();
		}
		if(this.opticalFlow != null) {
			this.opticalFlow.releaseGPUMemory();
		}
		if(this.bloomFilter != null) {
			this.bloomFilter.releaseGPUMemory();
		}
		if(this.screenTextureShader != null) {
			this.screenTextureShader.destroy();
		}
		if(this.renderParticlesShader != null) {
			this.renderParticlesShader.destroy();
		}
		if(this.updateSurfaceShader != null) {
			this.updateSurfaceShader.destroy();
		}
		if(this.updateForceShader != null) {
			this.updateForceShader.destroy();
		}
		if(this.renderFluidShader != null) {
			this.renderFluidShader.destroy();
		}
		if(this.offscreenTarget != null) {
			var _this = this.offscreenTarget;
			_this.gl.deleteFramebuffer(_this.frameBufferObject);
			_this.gl.deleteTexture(_this.texture.native);
		}
		SharedGPUResources.releaseGPUMemory(this.gl);
	}
	,__class__: FluidComponent
};
var Pointer = function(type,x,y,buttonState,pressure,radius,angle,altitudeAngle,azimuthAngle,color,overrideVelocityX,overrideVelocityY) {
	this.overrideVelocityY = null;
	this.overrideVelocityX = null;
	this.color = null;
	this.type = type;
	this.x = x;
	this.y = y;
	this.buttonState = buttonState;
	this.pressure = pressure;
	this.radius = radius;
	this.angle = angle;
	this.altitudeAngle = altitudeAngle;
	this.azimuthAngle = azimuthAngle;
	if(color != null) {
		this.color = color;
	}
	if(overrideVelocityX != null) {
		this.overrideVelocityX = overrideVelocityX;
	}
	if(overrideVelocityY != null) {
		this.overrideVelocityY = overrideVelocityY;
	}
};
Pointer.__name__ = true;
Pointer.prototype = {
	__class__: Pointer
};
var shaderblox_ShaderBase = function(gl) {
	this._aStride = 0;
	this._textures = [];
	this._attributes = [];
	this._uniforms = [];
	this.gl = gl;
	this._name = ("" + Std.string(js_Boot.getClass(this))).split(".").pop();
	this.initSources();
	this.createProperties();
};
shaderblox_ShaderBase.__name__ = true;
shaderblox_ShaderBase.prototype = {
	initSources: function() {
	}
	,createProperties: function() {
	}
	,create: function() {
		this.compile(this._vertSource,this._fragSource);
		this._ready = true;
	}
	,destroy: function() {
		this.gl.deleteShader(this._vert);
		this.gl.deleteShader(this._frag);
		this.gl.deleteProgram(this._prog);
		this._prog = null;
		this._vert = null;
		this._frag = null;
		this._ready = false;
	}
	,compile: function(vertSource,fragSource) {
		var vertexShader = this.gl.createShader(35633);
		this.gl.shaderSource(vertexShader,vertSource);
		this.gl.compileShader(vertexShader);
		if(!this.gl.getShaderParameter(vertexShader,35713)) {
			haxe_Log.trace("Error compiling vertex shader: " + this.gl.getShaderInfoLog(vertexShader),{ fileName : "lib/shaderblox/shaderblox/ShaderBase.hx", lineNumber : 73, className : "shaderblox.ShaderBase", methodName : "compile"});
			haxe_Log.trace("\n" + vertSource,{ fileName : "lib/shaderblox/shaderblox/ShaderBase.hx", lineNumber : 74, className : "shaderblox.ShaderBase", methodName : "compile"});
			throw new js__$Boot_HaxeError("Error compiling vertex shader");
		}
		var fragmentShader = this.gl.createShader(35632);
		this.gl.shaderSource(fragmentShader,fragSource);
		this.gl.compileShader(fragmentShader);
		if(!this.gl.getShaderParameter(fragmentShader,35713)) {
			haxe_Log.trace("Error compiling fragment shader: " + this.gl.getShaderInfoLog(fragmentShader) + "\n",{ fileName : "lib/shaderblox/shaderblox/ShaderBase.hx", lineNumber : 83, className : "shaderblox.ShaderBase", methodName : "compile"});
			var lines = fragSource.split("\n");
			var i = 0;
			var _g = 0;
			while(_g < lines.length) {
				var l = lines[_g];
				++_g;
				haxe_Log.trace(i++ + " - " + l,{ fileName : "lib/shaderblox/shaderblox/ShaderBase.hx", lineNumber : 87, className : "shaderblox.ShaderBase", methodName : "compile"});
			}
			throw new js__$Boot_HaxeError("Error compiling fragment shader");
		}
		var shaderProgram = this.gl.createProgram();
		this.gl.attachShader(shaderProgram,vertexShader);
		this.gl.attachShader(shaderProgram,fragmentShader);
		this.gl.linkProgram(shaderProgram);
		if(!this.gl.getProgramParameter(shaderProgram,35714)) {
			throw new js__$Boot_HaxeError("Unable to initialize the shader program.\n" + this.gl.getProgramInfoLog(shaderProgram));
		}
		var numUniforms = this.gl.getProgramParameter(shaderProgram,35718);
		var uniformLocations = new haxe_ds_StringMap();
		while(numUniforms-- > 0) {
			var uInfo = this.gl.getActiveUniform(shaderProgram,numUniforms);
			var loc = this.gl.getUniformLocation(shaderProgram,uInfo.name);
			var k = uInfo.name;
			if(__map_reserved[k] != null) {
				uniformLocations.setReserved(k,loc);
			} else {
				uniformLocations.h[k] = loc;
			}
		}
		var numAttributes = this.gl.getProgramParameter(shaderProgram,35721);
		var attributeLocations = new haxe_ds_StringMap();
		while(numAttributes-- > 0) {
			var aInfo = this.gl.getActiveAttrib(shaderProgram,numAttributes);
			var loc1 = this.gl.getAttribLocation(shaderProgram,aInfo.name);
			var k1 = aInfo.name;
			if(__map_reserved[k1] != null) {
				attributeLocations.setReserved(k1,loc1);
			} else {
				attributeLocations.h[k1] = loc1;
			}
		}
		this._vert = vertexShader;
		this._frag = fragmentShader;
		this._prog = shaderProgram;
		var count = this._uniforms.length;
		var removeList = [];
		this._numTextures = 0;
		this._textures = [];
		var _g1 = 0;
		var _g11 = this._uniforms;
		while(_g1 < _g11.length) {
			var u = _g11[_g1];
			++_g1;
			var key = u.name;
			var loc2 = __map_reserved[key] != null ? uniformLocations.getReserved(key) : uniformLocations.h[key];
			if(loc2 == null) {
				var key1 = u.name + "[0]";
				loc2 = __map_reserved[key1] != null ? uniformLocations.getReserved(key1) : uniformLocations.h[key1];
			}
			if(((u) instanceof shaderblox_uniforms_UTexture)) {
				var t = u;
				t.samplerIndex = this._numTextures++;
				this._textures[t.samplerIndex] = t;
			}
			if(loc2 != null) {
				u.location = loc2;
			} else {
				removeList.push(u);
			}
		}
		while(removeList.length > 0) {
			var remove = removeList.pop();
			HxOverrides.remove(this._uniforms,remove);
		}
		var _g2 = 0;
		var _g3 = this._attributes;
		while(_g2 < _g3.length) {
			var a = _g3[_g2];
			++_g2;
			var key2 = a.name;
			var loc3 = __map_reserved[key2] != null ? attributeLocations.getReserved(key2) : attributeLocations.h[key2];
			a.location = loc3 == null ? -1 : loc3;
		}
	}
	,deactivate: function() {
		if(!this._active) {
			return;
		}
		this._active = false;
		this.disableAttributes();
	}
	,disableAttributes: function() {
		var _g = 0;
		var _g1 = this._attributes.length;
		while(_g < _g1) {
			var i = _g++;
			var idx = this._attributes[i].location;
			if(idx == -1) {
				continue;
			}
			this.gl.disableVertexAttribArray(idx);
		}
	}
	,toString: function() {
		return "[Shader(" + this._name + ", attributes:" + this._attributes.length + ", uniforms:" + this._uniforms.length + ")]";
	}
	,__class__: shaderblox_ShaderBase
};
var ScreenTexture = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
ScreenTexture.__name__ = true;
ScreenTexture.__super__ = shaderblox_ShaderBase;
ScreenTexture.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance1;
		this._attributes.push(instance1);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\nvarying vec2 texelCoord;\n\nvoid main() {\n\ttexelCoord = vertexPosition;\n\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D texture;\nvarying vec2 texelCoord;\n\nvoid main(void){\n\tgl_FragColor = abs(texture2D(texture, texelCoord));\n}\n";
	}
	,__class__: ScreenTexture
});
var RenderParticles = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
RenderParticles.__name__ = true;
RenderParticles.__super__ = shaderblox_ShaderBase;
RenderParticles.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"particleData",null,false);
		this.particleData = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_attributes_FloatAttribute("particleUV",0,2);
		this.particleUV = instance1;
		this._attributes.push(instance1);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D particleData;\n\tattribute vec2 particleUV;\n\tvarying vec4 color;\n\t\n\tvoid main() {\n\t\tvec2 p = texture2D(particleData, particleUV).xy;\n\t\tvec2 v = texture2D(particleData, particleUV).zw;\n\t\tgl_PointSize = 1.0;\n\t\tgl_Position = vec4(p, 0.0, 1.0);\n\t\tcolor = vec4(1.0, 1.0, 1.0, 1.0);\n\t}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec4 color;\n\tvoid main() {\n\t\tgl_FragColor = vec4(color);\n\t}\n";
	}
	,__class__: RenderParticles
});
var ColorParticleMotion = function(gl) {
	RenderParticles.call(this,gl);
};
ColorParticleMotion.__name__ = true;
ColorParticleMotion.__super__ = RenderParticles;
ColorParticleMotion.prototype = $extend(RenderParticles.prototype,{
	createProperties: function() {
		RenderParticles.prototype.createProperties.call(this);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D particleData;\n\tattribute vec2 particleUV;\n\tvarying vec4 color;\n\t\n\n\nvoid main(){\n\t\tvec2 p = texture2D(particleData, particleUV).xy;\n\t\tvec2 v = texture2D(particleData, particleUV).zw;\n\t\tgl_PointSize = 3.0;\n\t\tgl_Position = vec4(p, 0.0, 1.0);\n\t\tfloat speed = length(v);\n\t\tfloat x = clamp(speed * 4.0, 0., 1.);\n\t\tcolor.rgb = (\n\t\t\t\tmix(vec3(40.4, 0.0, 35.0) / 300.0, vec3(0.2, 47.8, 100) / 100.0, x)\n\t\t\t\t+ (vec3(63.1, 92.5, 100) / 100.) * x*x*x * .1\n\t\t) + vec3(0.5);\n\t\tcolor.a = 1.0;\n\t}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec4 color;\n\tvoid main() {\n\t\tgl_FragColor = vec4(color);\n\t}\n\n\n";
	}
	,__class__: ColorParticleMotion
});
var FluidBase = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
FluidBase.__name__ = true;
FluidBase.__super__ = shaderblox_ShaderBase;
FluidBase.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UVec2(this.gl,"invResolution",null);
		this.invResolution = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"invAspectRatio",null);
		this.invAspectRatio = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UBool(this.gl,"velocityBoundaryEnabled",null);
		this.velocityBoundaryEnabled = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance3;
		this._attributes.push(instance3);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n";
	}
	,__class__: FluidBase
});
var UpdateSurface = function(gl) {
	FluidBase.call(this,gl);
};
UpdateSurface.__name__ = true;
UpdateSurface.__super__ = FluidBase;
UpdateSurface.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"surface",null,false);
		this.surface = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"dt",null);
		this.dt = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"dx",null);
		this.dx = instance2;
		this._uniforms.push(instance2);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D surface;\n\tuniform float dt;\n\tuniform float dx;\n\tvarying vec2 texelCoord;\n\tvarying vec2 p;\n";
	}
	,__class__: UpdateSurface
});
var UpdateSurfaceShader = function(gl) {
	UpdateSurface.call(this,gl);
};
UpdateSurfaceShader.__name__ = true;
UpdateSurfaceShader.__super__ = UpdateSurface;
UpdateSurfaceShader.prototype = $extend(UpdateSurface.prototype,{
	createProperties: function() {
		UpdateSurface.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UFloat(this.gl,"decayFactor",null);
		this.decayFactor = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"time_s",null);
		this.time_s = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UVec4(this.gl,"steadyStateColor",null);
		this.steadyStateColor = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_uniforms_UVec3(this.gl,"bbColor1",null);
		this.bbColor1 = instance3;
		this._uniforms.push(instance3);
		var instance4 = new shaderblox_uniforms_UVec3(this.gl,"bbColor2",null);
		this.bbColor2 = instance4;
		this._uniforms.push(instance4);
		var instance5 = new shaderblox_uniforms_UVec3(this.gl,"bbColor3",null);
		this.bbColor3 = instance5;
		this._uniforms.push(instance5);
		var instance6 = new shaderblox_uniforms_UVec3(this.gl,"bbColor4",null);
		this.bbColor4 = instance6;
		this._uniforms.push(instance6);
		var instance7 = new shaderblox_uniforms_UFloat(this.gl,"bbAdditiveFactor",null);
		this.bbAdditiveFactor = instance7;
		this._uniforms.push(instance7);
		var instance8 = new shaderblox_uniforms_UVec4Array(this.gl,"pointerPositions",null,10);
		this.pointerPositions = instance8;
		this._uniforms.push(instance8);
		var instance9 = new shaderblox_uniforms_UVec2Array(this.gl,"pointerData",null,10);
		this.pointerData = instance9;
		this._uniforms.push(instance9);
		var instance10 = new shaderblox_uniforms_UVec4Array(this.gl,"pointerColor",null,10);
		this.pointerColor = instance10;
		this._uniforms.push(instance10);
		var instance11 = new shaderblox_uniforms_UInt(this.gl,"activePointerCount",null);
		this.activePointerCount = instance11;
		this._uniforms.push(instance11);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D surface;\n\tuniform float dt;\n\tuniform float dx;\n\tvarying vec2 texelCoord;\n\tvarying vec2 p;\n\n\nfloat distanceToSegment(vec2 a, vec2 b, vec2 p, out float fp){\n\tvec2 d = p - a;\n\tvec2 x = b - a;\n\n\tfp = 0.0; \n\tfloat lx = length(x);\n\t\n\tif(lx <= 0.0001) return length(d);\n\n\tfloat projection = dot(d, x / lx); \n\n\tfp = projection / lx;\n\n\tif(projection < 0.0)            return length(d);\n\telse if(projection > length(x)) return length(p - b);\n\treturn sqrt(abs(dot(d,d) - projection*projection));\n}\n\nfloat distanceToSegment(vec2 a, vec2 b, vec2 p){\n\tfloat fp;\n\treturn distanceToSegment(a, b, p, fp);\n}\n\tuniform float decayFactor;\n\tuniform float time_s;\n\tuniform vec4 steadyStateColor;\n\tuniform vec3 bbColor1;\n\tuniform vec3 bbColor2;\n\tuniform vec3 bbColor3;\n\tuniform vec3 bbColor4;\n\tuniform float bbAdditiveFactor;\n\t\n\tuniform vec4 pointerPositions[10];\n\t\n\tuniform vec2 pointerData[10];\n\tuniform vec4 pointerColor[10];\n\tuniform int activePointerCount;\n\tvec3 TurboColormap(in float x) {\n\t\tconst vec4 kRedVec4 = vec4(-0.05195877, 5.18000081, -30.94853351, 81.96403246);\n\t\tconst vec4 kGreenVec4 = vec4(0.16207513, 0.17712472, 15.24091500, -36.50657960);\n\t\tconst vec4 kBlueVec4 = vec4(0.55305649, 3.00913185, -5.46192616, -11.11819092);\n\t\tconst vec2 kRedVec2 = vec2(-86.53476570, 30.23299484);\n\t\tconst vec2 kGreenVec2 = vec2(25.95549545, -5.02738237);\n\t\tconst vec2 kBlueVec2 = vec2(27.81927491, -14.87899417);\n\t\tvec4 v4 = vec4( 1.0, x, x * x, x * x * x);\n\t\tvec2 v2 = v4.zw * v4.z;\n\t\treturn vec3(\n\t\t\t\tdot(v4, kRedVec4)   + dot(v2, kRedVec2),\n\t\t\t\tdot(v4, kGreenVec4) + dot(v2, kGreenVec2),\n\t\t\t\tdot(v4, kBlueVec4)  + dot(v2, kBlueVec2)\n\t\t);\n\t}\n\tvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n\t\treturn a + b*cos( 6.28318*(c*t+d) );\n\t}\n\tvec3 rainbow(float x) {\n\t\treturn pal(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n\t}\n\tvec3 g1(float x) {\n\t\treturn pal(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25));\n\t}\n\tvec3 g2(float x) {\n\t\treturn pal(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\t\t\n\t}\n\t\n\tvec4 blend(vec4 bottom, vec4 top) {\n\t\treturn top + bottom * (1.0 - clamp(top.a, 0., 1.));\n\t}\n\tvec2 rotate(vec2 p, float radians) {\n\t\tfloat c = cos(radians);\n\t\tfloat s = sin(radians);\n\t\treturn vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n\t}\n\tvoid main(){\n\t\t\n\t\tvec4 color = texture2D(surface, texelCoord);\n\t\t\n\t\tfloat t = time_s * 0.224;\n\t\tfloat pScale = 0.544;\n\t\tfloat colScale = 2.192;\n\t\tvec2 q = p * pScale;\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tfloat i = 1.;\n\t\t#define step() q = rotate(q, t * 0.1); q.x += 0.3 / i * sin(i * 3. * q.y + t + cos((t / 120. * i) * i)); q.y += 0.3 / i * sin(i * 3. * q.x + t + sin((t / 200. * i) * i)); i++;\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\tstep();\n\t\t\n\t\tvec4 steadyState = vec4(pow(rainbow((q.x + q.y) / colScale), vec3(1./2.032)), steadyStateColor.a);\n\t\tvec4 dColor = steadyState - color;\n\t\tcolor += dColor * clamp(decayFactor * dt, 0., 1.0);\n\t\t\n\t\tgl_FragColor = color;\n\t}\n";
	}
	,__class__: UpdateSurfaceShader
});
var ApplyForces = function(gl) {
	FluidBase.call(this,gl);
};
ApplyForces.__name__ = true;
ApplyForces.__super__ = FluidBase;
ApplyForces.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"velocity",null,false);
		this.velocity = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"dt",null);
		this.dt = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"dx",null);
		this.dx = instance2;
		this._uniforms.push(instance2);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D velocity;\n\tuniform float dt;\n\tuniform float dx;\n\tvarying vec2 texelCoord;\n\tvarying vec2 p;\n";
	}
	,__class__: ApplyForces
});
var UpdateForceShader = function(gl) {
	ApplyForces.call(this,gl);
};
UpdateForceShader.__name__ = true;
UpdateForceShader.__super__ = ApplyForces;
UpdateForceShader.prototype = $extend(ApplyForces.prototype,{
	createProperties: function() {
		ApplyForces.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"userVelocityTexture",null,false);
		this.userVelocityTexture = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"decayFactor",null);
		this.decayFactor = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"dragCoefficient",null);
		this.dragCoefficient = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_uniforms_UFloat(this.gl,"dragSpeed",null);
		this.dragSpeed = instance3;
		this._uniforms.push(instance3);
		var instance4 = new shaderblox_uniforms_UFloat(this.gl,"time_s",null);
		this.time_s = instance4;
		this._uniforms.push(instance4);
		var instance5 = new shaderblox_uniforms_UVec4Array(this.gl,"pointerPositions",null,10);
		this.pointerPositions = instance5;
		this._uniforms.push(instance5);
		var instance6 = new shaderblox_uniforms_UVec2Array(this.gl,"pointerData",null,10);
		this.pointerData = instance6;
		this._uniforms.push(instance6);
		var instance7 = new shaderblox_uniforms_UInt(this.gl,"activePointerCount",null);
		this.activePointerCount = instance7;
		this._uniforms.push(instance7);
		var instance8 = new shaderblox_uniforms_UFloat(this.gl,"opticalFlowExponent",null);
		this.opticalFlowExponent = instance8;
		this._uniforms.push(instance8);
		var instance9 = new shaderblox_uniforms_UVec2(this.gl,"gravity",null);
		this.gravity = instance9;
		this._uniforms.push(instance9);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n\n\n";
		var _g = [];
		_g.push("\n\t\tif (activePointerCount > " + 0 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 0 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 0 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 0 + "].x;\n\t\t\tfloat pressure = pointerData[" + 0 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 1 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 1 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 1 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 1 + "].x;\n\t\t\tfloat pressure = pointerData[" + 1 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 2 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 2 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 2 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 2 + "].x;\n\t\t\tfloat pressure = pointerData[" + 2 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 3 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 3 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 3 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 3 + "].x;\n\t\t\tfloat pressure = pointerData[" + 3 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 4 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 4 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 4 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 4 + "].x;\n\t\t\tfloat pressure = pointerData[" + 4 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 5 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 5 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 5 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 5 + "].x;\n\t\t\tfloat pressure = pointerData[" + 5 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 6 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 6 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 6 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 6 + "].x;\n\t\t\tfloat pressure = pointerData[" + 6 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 7 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 7 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 7 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 7 + "].x;\n\t\t\tfloat pressure = pointerData[" + 7 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 8 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 8 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 8 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 8 + "].x;\n\t\t\tfloat pressure = pointerData[" + 8 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		_g.push("\n\t\tif (activePointerCount > " + 9 + ") {\n\t\t\tvec2 pointer = pointerPositions[" + 9 + "].xy;\n\t\t\tvec2 velocity = pointerPositions[" + 9 + "].zw;\n\t\t\tvec2 lastFramePointer = pointer - velocity * dt;\n\n\t\t\tfloat radius = pointerData[" + 9 + "].x;\n\t\t\tfloat pressure = pointerData[" + 9 + "].y;\n\n\t\t\tfloat speed = length(velocity);\n\n\t\t\tfloat fp; // fractional projection\n\t\t\tfloat dist = distanceToSegment(pointer, lastFramePointer, p, fp);\n\n\t\t\tfloat taperFactor = 0.6;// 1 => 0 at lastMouse, 0 => no tapering\n\t\t\tfloat projectedFraction = 1.0 - clamp(fp, 0.0, 1.0)*taperFactor;\n\n\t\t\tfloat R = radius + pressure * pressure * pressure * 0.05;\n\n\t\t\tfloat m = exp(-dist/R) * dragCoefficient; // drag coefficient\n\t\t\tm *= projectedFraction * projectedFraction;\n\n\t\t\tvec2 targetVelocity = velocity * dx * dragSpeed * dt * 60.;\n\t\t\tv += (targetVelocity - v) * m * m;\n\t\t}");
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D velocity;\n\tuniform float dt;\n\tuniform float dx;\n\tvarying vec2 texelCoord;\n\tvarying vec2 p;\n\n\nfloat distanceToSegment(vec2 a, vec2 b, vec2 p, out float fp){\n\tvec2 d = p - a;\n\tvec2 x = b - a;\n\n\tfp = 0.0; \n\tfloat lx = length(x);\n\t\n\tif(lx <= 0.0001) return length(d);\n\n\tfloat projection = dot(d, x / lx); \n\n\tfp = projection / lx;\n\n\tif(projection < 0.0)            return length(d);\n\telse if(projection > length(x)) return length(p - b);\n\treturn sqrt(abs(dot(d,d) - projection*projection));\n}\n\nfloat distanceToSegment(vec2 a, vec2 b, vec2 p){\n\tfloat fp;\n\treturn distanceToSegment(a, b, p, fp);\n}\n\n\n\n\n\n\n\n\n\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  \n                      0.366025403784439,  \n                     -0.577350269189626,  \n                      0.024390243902439); \n\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\n  vec2 i1;\n  \n  \n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  \n  \n  \n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n\n  i = mod289(i); \n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\n\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n\n\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\tuniform sampler2D userVelocityTexture;\n\tuniform float decayFactor;\n\tuniform float dragCoefficient;\n\tuniform float dragSpeed;\n\tuniform float time_s;\n\t\n\tuniform vec4 pointerPositions[10];\n\t\n\tuniform vec2 pointerData[10];\n\tuniform int activePointerCount;\n\tuniform float opticalFlowExponent;\n\tuniform vec2 gravity;\n\tvec2 rotate(vec2 p, float radians) {\n\t\tfloat c = cos(radians);\n\t\tfloat s = sin(radians);\n\t\treturn vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n\t}\n\tvoid main(){\n\t\tvec2 v = texture2D(velocity, texelCoord).xy;\n\t\tvec2 targetVelocity = gravity;\n\t\tvec2 dv = targetVelocity - v;\n\t\tv += dv * clamp(decayFactor * dt, 0., 1.0);\n\t\t" + _g.join("\n") + "\n\t\t\n\t\t\n\t\tgl_FragColor = vec4(v, 0, 1.);\n\t}\n";
	}
	,__class__: UpdateForceShader
});
var RenderFluidShader = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
RenderFluidShader.__name__ = true;
RenderFluidShader.__super__ = shaderblox_ShaderBase;
RenderFluidShader.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"invGamma",null);
		this.invGamma = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UVec3(this.gl,"backgroundColor",null);
		this.backgroundColor = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance3;
		this._attributes.push(instance3);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\nvarying vec2 texelCoord;\n\nvoid main() {\n\ttexelCoord = vertexPosition;\n\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nconst float gamma = 2.1;\n\nvec3 toLinear(vec3 v){\n    return pow(v,vec3(gamma));\n}\n\nvec4 toLinear(vec4 v){\n    return vec4(toLinear(v.rgb),v.a);\n}\n\nvec3 toGamma(vec3 v){\n    return pow(v,vec3(1./gamma));\n}\n\nvec4 toGamma(vec4 v){\n    return vec4(toGamma(v.rgb),v.a);\n}\n\nuniform sampler2D texture;\nuniform float invGamma;\nuniform vec3 backgroundColor;\nvarying vec2 texelCoord;\nvoid main(void){\n\tvec4 sample = texture2D(texture, texelCoord);\n\t\n\tvec3 color = sample.rgb * sample.a + backgroundColor.rgb * (1. - clamp(sample.a, 0., 1.));\n\tvec3 gammaSpaceRgb = pow(color.rgb, vec3(invGamma));\n\tgl_FragColor = vec4(\n\t\tgammaSpaceRgb,\n\t\t1.0\n\t);\n}\n";
	}
	,__class__: RenderFluidShader
});
var GPUCapabilities = function(gl) {
	this._contextVersion = null;
	this.gl = gl;
};
GPUCapabilities.__name__ = true;
GPUCapabilities.get = function(gl) {
	var _g = 0;
	var _g1 = GPUCapabilities.capsCache;
	while(_g < _g1.length) {
		var cap = _g1[_g];
		++_g;
		if(gl == cap.gl) {
			return cap;
		}
	}
	return new GPUCapabilities(gl);
};
GPUCapabilities.prototype = {
	printReport: function() {
		var contextVersion = this.getContextVersion();
		Console.printFormatted(Console.logPrefix + ("" + ("<b>GPU Capabilities</b>\n\t" + ["contextVersion: <b>" + (contextVersion.es ? "ES " : "") + contextVersion.major + "." + contextVersion.minor + "</b>"].join("\n\t"))) + "\n",0);
	}
	,testWritableColorBuffer: function(params) {
		while(this.gl.getError() != 0) {
		}
		var errors = 0;
		var colorBuffer = Texture.createTexture(this.gl,2,2,params);
		while(this.gl.getError() != 0) ++errors;
		if(errors > 0) {
			return false;
		}
		var framebuffer = this.gl.createFramebuffer();
		this.gl.bindFramebuffer(36160,framebuffer);
		this.gl.framebufferTexture2D(36160,36064,3553,colorBuffer.native,0);
		while(this.gl.getError() != 0) ++errors;
		if(errors > 0) {
			return false;
		}
		var isValid = this.gl.checkFramebufferStatus(36160) == 36053;
		this.gl.deleteTexture(colorBuffer.native);
		this.gl.deleteFramebuffer(framebuffer);
		this.gl.bindTexture(3553,null);
		this.gl.bindFramebuffer(36160,null);
		return isValid;
	}
	,getWritableFloatColorBufferParameters: function(format,dataType,filtering) {
		var contextVersion = this.getContextVersion();
		var channelSteps = [6403,33319,6407,6408];
		var dataTypeSteps = [5131,5126];
		var channelIndex = channelSteps.indexOf(format);
		var floatIndex = dataTypeSteps.indexOf(dataType);
		if(filtering == 9729) {
			this.gl.getExtension("OES_texture_float_linear");
			this.gl.getExtension("OES_texture_half_float_linear");
		}
		if(contextVersion.es && contextVersion.major <= 2) {
			this.gl.getExtension("OES_texture_float");
			this.gl.getExtension("OES_texture_half_float");
			this.gl.getExtension("EXT_color_buffer_half_float");
			format = channelSteps[Math.max(channelIndex,2) | 0];
			while(floatIndex < dataTypeSteps.length) {
				dataType = dataTypeSteps[floatIndex++];
				if(dataType == 5131) {
					dataType = 36193;
				}
				if(this.testWritableColorBuffer(new TextureParams(format,format,dataType,filtering,filtering,33071,33071))) {
					return { format : format, internalFormat : format, dataType : dataType, filtering : filtering};
				}
			}
		} else {
			this.gl.getExtension("EXT_color_buffer_float");
			var internalFormatMap16F_h = { };
			internalFormatMap16F_h[6403] = 33325;
			internalFormatMap16F_h[33319] = 33327;
			internalFormatMap16F_h[6407] = 34843;
			internalFormatMap16F_h[6408] = 34842;
			var internalFormatMap32F_h = { };
			internalFormatMap32F_h[6403] = 33326;
			internalFormatMap32F_h[33319] = 33328;
			internalFormatMap32F_h[6407] = 34837;
			internalFormatMap32F_h[6408] = 34836;
			while(floatIndex < dataTypeSteps.length) {
				dataType = dataTypeSteps[floatIndex++];
				while(channelIndex < channelSteps.length) {
					format = channelSteps[channelIndex++];
					var internalFormat;
					switch(dataType) {
					case 5126:
						internalFormat = internalFormatMap32F_h[format];
						break;
					case 5131:
						internalFormat = internalFormatMap16F_h[format];
						break;
					default:
						internalFormat = internalFormatMap32F_h[format];
					}
					if(this.testWritableColorBuffer(new TextureParams(format,internalFormat,dataType,filtering,filtering,33071,33071))) {
						return { format : format, internalFormat : internalFormat, dataType : dataType, filtering : filtering};
					}
				}
			}
		}
		return null;
	}
	,getContextVersion: function() {
		if(this._contextVersion == null) {
			var versionString = this.gl.getParameter(7938);
			var pattern = new EReg("((OpenGL ES|WebGL)\\s*)?(\\d+)\\.(\\d+)","ig");
			if(pattern.match(versionString)) {
				var prefix = pattern.matched(2);
				var isWebGL = prefix.toLowerCase() == "webgl";
				var isES = prefix != null;
				var major = Std.parseInt(pattern.matched(3)) + (isWebGL ? 1 : 0);
				var minor = Std.parseInt(pattern.matched(4));
				this._contextVersion = { es : isES, major : major, minor : minor};
			} else {
				this._contextVersion = { es : false, major : -1, minor : -1};
			}
		}
		return this._contextVersion;
	}
	,__class__: GPUCapabilities
};
var GPUFluid = function(gl,width,height,simulationScale,physicsScale,solverIterations,powerOf2Surface,applyForcesShader,updateSurfaceShader) {
	this.periodicBoundary = false;
	this.advectShader = new Advect(gl);
	this.divergenceShader = new Divergence(gl);
	this.pressureSolveShader = new PressureSolve(gl);
	this.pressureGradientSubstractShader = new PressureGradientSubstract(gl);
	this.applyForcesShader = applyForcesShader;
	this.updateSurfaceShader = updateSurfaceShader;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.powerOf2Surface = powerOf2Surface;
	this.simulationScale = simulationScale;
	this.solverIterations = solverIterations;
	this.aspectRatio = this.width / this.height;
	this.physicsScale = physicsScale;
	this.updateBaseUniforms();
	this.updateTextureSizes();
	var gpuCapabilities = GPUCapabilities.get(gl);
	var rgbaHalfFloatLinear = gpuCapabilities.getWritableFloatColorBufferParameters(6408,5131,9729);
	var rgHalfFloatLinear = gpuCapabilities.getWritableFloatColorBufferParameters(33319,5131,9729);
	var rHalfFloatLinearNearest = gpuCapabilities.getWritableFloatColorBufferParameters(6403,5131,9728);
	if(rgbaHalfFloatLinear == null) {
		var failure = "The fluid simulation requires renderable floating point textures but these are not available on this device";
		throw new js__$Boot_HaxeError(failure);
	}
	var wrapping = this.periodicBoundary ? 10497 : 33071;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.surfaceRenderTarget = new render_RenderTargetSwappable(gl,this.surfaceWidth,this.surfaceHeight,new TextureParams(rgbaHalfFloatLinear.format,rgbaHalfFloatLinear.internalFormat,rgbaHalfFloatLinear.dataType,9729,9729,wrapping,wrapping));
	this.velocityRenderTarget = new render_RenderTargetSwappable(gl,this.simulationWidth,this.simulationHeight,new TextureParams(rgHalfFloatLinear.format,rgHalfFloatLinear.internalFormat,rgHalfFloatLinear.dataType,9729,9729,wrapping,wrapping));
	this.pressureRenderTarget = new render_RenderTargetSwappable(gl,this.simulationWidth,this.simulationHeight,new TextureParams(rHalfFloatLinearNearest.format,rHalfFloatLinearNearest.internalFormat,rHalfFloatLinearNearest.dataType,9728,9728,wrapping,wrapping));
	this.divergenceRenderTarget = new render_RenderTarget(gl,this.simulationWidth,this.simulationHeight,new TextureParams(rHalfFloatLinearNearest.format,rHalfFloatLinearNearest.internalFormat,rHalfFloatLinearNearest.dataType,9728,9728,wrapping,wrapping));
	this.updateBaseUniforms();
	this.printParameters();
};
GPUFluid.__name__ = true;
GPUFluid.prototype = {
	releaseGPUMemory: function() {
		if(this.velocityRenderTarget != null) {
			var _this = this.velocityRenderTarget;
			_this.gl.deleteFramebuffer(_this.writeFrameBufferObject);
			_this.gl.deleteFramebuffer(_this.readFrameBufferObject);
			_this.gl.deleteTexture(_this.writeToTexture.native);
			_this.gl.deleteTexture(_this.readFromTexture.native);
		}
		if(this.pressureRenderTarget != null) {
			var _this1 = this.pressureRenderTarget;
			_this1.gl.deleteFramebuffer(_this1.writeFrameBufferObject);
			_this1.gl.deleteFramebuffer(_this1.readFrameBufferObject);
			_this1.gl.deleteTexture(_this1.writeToTexture.native);
			_this1.gl.deleteTexture(_this1.readFromTexture.native);
		}
		if(this.divergenceRenderTarget != null) {
			var _this2 = this.divergenceRenderTarget;
			_this2.gl.deleteFramebuffer(_this2.frameBufferObject);
			_this2.gl.deleteTexture(_this2.texture.native);
		}
		if(this.surfaceRenderTarget != null) {
			var _this3 = this.surfaceRenderTarget;
			_this3.gl.deleteFramebuffer(_this3.writeFrameBufferObject);
			_this3.gl.deleteFramebuffer(_this3.readFrameBufferObject);
			_this3.gl.deleteTexture(_this3.writeToTexture.native);
			_this3.gl.deleteTexture(_this3.readFromTexture.native);
		}
		if(this.advectShader != null) {
			this.advectShader.destroy();
		}
		if(this.divergenceShader != null) {
			this.divergenceShader.destroy();
		}
		if(this.pressureSolveShader != null) {
			this.pressureSolveShader.destroy();
		}
		if(this.pressureGradientSubstractShader != null) {
			this.pressureGradientSubstractShader.destroy();
		}
	}
	,step: function(dt) {
		this.gl.viewport(0,0,this.simulationWidth,this.simulationHeight);
		this.gl.bindBuffer(34962,this.screenTriangle);
		var target = this.velocityRenderTarget;
		var _this = this.advectShader.dt;
		_this.dirty = true;
		_this.data = dt;
		var _this1 = this.advectShader.target;
		_this1.dirty = true;
		_this1.data = target.readFromTexture.native;
		var _this2 = this.advectShader.velocity;
		_this2.dirty = true;
		_this2.data = this.velocityRenderTarget.readFromTexture.native;
		var shader = this.advectShader;
		if(shader._active) {
			var _g = 0;
			var _g1 = shader._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = shader._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = shader._attributes[i];
				var location = att.location;
				if(location != -1) {
					shader.gl.enableVertexAttribArray(location);
					shader.gl.vertexAttribPointer(location,att.itemCount,att.type,false,shader._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!shader._ready) {
				shader.create();
			}
			shader.gl.useProgram(shader._prog);
			var _g3 = 0;
			var _g12 = shader._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = shader._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = shader._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					shader.gl.enableVertexAttribArray(location1);
					shader.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,shader._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			shader._active = true;
		}
		target.gl.bindFramebuffer(36160,target.writeFrameBufferObject);
		this.gl.drawArrays(4,0,3);
		shader.deactivate();
		target.tmpFBO = target.writeFrameBufferObject;
		target.writeFrameBufferObject = target.readFrameBufferObject;
		target.readFrameBufferObject = target.tmpFBO;
		target.tmpTex = target.writeToTexture;
		target.writeToTexture = target.readFromTexture;
		target.readFromTexture = target.tmpTex;
		if(this.applyForcesShader != null) {
			var _this3 = this.applyForcesShader.dt;
			_this3.dirty = true;
			_this3.data = dt;
			var _this4 = this.applyForcesShader.velocity;
			_this4.dirty = true;
			_this4.data = this.velocityRenderTarget.readFromTexture.native;
			var shader1 = this.applyForcesShader;
			var target1 = this.velocityRenderTarget;
			if(shader1._active) {
				var _g5 = 0;
				var _g14 = shader1._uniforms;
				while(_g5 < _g14.length) {
					var u2 = _g14[_g5];
					++_g5;
					if(u2.dirty || u2.alwaysDirty) {
						u2.apply();
					}
				}
				var offset2 = 0;
				var _g6 = 0;
				var _g15 = shader1._attributes.length;
				while(_g6 < _g15) {
					var i2 = _g6++;
					var att2 = shader1._attributes[i2];
					var location2 = att2.location;
					if(location2 != -1) {
						shader1.gl.enableVertexAttribArray(location2);
						shader1.gl.vertexAttribPointer(location2,att2.itemCount,att2.type,false,shader1._aStride,offset2);
					}
					offset2 += att2.byteSize;
				}
			} else {
				if(!shader1._ready) {
					shader1.create();
				}
				shader1.gl.useProgram(shader1._prog);
				var _g7 = 0;
				var _g16 = shader1._uniforms;
				while(_g7 < _g16.length) {
					var u3 = _g16[_g7];
					++_g7;
					if(u3.dirty || u3.alwaysDirty) {
						u3.apply();
					}
				}
				var offset3 = 0;
				var _g8 = 0;
				var _g17 = shader1._attributes.length;
				while(_g8 < _g17) {
					var i3 = _g8++;
					var att3 = shader1._attributes[i3];
					var location3 = att3.location;
					if(location3 != -1) {
						shader1.gl.enableVertexAttribArray(location3);
						shader1.gl.vertexAttribPointer(location3,att3.itemCount,att3.type,false,shader1._aStride,offset3);
					}
					offset3 += att3.byteSize;
				}
				shader1._active = true;
			}
			target1.activate();
			this.gl.drawArrays(4,0,3);
			shader1.deactivate();
			var _this5 = this.velocityRenderTarget;
			_this5.tmpFBO = _this5.writeFrameBufferObject;
			_this5.writeFrameBufferObject = _this5.readFrameBufferObject;
			_this5.readFrameBufferObject = _this5.tmpFBO;
			_this5.tmpTex = _this5.writeToTexture;
			_this5.writeToTexture = _this5.readFromTexture;
			_this5.readFromTexture = _this5.tmpTex;
		}
		var _this6 = this.divergenceShader.velocity;
		_this6.dirty = true;
		_this6.data = this.velocityRenderTarget.readFromTexture.native;
		var shader2 = this.divergenceShader;
		var target2 = this.divergenceRenderTarget;
		if(shader2._active) {
			var _g9 = 0;
			var _g18 = shader2._uniforms;
			while(_g9 < _g18.length) {
				var u4 = _g18[_g9];
				++_g9;
				if(u4.dirty || u4.alwaysDirty) {
					u4.apply();
				}
			}
			var offset4 = 0;
			var _g10 = 0;
			var _g19 = shader2._attributes.length;
			while(_g10 < _g19) {
				var i4 = _g10++;
				var att4 = shader2._attributes[i4];
				var location4 = att4.location;
				if(location4 != -1) {
					shader2.gl.enableVertexAttribArray(location4);
					shader2.gl.vertexAttribPointer(location4,att4.itemCount,att4.type,false,shader2._aStride,offset4);
				}
				offset4 += att4.byteSize;
			}
		} else {
			if(!shader2._ready) {
				shader2.create();
			}
			shader2.gl.useProgram(shader2._prog);
			var _g20 = 0;
			var _g110 = shader2._uniforms;
			while(_g20 < _g110.length) {
				var u5 = _g110[_g20];
				++_g20;
				if(u5.dirty || u5.alwaysDirty) {
					u5.apply();
				}
			}
			var offset5 = 0;
			var _g21 = 0;
			var _g111 = shader2._attributes.length;
			while(_g21 < _g111) {
				var i5 = _g21++;
				var att5 = shader2._attributes[i5];
				var location5 = att5.location;
				if(location5 != -1) {
					shader2.gl.enableVertexAttribArray(location5);
					shader2.gl.vertexAttribPointer(location5,att5.itemCount,att5.type,false,shader2._aStride,offset5);
				}
				offset5 += att5.byteSize;
			}
			shader2._active = true;
		}
		target2.activate();
		this.gl.drawArrays(4,0,3);
		shader2.deactivate();
		var _this7 = this.pressureSolveShader.divergence;
		_this7.dirty = true;
		_this7.data = this.divergenceRenderTarget.texture.native;
		var _this8 = this.pressureSolveShader.pressure;
		_this8.dirty = true;
		_this8.data = this.pressureRenderTarget.readFromTexture.native;
		var _this9 = this.pressureSolveShader;
		if(_this9._active) {
			var _g22 = 0;
			var _g112 = _this9._uniforms;
			while(_g22 < _g112.length) {
				var u6 = _g112[_g22];
				++_g22;
				if(u6.dirty || u6.alwaysDirty) {
					u6.apply();
				}
			}
			var offset6 = 0;
			var _g23 = 0;
			var _g113 = _this9._attributes.length;
			while(_g23 < _g113) {
				var i6 = _g23++;
				var att6 = _this9._attributes[i6];
				var location6 = att6.location;
				if(location6 != -1) {
					_this9.gl.enableVertexAttribArray(location6);
					_this9.gl.vertexAttribPointer(location6,att6.itemCount,att6.type,false,_this9._aStride,offset6);
				}
				offset6 += att6.byteSize;
			}
		} else {
			if(!_this9._ready) {
				_this9.create();
			}
			_this9.gl.useProgram(_this9._prog);
			var _g24 = 0;
			var _g114 = _this9._uniforms;
			while(_g24 < _g114.length) {
				var u7 = _g114[_g24];
				++_g24;
				if(u7.dirty || u7.alwaysDirty) {
					u7.apply();
				}
			}
			var offset7 = 0;
			var _g25 = 0;
			var _g115 = _this9._attributes.length;
			while(_g25 < _g115) {
				var i7 = _g25++;
				var att7 = _this9._attributes[i7];
				var location7 = att7.location;
				if(location7 != -1) {
					_this9.gl.enableVertexAttribArray(location7);
					_this9.gl.vertexAttribPointer(location7,att7.itemCount,att7.type,false,_this9._aStride,offset7);
				}
				offset7 += att7.byteSize;
			}
			_this9._active = true;
		}
		var _g26 = 0;
		var _g116 = this.solverIterations;
		while(_g26 < _g116) {
			var i8 = _g26++;
			var _this10 = this.pressureSolveShader.pressure;
			_this10.dirty = true;
			_this10.data = this.pressureRenderTarget.readFromTexture.native;
			var _g27 = 0;
			var _g117 = this.pressureSolveShader._uniforms;
			while(_g27 < _g117.length) {
				var u8 = _g117[_g27];
				++_g27;
				if(u8.dirty || u8.alwaysDirty) {
					u8.apply();
				}
			}
			var _this11 = this.pressureRenderTarget;
			_this11.gl.bindFramebuffer(36160,_this11.writeFrameBufferObject);
			this.gl.drawArrays(4,0,3);
			var _this12 = this.pressureRenderTarget;
			_this12.tmpFBO = _this12.writeFrameBufferObject;
			_this12.writeFrameBufferObject = _this12.readFrameBufferObject;
			_this12.readFrameBufferObject = _this12.tmpFBO;
			_this12.tmpTex = _this12.writeToTexture;
			_this12.writeToTexture = _this12.readFromTexture;
			_this12.readFromTexture = _this12.tmpTex;
		}
		this.pressureSolveShader.deactivate();
		var _this13 = this.pressureGradientSubstractShader.pressure;
		_this13.dirty = true;
		_this13.data = this.pressureRenderTarget.readFromTexture.native;
		var _this14 = this.pressureGradientSubstractShader.velocity;
		_this14.dirty = true;
		_this14.data = this.velocityRenderTarget.readFromTexture.native;
		var shader3 = this.pressureGradientSubstractShader;
		var target3 = this.velocityRenderTarget;
		if(shader3._active) {
			var _g28 = 0;
			var _g118 = shader3._uniforms;
			while(_g28 < _g118.length) {
				var u9 = _g118[_g28];
				++_g28;
				if(u9.dirty || u9.alwaysDirty) {
					u9.apply();
				}
			}
			var offset8 = 0;
			var _g29 = 0;
			var _g119 = shader3._attributes.length;
			while(_g29 < _g119) {
				var i9 = _g29++;
				var att8 = shader3._attributes[i9];
				var location8 = att8.location;
				if(location8 != -1) {
					shader3.gl.enableVertexAttribArray(location8);
					shader3.gl.vertexAttribPointer(location8,att8.itemCount,att8.type,false,shader3._aStride,offset8);
				}
				offset8 += att8.byteSize;
			}
		} else {
			if(!shader3._ready) {
				shader3.create();
			}
			shader3.gl.useProgram(shader3._prog);
			var _g30 = 0;
			var _g120 = shader3._uniforms;
			while(_g30 < _g120.length) {
				var u10 = _g120[_g30];
				++_g30;
				if(u10.dirty || u10.alwaysDirty) {
					u10.apply();
				}
			}
			var offset9 = 0;
			var _g31 = 0;
			var _g121 = shader3._attributes.length;
			while(_g31 < _g121) {
				var i10 = _g31++;
				var att9 = shader3._attributes[i10];
				var location9 = att9.location;
				if(location9 != -1) {
					shader3.gl.enableVertexAttribArray(location9);
					shader3.gl.vertexAttribPointer(location9,att9.itemCount,att9.type,false,shader3._aStride,offset9);
				}
				offset9 += att9.byteSize;
			}
			shader3._active = true;
		}
		target3.activate();
		this.gl.drawArrays(4,0,3);
		shader3.deactivate();
		var _this15 = this.velocityRenderTarget;
		_this15.tmpFBO = _this15.writeFrameBufferObject;
		_this15.writeFrameBufferObject = _this15.readFrameBufferObject;
		_this15.readFrameBufferObject = _this15.tmpFBO;
		_this15.tmpTex = _this15.writeToTexture;
		_this15.writeToTexture = _this15.readFromTexture;
		_this15.readFromTexture = _this15.tmpTex;
		this.gl.viewport(0,0,this.surfaceWidth,this.surfaceHeight);
		if(this.updateSurfaceShader != null) {
			var _this16 = this.updateSurfaceShader.dt;
			_this16.dirty = true;
			_this16.data = dt;
			var _this17 = this.updateSurfaceShader.surface;
			_this17.dirty = true;
			_this17.data = this.surfaceRenderTarget.readFromTexture.native;
			var shader4 = this.updateSurfaceShader;
			var target4 = this.surfaceRenderTarget;
			if(shader4._active) {
				var _g32 = 0;
				var _g122 = shader4._uniforms;
				while(_g32 < _g122.length) {
					var u11 = _g122[_g32];
					++_g32;
					if(u11.dirty || u11.alwaysDirty) {
						u11.apply();
					}
				}
				var offset10 = 0;
				var _g33 = 0;
				var _g123 = shader4._attributes.length;
				while(_g33 < _g123) {
					var i11 = _g33++;
					var att10 = shader4._attributes[i11];
					var location10 = att10.location;
					if(location10 != -1) {
						shader4.gl.enableVertexAttribArray(location10);
						shader4.gl.vertexAttribPointer(location10,att10.itemCount,att10.type,false,shader4._aStride,offset10);
					}
					offset10 += att10.byteSize;
				}
			} else {
				if(!shader4._ready) {
					shader4.create();
				}
				shader4.gl.useProgram(shader4._prog);
				var _g34 = 0;
				var _g124 = shader4._uniforms;
				while(_g34 < _g124.length) {
					var u12 = _g124[_g34];
					++_g34;
					if(u12.dirty || u12.alwaysDirty) {
						u12.apply();
					}
				}
				var offset11 = 0;
				var _g35 = 0;
				var _g125 = shader4._attributes.length;
				while(_g35 < _g125) {
					var i12 = _g35++;
					var att11 = shader4._attributes[i12];
					var location11 = att11.location;
					if(location11 != -1) {
						shader4.gl.enableVertexAttribArray(location11);
						shader4.gl.vertexAttribPointer(location11,att11.itemCount,att11.type,false,shader4._aStride,offset11);
					}
					offset11 += att11.byteSize;
				}
				shader4._active = true;
			}
			target4.activate();
			this.gl.drawArrays(4,0,3);
			shader4.deactivate();
			var _this18 = this.surfaceRenderTarget;
			_this18.tmpFBO = _this18.writeFrameBufferObject;
			_this18.writeFrameBufferObject = _this18.readFrameBufferObject;
			_this18.readFrameBufferObject = _this18.tmpFBO;
			_this18.tmpTex = _this18.writeToTexture;
			_this18.writeToTexture = _this18.readFromTexture;
			_this18.readFromTexture = _this18.tmpTex;
		}
		var target5 = this.surfaceRenderTarget;
		var _this19 = this.advectShader.dt;
		_this19.dirty = true;
		_this19.data = dt;
		var _this20 = this.advectShader.target;
		_this20.dirty = true;
		_this20.data = target5.readFromTexture.native;
		var _this21 = this.advectShader.velocity;
		_this21.dirty = true;
		_this21.data = this.velocityRenderTarget.readFromTexture.native;
		var shader5 = this.advectShader;
		if(shader5._active) {
			var _g36 = 0;
			var _g126 = shader5._uniforms;
			while(_g36 < _g126.length) {
				var u13 = _g126[_g36];
				++_g36;
				if(u13.dirty || u13.alwaysDirty) {
					u13.apply();
				}
			}
			var offset12 = 0;
			var _g37 = 0;
			var _g127 = shader5._attributes.length;
			while(_g37 < _g127) {
				var i13 = _g37++;
				var att12 = shader5._attributes[i13];
				var location12 = att12.location;
				if(location12 != -1) {
					shader5.gl.enableVertexAttribArray(location12);
					shader5.gl.vertexAttribPointer(location12,att12.itemCount,att12.type,false,shader5._aStride,offset12);
				}
				offset12 += att12.byteSize;
			}
		} else {
			if(!shader5._ready) {
				shader5.create();
			}
			shader5.gl.useProgram(shader5._prog);
			var _g38 = 0;
			var _g128 = shader5._uniforms;
			while(_g38 < _g128.length) {
				var u14 = _g128[_g38];
				++_g38;
				if(u14.dirty || u14.alwaysDirty) {
					u14.apply();
				}
			}
			var offset13 = 0;
			var _g39 = 0;
			var _g129 = shader5._attributes.length;
			while(_g39 < _g129) {
				var i14 = _g39++;
				var att13 = shader5._attributes[i14];
				var location13 = att13.location;
				if(location13 != -1) {
					shader5.gl.enableVertexAttribArray(location13);
					shader5.gl.vertexAttribPointer(location13,att13.itemCount,att13.type,false,shader5._aStride,offset13);
				}
				offset13 += att13.byteSize;
			}
			shader5._active = true;
		}
		target5.gl.bindFramebuffer(36160,target5.writeFrameBufferObject);
		this.gl.drawArrays(4,0,3);
		shader5.deactivate();
		target5.tmpFBO = target5.writeFrameBufferObject;
		target5.writeFrameBufferObject = target5.readFrameBufferObject;
		target5.readFrameBufferObject = target5.tmpFBO;
		target5.tmpTex = target5.writeToTexture;
		target5.writeToTexture = target5.readFromTexture;
		target5.readFromTexture = target5.tmpTex;
	}
	,updateTextureSizes: function() {
		var newSurfaceWidth = this.powerOf2Surface ? math_POT.floorPowerOf2(this.width) : this.width;
		var newSurfaceHeight = this.powerOf2Surface ? math_POT.floorPowerOf2(this.height) : this.height;
		var newSimulationWidth = math_POT.floorPowerOf2(newSurfaceWidth * this.simulationScale);
		var newSimulationHeight = math_POT.floorPowerOf2(newSurfaceHeight * this.simulationScale);
		var surfaceSizeChanged = newSurfaceWidth != this.surfaceWidth || newSurfaceHeight != this.surfaceHeight;
		var simulationSizeChanged = newSimulationWidth != this.simulationWidth || newSimulationHeight != this.simulationHeight;
		this.surfaceWidth = newSurfaceWidth;
		this.surfaceHeight = newSurfaceHeight;
		this.simulationWidth = newSimulationWidth;
		this.simulationHeight = newSimulationHeight;
		if(surfaceSizeChanged && this.surfaceRenderTarget != null) {
			this.surfaceRenderTarget.resize(this.surfaceWidth,this.surfaceHeight);
		}
		if(simulationSizeChanged && this.velocityRenderTarget != null) {
			this.velocityRenderTarget.resize(this.simulationWidth,this.simulationHeight);
		}
		if(simulationSizeChanged && this.pressureRenderTarget != null) {
			this.pressureRenderTarget.resize(this.simulationWidth,this.simulationHeight);
		}
		if(simulationSizeChanged && this.divergenceRenderTarget != null) {
			var _this = this.divergenceRenderTarget;
			var width = this.simulationWidth;
			var height = this.simulationHeight;
			var newTexture = _this.createEmptyTexture(width,height);
			_this.gl.bindFramebuffer(36160,_this.frameBufferObject);
			_this.gl.framebufferTexture2D(36160,36064,3553,newTexture.native,0);
			if(_this.texture != null) {
				var resampler = SharedGPUResources.getResampleShader(_this.gl);
				var _this1 = resampler.texture;
				_this1.dirty = true;
				_this1.data = _this.texture.native;
				_this.gl.bindFramebuffer(36160,_this.frameBufferObject);
				_this.gl.viewport(0,0,width,height);
				_this.gl.bindBuffer(34962,SharedGPUResources.getScreenTriangle(_this.gl));
				if(resampler._active) {
					var _g = 0;
					var _g1 = resampler._uniforms;
					while(_g < _g1.length) {
						var u = _g1[_g];
						++_g;
						if(u.dirty || u.alwaysDirty) {
							u.apply();
						}
					}
					var offset = 0;
					var _g2 = 0;
					var _g11 = resampler._attributes.length;
					while(_g2 < _g11) {
						var i = _g2++;
						var att = resampler._attributes[i];
						var location = att.location;
						if(location != -1) {
							resampler.gl.enableVertexAttribArray(location);
							resampler.gl.vertexAttribPointer(location,att.itemCount,att.type,false,resampler._aStride,offset);
						}
						offset += att.byteSize;
					}
				} else {
					if(!resampler._ready) {
						resampler.create();
					}
					resampler.gl.useProgram(resampler._prog);
					var _g3 = 0;
					var _g12 = resampler._uniforms;
					while(_g3 < _g12.length) {
						var u1 = _g12[_g3];
						++_g3;
						if(u1.dirty || u1.alwaysDirty) {
							u1.apply();
						}
					}
					var offset1 = 0;
					var _g4 = 0;
					var _g13 = resampler._attributes.length;
					while(_g4 < _g13) {
						var i1 = _g4++;
						var att1 = resampler._attributes[i1];
						var location1 = att1.location;
						if(location1 != -1) {
							resampler.gl.enableVertexAttribArray(location1);
							resampler.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,resampler._aStride,offset1);
						}
						offset1 += att1.byteSize;
					}
					resampler._active = true;
				}
				_this.gl.drawArrays(4,0,3);
				resampler.deactivate();
				_this.gl.deleteTexture(_this.texture.native);
			} else {
				_this.gl.bindFramebuffer(36160,_this.frameBufferObject);
				_this.gl.viewport(0,0,_this.width,_this.height);
				_this.gl.clearColor(0,0,0,1);
				_this.gl.clear(16384);
			}
			_this.width = width;
			_this.height = height;
			_this.texture = newTexture;
		}
		this.updateBaseUniforms();
	}
	,forEachShader: function(callback) {
		callback(this.applyForcesShader);
		callback(this.updateSurfaceShader);
		callback(this.advectShader);
		callback(this.divergenceShader);
		callback(this.pressureSolveShader);
		callback(this.pressureGradientSubstractShader);
	}
	,setWrapMode: function(mode) {
		this.velocityRenderTarget.updateTextureParameters(new VariableTextureParams(null,null,mode,mode));
		this.pressureRenderTarget.updateTextureParameters(new VariableTextureParams(null,null,mode,mode));
		this.divergenceRenderTarget.updateTextureParameters(new VariableTextureParams(null,null,mode,mode));
		this.surfaceRenderTarget.updateTextureParameters(new VariableTextureParams(null,null,mode,mode));
	}
	,updateBaseUniforms: function() {
		var _gthis = this;
		this.forEachShader(function(shader) {
			var _this = shader.invAspectRatio;
			var data = 1 / _gthis.aspectRatio;
			_this.dirty = true;
			_this.data = data;
			shader.invResolution.data[0] = 1 / _gthis.simulationWidth;
			shader.invResolution.data[1] = 1 / _gthis.simulationHeight;
			shader.invResolution.dirty = true;
			var _this1 = shader.velocityBoundaryEnabled;
			var data1 = !_gthis.periodicBoundary;
			_this1.dirty = true;
			return _this1.data = data1;
		});
		var _this2 = this.advectShader.rdx;
		_this2.dirty = true;
		_this2.data = 1 / this.physicsScale;
		var _this3 = this.divergenceShader.halfrdx;
		_this3.dirty = true;
		_this3.data = 0.5 * (1 / this.physicsScale);
		var _this4 = this.pressureGradientSubstractShader.halfrdx;
		_this4.dirty = true;
		_this4.data = 0.5 * (1 / this.physicsScale);
		var _this5 = this.pressureSolveShader.alpha;
		_this5.dirty = true;
		_this5.data = -this.physicsScale * this.physicsScale;
		var _this6 = this.applyForcesShader.dx;
		_this6.dirty = true;
		_this6.data = this.physicsScale;
		var _this7 = this.updateSurfaceShader.dx;
		_this7.dirty = true;
		_this7.data = this.physicsScale;
	}
	,printParameters: function() {
		Console.printFormatted(Console.logPrefix + ("" + ("<b>GPUFluid Parameters</>\n\t" + ["physicsScale: <b>" + this.physicsScale + "</b>","solverIterations: <b>" + this.solverIterations + "</b>","aspectRatio: <b>" + this.aspectRatio + "</b>","surface size: <b>" + this.surfaceWidth + "</b>x<b>" + this.surfaceHeight + "</b>","simulation size: <b>" + this.simulationWidth + "</b>x<b>" + this.simulationHeight + "</b>","<b>velocity</b>:\n\t\t" + this.formatTextureParameters(this.velocityRenderTarget.textureParameters).join("\n\t\t"),"<b>pressure</b>:\n\t\t" + this.formatTextureParameters(this.pressureRenderTarget.textureParameters).join("\n\t\t"),"<b>divergence</b>:\n\t\t" + this.formatTextureParameters(this.divergenceRenderTarget.textureParameters).join("\n\t\t"),"<b>surface</b>:\n\t\t" + this.formatTextureParameters(this.surfaceRenderTarget.textureParameters).join("\n\t\t")].join("\n\t"))) + "\n",0);
	}
	,formatTextureParameters: function(p) {
		if(p != null) {
			return ["dataType: <b>" + gluon_es2_GLContextDebug.getConstantName(p.dataType) + "</b>","format: <b>" + gluon_es2_GLContextDebug.getConstantName(p.format) + "</b>","internalFormat: <b>" + gluon_es2_GLContextDebug.getConstantName(p.internalFormat) + "</b>","magFilter: <b>" + gluon_es2_GLContextDebug.getConstantName(p.magFilter) + "</b>"];
		} else {
			return ["<red,i>renderTarget.textureParameters was null</>"];
		}
	}
	,__class__: GPUFluid
};
var Advect = function(gl) {
	FluidBase.call(this,gl);
};
Advect.__name__ = true;
Advect.__super__ = FluidBase;
Advect.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"velocity",null,false);
		this.velocity = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"target",null,false);
		this.target = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"dt",null);
		this.dt = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_uniforms_UFloat(this.gl,"rdx",null);
		this.rdx = instance3;
		this._uniforms.push(instance3);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D velocity;\nuniform sampler2D target;\nuniform float dt;\nuniform float rdx; \n\nvarying vec2 texelCoord;\nvarying vec2 p;\n\nvoid main(void){\n  \n  vec2 tracedPos = p - dt * rdx * texture2D(velocity, texelCoord).xy;\n\n  gl_FragColor = texture2D(target, simToTexelSpace(tracedPos));\n}\n";
	}
	,__class__: Advect
});
var Divergence = function(gl) {
	FluidBase.call(this,gl);
};
Divergence.__name__ = true;
Divergence.__super__ = FluidBase;
Divergence.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"velocity",null,false);
		this.velocity = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UFloat(this.gl,"halfrdx",null);
		this.halfrdx = instance1;
		this._uniforms.push(instance1);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D velocity;\t\nuniform float halfrdx;\t\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\nvoid main(void){\r\n\t\n \t\n\tvec2 L = sampleVelocity(velocity, vL);\r\n\tvec2 R = sampleVelocity(velocity, vR);\r\n\tvec2 B = sampleVelocity(velocity, vB);\r\n\tvec2 T = sampleVelocity(velocity, vT);\r\n\r\n\tgl_FragColor = vec4( halfrdx * ((R.x - L.x) + (T.y - B.y)), 0, 0, 1);\r\n}\r\n\n";
	}
	,__class__: Divergence
});
var PressureSolve = function(gl) {
	FluidBase.call(this,gl);
};
PressureSolve.__name__ = true;
PressureSolve.__super__ = FluidBase;
PressureSolve.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"pressure",null,false);
		this.pressure = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"divergence",null,false);
		this.divergence = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"alpha",null);
		this.alpha = instance2;
		this._uniforms.push(instance2);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D pressure;\nuniform sampler2D divergence;\nuniform float alpha;\n\nvarying vec2 texelCoord;\n\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vB;\nvarying vec2 vT;\n\nvoid main(void){\n  \n  \n  float L = samplePressure(pressure, vL);\n  float R = samplePressure(pressure, vR);\n  float B = samplePressure(pressure, vB);\n  float T = samplePressure(pressure, vT);\n\n  float bC = texture2D(divergence, texelCoord).x;\n\n  gl_FragColor = vec4( (L + R + B + T + alpha * bC) * .25, 0, 0, 1 ); \n}\n";
	}
	,__class__: PressureSolve
});
var PressureGradientSubstract = function(gl) {
	FluidBase.call(this,gl);
};
PressureGradientSubstract.__name__ = true;
PressureGradientSubstract.__super__ = FluidBase;
PressureGradientSubstract.prototype = $extend(FluidBase.prototype,{
	createProperties: function() {
		FluidBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"pressure",null,false);
		this.pressure = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"velocity",null,false);
		this.velocity = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"halfrdx",null);
		this.halfrdx = instance2;
		this._uniforms.push(instance2);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\n \r\nattribute vec2 vertexPosition;\r\n\r\nuniform vec2 invResolution;\r\nuniform float invAspectRatio;\r\n\r\nvarying vec2 texelCoord;\r\n\r\n\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\n\r\nvarying vec2 p;\r\n\r\nvoid main() {\r\n\ttexelCoord = vertexPosition;\r\n\t\r\n\tvL = texelCoord - vec2(invResolution.x,0);\r\n\tvR = texelCoord + vec2(invResolution.x,0);\r\n\tvB = texelCoord - vec2(0,invResolution.y);\r\n\tvT = texelCoord + vec2(0,invResolution.y);\r\n\t\r\n\tvec2 clipSpace = 2.0*texelCoord - 1.0;\t\n\t\r\n\tp = vec2(clipSpace.x / invAspectRatio, clipSpace.y);\r\n\r\n\tgl_Position = vec4(clipSpace, 0.0, 1.0 );\t\r\n}\r\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform float invAspectRatio;\nuniform bool velocityBoundaryEnabled;\n\nvec2 clipToSimSpace(vec2 clipSpace){\n    return vec2(clipSpace.x / invAspectRatio, clipSpace.y);\n}\n\nvec2 simToTexelSpace(vec2 simSpace){\n    return vec2(simSpace.x * invAspectRatio + 1.0 , simSpace.y + 1.0)*.5;\n}\n\n\n\n\n\n\n\n\n\n\n\n#define samplePressure(texture, coord) ( texture2D(pressure, coord).x )\n#define outOfBoundsVelocityMultiplier(coord) (velocityBoundaryEnabled ? (step(vec2(0.), coord) * step(coord, vec2(1.)) * 2. - 1. ) : vec2(1.0))\n\n#define sampleVelocity(texture, coord) ( outOfBoundsVelocityMultiplier(coord) * texture2D(velocity, coord).xy )\n\nuniform sampler2D pressure;\r\nuniform sampler2D velocity;\r\nuniform float halfrdx;\r\n\r\nvarying vec2 texelCoord;\r\n\r\nvarying vec2 vL;\r\nvarying vec2 vR;\r\nvarying vec2 vB;\r\nvarying vec2 vT;\r\n\r\nvoid main(void){\r\n  float L = samplePressure(pressure, vL);\r\n  float R = samplePressure(pressure, vR);\r\n  float B = samplePressure(pressure, vB);\r\n  float T = samplePressure(pressure, vT);\r\n\r\n  vec2 v = texture2D(velocity, texelCoord).xy;\r\n\r\n  gl_FragColor = vec4(v - halfrdx*vec2(R-L, T-B), 0, 1);\r\n}\r\n\r\n\n";
	}
	,__class__: PressureGradientSubstract
});
var GPUOpticalFlow = function(gl) {
	this.averageVelocity = new filter_Swappable();
	this.gamma = 2.1;
	this.blurKernel = 64;
	this.mirrorX = true;
	this.temporalSmoothing = 4;
	this.scale = 1;
	this.gl = gl;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.prepareFrame = new PrepareFrame(gl);
	this.currentFrame = new Frame(gl);
	this.lastFrame = new Frame(gl);
	this.opticalFlowShader = SharedGPUResources.getShaderWithKey(gl,"opticalFlow",function(_,_1) {
		return new OpticalFlowGrayShader(gl);
	});
	var rHalfFloat = GPUCapabilities.get(gl).getWritableFloatColorBufferParameters(6403,5131,9729);
	this.frameParams = new TextureParams(rHalfFloat.format,rHalfFloat.internalFormat,rHalfFloat.dataType,rHalfFloat.filtering,rHalfFloat.filtering,33071,33071);
	var rgHalfFloat = GPUCapabilities.get(gl).getWritableFloatColorBufferParameters(33319,5131,9729);
	this.velocityParams = new TextureParams(rgHalfFloat.format,rgHalfFloat.internalFormat,rgHalfFloat.dataType,rgHalfFloat.filtering,rgHalfFloat.filtering,33071,33071);
	var t = this.averageVelocity.get(gl,1,1,this.velocityParams);
	t.gl.bindFramebuffer(36160,t.readFrameBufferObject);
	t.gl.viewport(0,0,t.width,t.height);
	t.gl.clearColor(0,0,0,1);
	t.gl.clear(16384);
	t.gl.bindFramebuffer(36160,t.writeFrameBufferObject);
	t.gl.viewport(0,0,t.width,t.height);
	t.gl.clearColor(0,0,0,1);
	t.gl.clear(16384);
};
GPUOpticalFlow.__name__ = true;
GPUOpticalFlow.prototype = {
	releaseGPUMemory: function() {
		this.currentFrame.releaseGPUMemory();
		this.lastFrame.releaseGPUMemory();
		this.averageVelocity.destroy();
	}
	,__class__: GPUOpticalFlow
};
var Frame = function(gl) {
	this.downsampleCount = 2;
	this.blur = null;
	this.gl = gl;
	this.downsample = new filter_DownsampleHalfChain(gl,this.downsampleCount);
	this.sobelHFilter = new filter_SobelH(gl);
	this.sobelVFilter = new filter_SobelV(gl);
};
Frame.__name__ = true;
Frame.prototype = {
	releaseGPUMemory: function() {
		this.sobelHFilter.releaseGPUMemory();
		this.sobelVFilter.releaseGPUMemory();
		this.downsample.releaseGPUMemory();
		if(this.blur != null) {
			this.blur.releaseGPUMemory();
		}
	}
	,__class__: Frame
};
var OpticalFlowGrayShader = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
OpticalFlowGrayShader.__name__ = true;
OpticalFlowGrayShader.__super__ = shaderblox_ShaderBase;
OpticalFlowGrayShader.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"currFrame",null,false);
		this.currFrame = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"currSobelH",null,false);
		this.currSobelH = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UTexture(this.gl,"currSobelV",null,false);
		this.currSobelV = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_uniforms_UTexture(this.gl,"lastFrame",null,false);
		this.lastFrame = instance3;
		this._uniforms.push(instance3);
		var instance4 = new shaderblox_uniforms_UTexture(this.gl,"lastSobelH",null,false);
		this.lastSobelH = instance4;
		this._uniforms.push(instance4);
		var instance5 = new shaderblox_uniforms_UTexture(this.gl,"lastSobelV",null,false);
		this.lastSobelV = instance5;
		this._uniforms.push(instance5);
		var instance6 = new shaderblox_uniforms_UTexture(this.gl,"averageVeloicty",null,false);
		this.averageVeloicty = instance6;
		this._uniforms.push(instance6);
		var instance7 = new shaderblox_uniforms_UFloat(this.gl,"scale",null);
		this.scale = instance7;
		this._uniforms.push(instance7);
		var instance8 = new shaderblox_uniforms_UFloat(this.gl,"temporalSmoothingAlpha",null);
		this.temporalSmoothingAlpha = instance8;
		this._uniforms.push(instance8);
		var instance9 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance9;
		this._attributes.push(instance9);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\nvarying vec2 texelCoord;\n\nvoid main() {\n\ttexelCoord = vertexPosition;\n\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D currFrame;  \n    uniform sampler2D currSobelH; \n    uniform sampler2D currSobelV; \n    uniform sampler2D lastFrame;  \n    uniform sampler2D lastSobelH; \n    uniform sampler2D lastSobelV; \n    uniform sampler2D averageVeloicty; \n    uniform float scale;\n    uniform float temporalSmoothingAlpha;\n    varying vec2 texelCoord;\n    void main() {\n        vec2 currentAverageVelocity = texture2D(averageVeloicty, texelCoord).xy;\n        \n        float i1 = texture2D(currFrame, texelCoord).r;\n        float i0 = texture2D(lastFrame, texelCoord).r;\n        float dI = i1 - i0;\n        float dx = texture2D(currSobelH, texelCoord).r + texture2D(lastSobelH, texelCoord).r;\n        float dy = texture2D(currSobelV, texelCoord).r + texture2D(lastSobelV, texelCoord).r;\n        float dd = sqrt(dx*dx + dy*dy + 1.0);\n        vec2 flow = -scale * dI * vec2(dx, dy) / dd;\n        \n        \n        \n        vec2 updatedAverageVelocity = temporalSmoothingAlpha * flow + (1.0 - temporalSmoothingAlpha) * currentAverageVelocity;\n        gl_FragColor = vec4(updatedAverageVelocity, 0., 1.);\n    }\n";
	}
	,__class__: OpticalFlowGrayShader
});
var PrepareFrame = function(gl) {
	this.gl = gl;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.shader = SharedGPUResources.getShaderWithKey(gl,"prepareFrame",function(_,_1) {
		return new PrepareFrameShader(gl);
	});
};
PrepareFrame.__name__ = true;
PrepareFrame.prototype = {
	__class__: PrepareFrame
};
var PrepareFrameShader = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
PrepareFrameShader.__name__ = true;
PrepareFrameShader.__super__ = shaderblox_ShaderBase;
PrepareFrameShader.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UVec2(this.gl,"mirror",null);
		this.mirror = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UFloat(this.gl,"gamma",null);
		this.gamma = instance2;
		this._uniforms.push(instance2);
		var instance3 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance3;
		this._attributes.push(instance3);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n    varying vec2 texelCoord;\n    uniform vec2 mirror;\n    void main() {\n        \n        texelCoord = mix(vertexPosition, 1.0 - vertexPosition, mirror);\n        \n        gl_Position = vec4(vertexPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D texture;\n    uniform float gamma;\n    varying vec2 texelCoord;\n    float luminance(vec3 rgb) {\n        \n        const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n        return dot(rgb, W);\n    }\n    void main() {\n        vec3 sample = texture2D(texture, texelCoord).rgb;\n        vec3 linear = pow(sample, vec3(gamma));\n        float lum = luminance(linear);\n        gl_FragColor = vec4(vec3(lum), 1.);\n    }\n";
	}
	,__class__: PrepareFrameShader
});
var GPUParticles = function(gl,count) {
	if(count == null) {
		count = 524288;
	}
	this.gl = gl;
	gl.getExtension("OES_texture_float");
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.inititalConditionsShader = new InitialConditions(gl);
	this.stepParticlesShader = new StepParticles(gl);
	var _this = this.stepParticlesShader.dragCoefficient;
	_this.dirty = true;
	_this.data = 1;
	this.stepParticlesShader.flowScale.data[0] = 1;
	this.stepParticlesShader.flowScale.data[1] = 1;
	this.setCount(count);
	var shader = this.inititalConditionsShader;
	var target = this.particleData;
	this.gl.viewport(0,0,target.width,target.height);
	this.gl.bindFramebuffer(36160,target.writeFrameBufferObject);
	this.gl.bindBuffer(34962,this.screenTriangle);
	if(shader._active) {
		var _g = 0;
		var _g1 = shader._uniforms;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.dirty || u.alwaysDirty) {
				u.apply();
			}
		}
		var offset = 0;
		var _g2 = 0;
		var _g11 = shader._attributes.length;
		while(_g2 < _g11) {
			var i = _g2++;
			var att = shader._attributes[i];
			var location = att.location;
			if(location != -1) {
				shader.gl.enableVertexAttribArray(location);
				shader.gl.vertexAttribPointer(location,att.itemCount,att.type,false,shader._aStride,offset);
			}
			offset += att.byteSize;
		}
	} else {
		if(!shader._ready) {
			shader.create();
		}
		shader.gl.useProgram(shader._prog);
		var _g3 = 0;
		var _g12 = shader._uniforms;
		while(_g3 < _g12.length) {
			var u1 = _g12[_g3];
			++_g3;
			if(u1.dirty || u1.alwaysDirty) {
				u1.apply();
			}
		}
		var offset1 = 0;
		var _g4 = 0;
		var _g13 = shader._attributes.length;
		while(_g4 < _g13) {
			var i1 = _g4++;
			var att1 = shader._attributes[i1];
			var location1 = att1.location;
			if(location1 != -1) {
				shader.gl.enableVertexAttribArray(location1);
				shader.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,shader._aStride,offset1);
			}
			offset1 += att1.byteSize;
		}
		shader._active = true;
	}
	this.gl.drawArrays(4,0,3);
	shader.deactivate();
	target.tmpFBO = target.writeFrameBufferObject;
	target.writeFrameBufferObject = target.readFrameBufferObject;
	target.readFrameBufferObject = target.tmpFBO;
	target.tmpTex = target.writeToTexture;
	target.writeToTexture = target.readFromTexture;
	target.readFromTexture = target.tmpTex;
	this.printParameters();
};
GPUParticles.__name__ = true;
GPUParticles.prototype = {
	releaseGPUMemory: function() {
		if(this.particleData != null) {
			var _this = this.particleData;
			_this.gl.deleteFramebuffer(_this.writeFrameBufferObject);
			_this.gl.deleteFramebuffer(_this.readFrameBufferObject);
			_this.gl.deleteTexture(_this.writeToTexture.native);
			_this.gl.deleteTexture(_this.readFromTexture.native);
		}
		if(this.particleUVs != null) {
			this.gl.deleteBuffer(this.particleUVs);
		}
		if(this.inititalConditionsShader != null) {
			this.inititalConditionsShader.destroy();
		}
		if(this.stepParticlesShader != null) {
			this.stepParticlesShader.destroy();
		}
	}
	,setCount: function(newCount) {
		var dataWidth = Math.ceil(Math.sqrt(newCount));
		var dataHeight = dataWidth;
		var params = GPUCapabilities.get(this.gl).getWritableFloatColorBufferParameters(6408,5131,9728);
		if(params == null) {
			throw new js__$Boot_HaxeError("Particles require renderable floating point textures");
		}
		if(this.particleData != null) {
			this.particleData.resize(dataWidth,dataHeight);
		} else {
			this.particleData = new render_RenderTargetSwappable(this.gl,dataWidth,dataHeight,new TextureParams(params.format,params.internalFormat,params.dataType,9728,9728,33071,33071));
		}
		if(this.particleUVs != null) {
			this.gl.deleteBuffer(this.particleUVs);
		}
		this.particleUVs = this.gl.createBuffer();
		var arrayUVs = [];
		var _g = 0;
		var _g1 = dataWidth;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g11 = dataHeight;
			while(_g2 < _g11) {
				var j = _g2++;
				arrayUVs.push(i / dataWidth);
				arrayUVs.push(j / dataHeight);
			}
		}
		this.gl.bindBuffer(34962,this.particleUVs);
		this.gl.bufferData(34962,new Float32Array(arrayUVs).buffer,35044);
		this.gl.bindBuffer(34962,null);
		return this.count = newCount;
	}
	,printParameters: function() {
		Console.printFormatted(Console.logPrefix + ("" + ("<b>GPUParticles Parameters</>\n\t" + ["dragCoefficient: <b>" + this.stepParticlesShader.dragCoefficient.data + "</b>","flowScaleX: <b>" + this.stepParticlesShader.flowScale.data[0] + "</b>","flowScaleY: <b>" + this.stepParticlesShader.flowScale.data[1] + "</b>","texture size: <b>" + this.particleData.width + "x" + this.particleData.height + "</b>"].join("\n\t"))) + "\n",0);
	}
	,__class__: GPUParticles
};
var PlaneTexture = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
PlaneTexture.__name__ = true;
PlaneTexture.__super__ = shaderblox_ShaderBase;
PlaneTexture.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance;
		this._attributes.push(instance);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n\tvarying vec2 texelCoord;\n\tvoid main() {\n\t\ttexelCoord = vertexPosition;\n\t\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n\t}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec2 texelCoord;\n";
	}
	,__class__: PlaneTexture
});
var InitialConditions = function(gl) {
	PlaneTexture.call(this,gl);
};
InitialConditions.__name__ = true;
InitialConditions.__super__ = PlaneTexture;
InitialConditions.prototype = $extend(PlaneTexture.prototype,{
	createProperties: function() {
		PlaneTexture.prototype.createProperties.call(this);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n\tvarying vec2 texelCoord;\n\tvoid main() {\n\t\ttexelCoord = vertexPosition;\n\t\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n\t}\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec2 texelCoord;\n\nvoid main() {\n\t\tvec2 ip = vec2((texelCoord.x), (texelCoord.y)) * 2.0 - 1.0;\n\t\tvec2 iv = vec2(0,0);\n\t\tgl_FragColor = vec4(ip, iv);\n\t}\n";
	}
	,__class__: InitialConditions
});
var ParticleBase = function(gl) {
	PlaneTexture.call(this,gl);
};
ParticleBase.__name__ = true;
ParticleBase.__super__ = PlaneTexture;
ParticleBase.prototype = $extend(PlaneTexture.prototype,{
	createProperties: function() {
		PlaneTexture.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UFloat(this.gl,"dt",null);
		this.dt = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"particleData",null,false);
		this.particleData = instance1;
		this._uniforms.push(instance1);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n\tvarying vec2 texelCoord;\n\tvoid main() {\n\t\ttexelCoord = vertexPosition;\n\t\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n\t}\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec2 texelCoord;\n\nuniform float dt;\n\tuniform sampler2D particleData;\n";
	}
	,__class__: ParticleBase
});
var StepParticles = function(gl) {
	ParticleBase.call(this,gl);
};
StepParticles.__name__ = true;
StepParticles.__super__ = ParticleBase;
StepParticles.prototype = $extend(ParticleBase.prototype,{
	createProperties: function() {
		ParticleBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UFloat(this.gl,"dragCoefficient",null);
		this.dragCoefficient = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UVec2(this.gl,"flowScale",null);
		this.flowScale = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_uniforms_UTexture(this.gl,"flowVelocityField",null,false);
		this.flowVelocityField = instance2;
		this._uniforms.push(instance2);
		this._aStride += 0;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n\tvarying vec2 texelCoord;\n\tvoid main() {\n\t\ttexelCoord = vertexPosition;\n\t\tgl_Position = vec4(vertexPosition*2.0 - vec2(1.0, 1.0), 0.0, 1.0 );\n\t}\n\n\n\n\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nvarying vec2 texelCoord;\n\nuniform float dt;\n\tuniform sampler2D particleData;\n\nuniform float dragCoefficient;\n\tuniform vec2 flowScale;\n\tuniform sampler2D flowVelocityField;\n\tvoid main() {\n\t\tvec2 p = texture2D(particleData, texelCoord).xy;\n\t\tvec2 v = texture2D(particleData, texelCoord).zw;\n\t\tvec2 vf = texture2D(flowVelocityField, (p+1.)*.5).xy * flowScale;\n\t\tv += (vf - v) * dragCoefficient;\n\t\tp+=dt*v;\n\t\tgl_FragColor = vec4(p, v);\n\t}\n";
	}
	,__class__: StepParticles
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var MainWeb = function() { };
MainWeb.__name__ = true;
MainWeb.main = function() {
	window.addEventListener("load",MainWeb.initialize);
};
MainWeb.initialize = function() {
	MainWeb.webFluid = new WebFluid();
	window.document.body.appendChild(MainWeb.webFluid.canvas);
};
var WebFluid = function() {
	this.paused = false;
	var _gthis = this;
	this.canvas = window.document.createElement("canvas");
	this.canvas.style.display = "block";
	this.canvas.style.touchAction = "none";
	var pixelScale = window.devicePixelRatio != null ? window.devicePixelRatio : 1;
	this.canvas.width = Math.round(window.innerWidth * pixelScale);
	this.canvas.height = Math.round(window.innerHeight * pixelScale);
	this.canvas.style.width = "100%";
	this.canvas.style.height = "100%";
	this.canvas.addEventListener("webglcontextlost",function(e) {
		window.location.reload();
		return;
	});
	this.canvas.addEventListener("webglcontextrestored",function(e1) {
		window.console.log("webglcontextrestored");
		return;
	});
	this.canvas.setAttribute("touch-action","none");
	var forceWebGL2 = new URL(window.location.href).searchParams.get("webgl2") != null;
	var webglContextAttributes = { antialias : false, stencil : false, depth : false, alpha : false, premultipliedAlpha : false, preserveDrawingBuffer : false, powerPreference : "high-performance", desynchronized : true};
	var gl = forceWebGL2 ? this.canvas.getContext("webgl2",webglContextAttributes) : js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,webglContextAttributes);
	this.fluid = new FluidComponent(gl,gl.drawingBufferWidth,gl.drawingBufferHeight);
	window.addEventListener("resize",function() {
		var w = Math.round(window.innerWidth * pixelScale);
		var h = Math.round(window.innerHeight * pixelScale);
		_gthis.canvas.width = w;
		_gthis.canvas.height = h;
		_gthis.fluid.resize(w,h);
		return;
	});
	this.canvas.addEventListener("gesturestart",function(e2) {
		e2.preventDefault();
		e2.stopPropagation();
	},false);
	this.canvas.addEventListener("gesturechange",function(e3) {
		e3.preventDefault();
		e3.stopPropagation();
	},false);
	this.canvas.addEventListener("scroll",function(e4) {
		e4.preventDefault();
		e4.stopPropagation();
	});
	window.addEventListener("keyup",function(e5) {
		return _gthis.fluid.onKeyUp(e5.keyCode);
	});
	var pointerRadiusPx = 50;
	var pointerColor = [0.886,0.072,0.985,1];
	var executePointerMethodFromMouseEvent = function(mouseEvent,pointerMethod) {
		var force = 1.5;
		if(mouseEvent.force != null) {
			force = mouseEvent.force;
		}
		if(mouseEvent.webkitForce != null) {
			force = mouseEvent.webkitForce;
		}
		var pressure = Math.max(force - 1,0);
		pointerMethod(-1,0,mouseEvent.x * pixelScale,mouseEvent.y * pixelScale,mouseEvent.buttons,mouseEvent.button,pressure,pointerRadiusPx * pixelScale,0,0,0,pointerColor);
	};
	var executePointerMethodFromTouchEvent = function(touchEvent,pointerMethod1,preventDefault) {
		if(preventDefault == true) {
			touchEvent.preventDefault();
		}
		var _g = 0;
		var _g1 = touchEvent.changedTouches.length;
		while(_g < _g1) {
			var i = _g++;
			var touch = touchEvent.changedTouches[i];
			pointerMethod1(touch.identifier,1,touch.clientX * pixelScale,touch.clientY * pixelScale,1,0,touch.force,touch.radiusX * pixelScale,touch.rotationAngle,0,0,pointerColor);
		}
	};
	this.canvas.addEventListener("mousedown",function(e6) {
		executePointerMethodFromMouseEvent(e6,($_=_gthis.fluid,$bind($_,$_.onPointerDown)));
		return;
	});
	window.addEventListener("mousemove",function(e7) {
		executePointerMethodFromMouseEvent(e7,($_=_gthis.fluid,$bind($_,$_.onPointerChange)));
		return;
	});
	window.addEventListener("mouseup",function(e8) {
		executePointerMethodFromMouseEvent(e8,($_=_gthis.fluid,$bind($_,$_.onPointerUp)));
		return;
	});
	window.addEventListener("webkitmouseforcechanged",function(e9) {
		executePointerMethodFromMouseEvent(e9,($_=_gthis.fluid,$bind($_,$_.onPointerChange)));
		return;
	});
	var useCapture = true;
	this.canvas.addEventListener("touchstart",function(e10) {
		executePointerMethodFromTouchEvent(e10,($_=_gthis.fluid,$bind($_,$_.onPointerDown)),true);
		return;
	},{ capture : useCapture, passive : false});
	window.addEventListener("touchmove",function(e11) {
		executePointerMethodFromTouchEvent(e11,($_=_gthis.fluid,$bind($_,$_.onPointerChange)),true);
		return;
	},{ capture : useCapture, passive : false});
	window.addEventListener("touchforcechange",function(e12) {
		executePointerMethodFromTouchEvent(e12,($_=_gthis.fluid,$bind($_,$_.onPointerChange)),false);
		return;
	},{ capture : useCapture, passive : true});
	window.addEventListener("touchend",function(e13) {
		executePointerMethodFromTouchEvent(e13,($_=_gthis.fluid,$bind($_,$_.onPointerUp)),false);
		return;
	},{ capture : useCapture, passive : true});
	window.addEventListener("touchcancel",function(e14) {
		executePointerMethodFromTouchEvent(e14,($_=_gthis.fluid,$bind($_,$_.onPointerUp)),false);
		return;
	},{ capture : useCapture, passive : true});
	this.frame(window.performance.now());
};
WebFluid.__name__ = true;
WebFluid.prototype = {
	frame: function(t_ms) {
		if(!this.paused) {
			this.fluid.onFrame(t_ms);
		}
		window.requestAnimationFrame($bind(this,this.frame));
	}
	,__class__: WebFluid
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var Settings = function() {
	this.powerOf2Fluid = true;
	this.simulationScale = 0.125;
	this.fluidScale = 1.0;
	this.fluidIterations = 40;
	this.opticalFlowGamma = 1.0;
	this.opticalFlowBlurKernel = 48;
	this.opticalFlowExponent = 1.4;
	this.opticalFlowScale = 2.5;
	this.opticalFlowTemporalSmoothing = 14;
	this.opticalFlowMirrorX = true;
	this.vignetteExponent = 0.27;
	this.vignetteMagnitude = 258;
	this.vignetteOpacity = 0.0;
	this.gamma = 1.7;
	this.bbAdditiveFactor = 0.5;
	this.bbColor4 = [1.0,1.0,1.0];
	this.bbColor3 = [1.0,1.0,1.0];
	this.bbColor2 = [1.0,1.0,1.0];
	this.bbColor1 = [1.0,1.0,1.0];
	this.steadyStateAlpha = 1.0;
	this.steadyStateColor = [1.0,1.0,1.0];
	this.backgroundColor = [1.0,1.0,1.0];
	this.dyeGradient = { "angle" : 90.0, "stops" : [{ "color" : [0.,0.,0.,1.], "p" : 0.00},{ "color" : [0.,0.,0.,1.], "p" : 0.25},{ "color" : [0.,0.,0.,1.], "p" : 0.50},{ "color" : [0.,0.,0.,1.], "p" : 0.75},{ "color" : [0.,0.,0.,1.], "p" : 1.00}]};
	this.velocityGradient = { "angle" : 90., "stops" : [{ "color" : [0.,0.,0.,1.], "p" : 0},{ "color" : [0.,0.,0.,1.], "p" : 0.25},{ "color" : [0.,0.,0.,1.], "p" : 0.5},{ "color" : [0.,0.,0.,1.], "p" : 0.75},{ "color" : [0.08999999999999997,0.021234374999999996,0.04599,1], "p" : 1}]};
	this.alphaGradient = { "angle" : 90., "stops" : [{ "color" : [0.12156862745098039,0,0.2196078431372549,1], "p" : 0},{ "color" : [0.43137254901960786,0.1607843137254902,0.7803921568627451,1], "p" : 0.25},{ "color" : [0,0.8431372549019608,0.9607843137254902,1], "p" : 0.5},{ "color" : [0.2549019607843137,0.9882352941176471,0.6352941176470588,1], "p" : 0.75},{ "color" : [0.9176470588235294,1,0.9803921568627451,1], "p" : 1}]};
	this.backgroundPalette = { "angle" : 90.0, "stops" : [{ "color" : [0.46468338451452085,0.09939764953547675,0.6248872090623581,1], "p" : 0},{ "color" : [1,0.15376990711712357,0.9096201096033503,1], "p" : 0.210099995136261},{ "color" : [0.15376990711712357,0.9280667188629871,1,1], "p" : 0.6428999900817871},{ "color" : [0.6729639661804218,0.9887256339845741,0.9981306646709802,1], "p" : 0.9327999949455261},{ "color" : [0.6729639661804218,0.9887256339845741,0.9981306646709802,1], "p" : 1}]};
	this.backgroundMultiplier = 0;
	this.periodicBoundary = true;
	this.dragSpeed = 3;
	this.dragCoefficient = .7;
	this.motionDecayFactor = 0.3;
	this.surfaceDecayFactor = 0.4;
	this.timestepMultiplier = 1.0;
	this.fluidPhysicsScale = 20;
	this.paused = false;
	this.version = 1;
};
Settings.__name__ = true;
Settings.prototype = {
	setChangeCallbacks: function(callbacks) {
		this.onChangeVersion = callbacks.onChangeVersion;
		this.onChangePaused = callbacks.onChangePaused;
		this.onChangeFluidPhysicsScale = callbacks.onChangeFluidPhysicsScale;
		this.onChangeTimestepMultiplier = callbacks.onChangeTimestepMultiplier;
		this.onChangeSurfaceDecayFactor = callbacks.onChangeSurfaceDecayFactor;
		this.onChangeMotionDecayFactor = callbacks.onChangeMotionDecayFactor;
		this.onChangeDragCoefficient = callbacks.onChangeDragCoefficient;
		this.onChangeDragSpeed = callbacks.onChangeDragSpeed;
		this.onChangePeriodicBoundary = callbacks.onChangePeriodicBoundary;
		this.onChangeBackgroundMultiplier = callbacks.onChangeBackgroundMultiplier;
		this.onChangeBackgroundPalette = callbacks.onChangeBackgroundPalette;
		this.onChangeAlphaGradient = callbacks.onChangeAlphaGradient;
		this.onChangeVelocityGradient = callbacks.onChangeVelocityGradient;
		this.onChangeDyeGradient = callbacks.onChangeDyeGradient;
		this.onChangeBackgroundColor = callbacks.onChangeBackgroundColor;
		this.onChangeSteadyStateColor = callbacks.onChangeSteadyStateColor;
		this.onChangeSteadyStateAlpha = callbacks.onChangeSteadyStateAlpha;
		this.onChangeBbColor1 = callbacks.onChangeBbColor1;
		this.onChangeBbColor2 = callbacks.onChangeBbColor2;
		this.onChangeBbColor3 = callbacks.onChangeBbColor3;
		this.onChangeBbColor4 = callbacks.onChangeBbColor4;
		this.onChangeBbAdditiveFactor = callbacks.onChangeBbAdditiveFactor;
		this.onChangeGamma = callbacks.onChangeGamma;
		this.onChangeVignetteOpacity = callbacks.onChangeVignetteOpacity;
		this.onChangeVignetteMagnitude = callbacks.onChangeVignetteMagnitude;
		this.onChangeVignetteExponent = callbacks.onChangeVignetteExponent;
		this.onChangeOpticalFlowMirrorX = callbacks.onChangeOpticalFlowMirrorX;
		this.onChangeOpticalFlowTemporalSmoothing = callbacks.onChangeOpticalFlowTemporalSmoothing;
		this.onChangeOpticalFlowScale = callbacks.onChangeOpticalFlowScale;
		this.onChangeOpticalFlowExponent = callbacks.onChangeOpticalFlowExponent;
		this.onChangeOpticalFlowBlurKernel = callbacks.onChangeOpticalFlowBlurKernel;
		this.onChangeOpticalFlowGamma = callbacks.onChangeOpticalFlowGamma;
		this.onChangeFluidIterations = callbacks.onChangeFluidIterations;
		this.onChangeFluidScale = callbacks.onChangeFluidScale;
		this.onChangeSimulationScale = callbacks.onChangeSimulationScale;
		this.onChangePowerOf2Fluid = callbacks.onChangePowerOf2Fluid;
	}
	,setFromDynamic: function(obj) {
		if(Object.prototype.hasOwnProperty.call(obj,"version")) {
			var newValue = Reflect.field(obj,"version");
			var oldValue = this.version;
			this.version = newValue;
			if(this.onChangeVersion != null && oldValue != newValue) {
				this.onChangeVersion(newValue,oldValue);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("version",newValue,oldValue);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"paused")) {
			var newValue1 = Reflect.field(obj,"paused");
			var oldValue1 = this.paused;
			this.paused = newValue1;
			if(this.onChangePaused != null && oldValue1 != newValue1) {
				this.onChangePaused(newValue1,oldValue1);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("paused",newValue1,oldValue1);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"fluidPhysicsScale")) {
			var newValue2 = Reflect.field(obj,"fluidPhysicsScale");
			var oldValue2 = this.fluidPhysicsScale;
			this.fluidPhysicsScale = newValue2;
			if(this.onChangeFluidPhysicsScale != null && oldValue2 != newValue2) {
				this.onChangeFluidPhysicsScale(newValue2,oldValue2);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("fluidPhysicsScale",newValue2,oldValue2);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"timestepMultiplier")) {
			var newValue3 = Reflect.field(obj,"timestepMultiplier");
			var oldValue3 = this.timestepMultiplier;
			this.timestepMultiplier = newValue3;
			if(this.onChangeTimestepMultiplier != null && oldValue3 != newValue3) {
				this.onChangeTimestepMultiplier(newValue3,oldValue3);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("timestepMultiplier",newValue3,oldValue3);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"surfaceDecayFactor")) {
			var newValue4 = Reflect.field(obj,"surfaceDecayFactor");
			var oldValue4 = this.surfaceDecayFactor;
			this.surfaceDecayFactor = newValue4;
			if(this.onChangeSurfaceDecayFactor != null && oldValue4 != newValue4) {
				this.onChangeSurfaceDecayFactor(newValue4,oldValue4);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("surfaceDecayFactor",newValue4,oldValue4);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"motionDecayFactor")) {
			var newValue5 = Reflect.field(obj,"motionDecayFactor");
			var oldValue5 = this.motionDecayFactor;
			this.motionDecayFactor = newValue5;
			if(this.onChangeMotionDecayFactor != null && oldValue5 != newValue5) {
				this.onChangeMotionDecayFactor(newValue5,oldValue5);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("motionDecayFactor",newValue5,oldValue5);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"dragCoefficient")) {
			var newValue6 = Reflect.field(obj,"dragCoefficient");
			var oldValue6 = this.dragCoefficient;
			this.dragCoefficient = newValue6;
			if(this.onChangeDragCoefficient != null && oldValue6 != newValue6) {
				this.onChangeDragCoefficient(newValue6,oldValue6);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("dragCoefficient",newValue6,oldValue6);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"dragSpeed")) {
			var newValue7 = Reflect.field(obj,"dragSpeed");
			var oldValue7 = this.dragSpeed;
			this.dragSpeed = newValue7;
			if(this.onChangeDragSpeed != null && oldValue7 != newValue7) {
				this.onChangeDragSpeed(newValue7,oldValue7);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("dragSpeed",newValue7,oldValue7);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"periodicBoundary")) {
			var newValue8 = Reflect.field(obj,"periodicBoundary");
			var oldValue8 = this.periodicBoundary;
			this.periodicBoundary = newValue8;
			if(this.onChangePeriodicBoundary != null && oldValue8 != newValue8) {
				this.onChangePeriodicBoundary(newValue8,oldValue8);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("periodicBoundary",newValue8,oldValue8);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"backgroundMultiplier")) {
			var newValue9 = Reflect.field(obj,"backgroundMultiplier");
			var oldValue9 = this.backgroundMultiplier;
			this.backgroundMultiplier = newValue9;
			if(this.onChangeBackgroundMultiplier != null && oldValue9 != newValue9) {
				this.onChangeBackgroundMultiplier(newValue9,oldValue9);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("backgroundMultiplier",newValue9,oldValue9);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"backgroundPalette")) {
			var newValue10 = Reflect.field(obj,"backgroundPalette");
			var oldValue10 = this.backgroundPalette;
			this.backgroundPalette = newValue10;
			if(this.onChangeBackgroundPalette != null && oldValue10 != newValue10) {
				this.onChangeBackgroundPalette(newValue10,oldValue10);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("backgroundPalette",newValue10,oldValue10);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"alphaGradient")) {
			var newValue11 = Reflect.field(obj,"alphaGradient");
			var oldValue11 = this.alphaGradient;
			this.alphaGradient = newValue11;
			if(this.onChangeAlphaGradient != null && oldValue11 != newValue11) {
				this.onChangeAlphaGradient(newValue11,oldValue11);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("alphaGradient",newValue11,oldValue11);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"velocityGradient")) {
			var newValue12 = Reflect.field(obj,"velocityGradient");
			var oldValue12 = this.velocityGradient;
			this.velocityGradient = newValue12;
			if(this.onChangeVelocityGradient != null && oldValue12 != newValue12) {
				this.onChangeVelocityGradient(newValue12,oldValue12);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("velocityGradient",newValue12,oldValue12);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"dyeGradient")) {
			var newValue13 = Reflect.field(obj,"dyeGradient");
			var oldValue13 = this.dyeGradient;
			this.dyeGradient = newValue13;
			if(this.onChangeDyeGradient != null && oldValue13 != newValue13) {
				this.onChangeDyeGradient(newValue13,oldValue13);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("dyeGradient",newValue13,oldValue13);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"backgroundColor")) {
			var newValue14 = Reflect.field(obj,"backgroundColor");
			var oldValue14 = this.backgroundColor;
			this.backgroundColor = newValue14;
			if(this.onChangeBackgroundColor != null && oldValue14 != newValue14) {
				this.onChangeBackgroundColor(newValue14,oldValue14);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("backgroundColor",newValue14,oldValue14);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"steadyStateColor")) {
			var newValue15 = Reflect.field(obj,"steadyStateColor");
			var oldValue15 = this.steadyStateColor;
			this.steadyStateColor = newValue15;
			if(this.onChangeSteadyStateColor != null && oldValue15 != newValue15) {
				this.onChangeSteadyStateColor(newValue15,oldValue15);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("steadyStateColor",newValue15,oldValue15);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"steadyStateAlpha")) {
			var newValue16 = Reflect.field(obj,"steadyStateAlpha");
			var oldValue16 = this.steadyStateAlpha;
			this.steadyStateAlpha = newValue16;
			if(this.onChangeSteadyStateAlpha != null && oldValue16 != newValue16) {
				this.onChangeSteadyStateAlpha(newValue16,oldValue16);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("steadyStateAlpha",newValue16,oldValue16);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"bbColor1")) {
			var newValue17 = Reflect.field(obj,"bbColor1");
			var oldValue17 = this.bbColor1;
			this.bbColor1 = newValue17;
			if(this.onChangeBbColor1 != null && oldValue17 != newValue17) {
				this.onChangeBbColor1(newValue17,oldValue17);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("bbColor1",newValue17,oldValue17);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"bbColor2")) {
			var newValue18 = Reflect.field(obj,"bbColor2");
			var oldValue18 = this.bbColor2;
			this.bbColor2 = newValue18;
			if(this.onChangeBbColor2 != null && oldValue18 != newValue18) {
				this.onChangeBbColor2(newValue18,oldValue18);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("bbColor2",newValue18,oldValue18);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"bbColor3")) {
			var newValue19 = Reflect.field(obj,"bbColor3");
			var oldValue19 = this.bbColor3;
			this.bbColor3 = newValue19;
			if(this.onChangeBbColor3 != null && oldValue19 != newValue19) {
				this.onChangeBbColor3(newValue19,oldValue19);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("bbColor3",newValue19,oldValue19);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"bbColor4")) {
			var newValue20 = Reflect.field(obj,"bbColor4");
			var oldValue20 = this.bbColor4;
			this.bbColor4 = newValue20;
			if(this.onChangeBbColor4 != null && oldValue20 != newValue20) {
				this.onChangeBbColor4(newValue20,oldValue20);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("bbColor4",newValue20,oldValue20);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"bbAdditiveFactor")) {
			var newValue21 = Reflect.field(obj,"bbAdditiveFactor");
			var oldValue21 = this.bbAdditiveFactor;
			this.bbAdditiveFactor = newValue21;
			if(this.onChangeBbAdditiveFactor != null && oldValue21 != newValue21) {
				this.onChangeBbAdditiveFactor(newValue21,oldValue21);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("bbAdditiveFactor",newValue21,oldValue21);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"gamma")) {
			var newValue22 = Reflect.field(obj,"gamma");
			var oldValue22 = this.gamma;
			this.gamma = newValue22;
			if(this.onChangeGamma != null && oldValue22 != newValue22) {
				this.onChangeGamma(newValue22,oldValue22);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("gamma",newValue22,oldValue22);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"vignetteOpacity")) {
			var newValue23 = Reflect.field(obj,"vignetteOpacity");
			var oldValue23 = this.vignetteOpacity;
			this.vignetteOpacity = newValue23;
			if(this.onChangeVignetteOpacity != null && oldValue23 != newValue23) {
				this.onChangeVignetteOpacity(newValue23,oldValue23);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("vignetteOpacity",newValue23,oldValue23);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"vignetteMagnitude")) {
			var newValue24 = Reflect.field(obj,"vignetteMagnitude");
			var oldValue24 = this.vignetteMagnitude;
			this.vignetteMagnitude = newValue24;
			if(this.onChangeVignetteMagnitude != null && oldValue24 != newValue24) {
				this.onChangeVignetteMagnitude(newValue24,oldValue24);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("vignetteMagnitude",newValue24,oldValue24);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"vignetteExponent")) {
			var newValue25 = Reflect.field(obj,"vignetteExponent");
			var oldValue25 = this.vignetteExponent;
			this.vignetteExponent = newValue25;
			if(this.onChangeVignetteExponent != null && oldValue25 != newValue25) {
				this.onChangeVignetteExponent(newValue25,oldValue25);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("vignetteExponent",newValue25,oldValue25);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowMirrorX")) {
			var newValue26 = Reflect.field(obj,"opticalFlowMirrorX");
			var oldValue26 = this.opticalFlowMirrorX;
			this.opticalFlowMirrorX = newValue26;
			if(this.onChangeOpticalFlowMirrorX != null && oldValue26 != newValue26) {
				this.onChangeOpticalFlowMirrorX(newValue26,oldValue26);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowMirrorX",newValue26,oldValue26);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowTemporalSmoothing")) {
			var newValue27 = Reflect.field(obj,"opticalFlowTemporalSmoothing");
			var oldValue27 = this.opticalFlowTemporalSmoothing;
			this.opticalFlowTemporalSmoothing = newValue27;
			if(this.onChangeOpticalFlowTemporalSmoothing != null && oldValue27 != newValue27) {
				this.onChangeOpticalFlowTemporalSmoothing(newValue27,oldValue27);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowTemporalSmoothing",newValue27,oldValue27);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowScale")) {
			var newValue28 = Reflect.field(obj,"opticalFlowScale");
			var oldValue28 = this.opticalFlowScale;
			this.opticalFlowScale = newValue28;
			if(this.onChangeOpticalFlowScale != null && oldValue28 != newValue28) {
				this.onChangeOpticalFlowScale(newValue28,oldValue28);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowScale",newValue28,oldValue28);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowExponent")) {
			var newValue29 = Reflect.field(obj,"opticalFlowExponent");
			var oldValue29 = this.opticalFlowExponent;
			this.opticalFlowExponent = newValue29;
			if(this.onChangeOpticalFlowExponent != null && oldValue29 != newValue29) {
				this.onChangeOpticalFlowExponent(newValue29,oldValue29);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowExponent",newValue29,oldValue29);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowBlurKernel")) {
			var newValue30 = Reflect.field(obj,"opticalFlowBlurKernel");
			var oldValue30 = this.opticalFlowBlurKernel;
			this.opticalFlowBlurKernel = newValue30;
			if(this.onChangeOpticalFlowBlurKernel != null && oldValue30 != newValue30) {
				this.onChangeOpticalFlowBlurKernel(newValue30,oldValue30);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowBlurKernel",newValue30,oldValue30);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"opticalFlowGamma")) {
			var newValue31 = Reflect.field(obj,"opticalFlowGamma");
			var oldValue31 = this.opticalFlowGamma;
			this.opticalFlowGamma = newValue31;
			if(this.onChangeOpticalFlowGamma != null && oldValue31 != newValue31) {
				this.onChangeOpticalFlowGamma(newValue31,oldValue31);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("opticalFlowGamma",newValue31,oldValue31);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"fluidIterations")) {
			var newValue32 = Reflect.field(obj,"fluidIterations");
			var oldValue32 = this.fluidIterations;
			this.fluidIterations = newValue32;
			if(this.onChangeFluidIterations != null && oldValue32 != newValue32) {
				this.onChangeFluidIterations(newValue32,oldValue32);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("fluidIterations",newValue32,oldValue32);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"fluidScale")) {
			var newValue33 = Reflect.field(obj,"fluidScale");
			var oldValue33 = this.fluidScale;
			this.fluidScale = newValue33;
			if(this.onChangeFluidScale != null && oldValue33 != newValue33) {
				this.onChangeFluidScale(newValue33,oldValue33);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("fluidScale",newValue33,oldValue33);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"simulationScale")) {
			var newValue34 = Reflect.field(obj,"simulationScale");
			var oldValue34 = this.simulationScale;
			this.simulationScale = newValue34;
			if(this.onChangeSimulationScale != null && oldValue34 != newValue34) {
				this.onChangeSimulationScale(newValue34,oldValue34);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("simulationScale",newValue34,oldValue34);
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(obj,"powerOf2Fluid")) {
			var newValue35 = Reflect.field(obj,"powerOf2Fluid");
			var oldValue35 = this.powerOf2Fluid;
			this.powerOf2Fluid = newValue35;
			if(this.onChangePowerOf2Fluid != null && oldValue35 != newValue35) {
				this.onChangePowerOf2Fluid(newValue35,oldValue35);
				if(this.onAnyFieldChange != null) {
					this.onAnyFieldChange("powerOf2Fluid",newValue35,oldValue35);
				}
			}
		}
	}
	,__class__: Settings
};
var _$SharedGPUResources_Resources = function(gl,unitQuad,screenTriangle,resample,nullTexture,shaderMap) {
	this.shaderMap = new haxe_ds_StringMap();
	this.nullTexture = null;
	this.resample = null;
	this.screenTriangle = null;
	this.unitQuad = null;
	this.gl = null;
	if(gl != null) {
		this.gl = gl;
	}
	if(unitQuad != null) {
		this.unitQuad = unitQuad;
	}
	if(screenTriangle != null) {
		this.screenTriangle = screenTriangle;
	}
	if(resample != null) {
		this.resample = resample;
	}
	if(nullTexture != null) {
		this.nullTexture = nullTexture;
	}
	if(shaderMap != null) {
		this.shaderMap = shaderMap;
	}
};
_$SharedGPUResources_Resources.__name__ = true;
_$SharedGPUResources_Resources.prototype = {
	__class__: _$SharedGPUResources_Resources
};
var SharedGPUResources = function() { };
SharedGPUResources.__name__ = true;
SharedGPUResources.getScreenTriangle = function(gl) {
	var r = SharedGPUResources.resources;
	if(r.screenTriangle == null) {
		var verts = new Float32Array([0,0,2,0,0,2]);
		r.screenTriangle = gl.createBuffer();
		gl.bindBuffer(34962,r.screenTriangle);
		gl.bufferData(34962,verts.buffer,35044);
		gl.bindBuffer(34962,null);
	}
	return r.screenTriangle;
};
SharedGPUResources.getResampleShader = function(gl) {
	var r = SharedGPUResources.resources;
	if(r.resample == null) {
		r.resample = new shaders_Resample(gl);
	}
	return r.resample;
};
SharedGPUResources.getNullTexture = function(gl) {
	var r = SharedGPUResources.resources;
	if(r.nullTexture == null) {
		r.nullTexture = Texture.createTexture(gl,1,1,new TextureParams(null,null,null,null,null,null,null),new Uint8Array([0,0,0,0]),null,false);
	}
	return r.nullTexture;
};
SharedGPUResources.getShaderWithKey = function(gl,key,onMiss) {
	var shaderMap = SharedGPUResources.resources.shaderMap;
	var shader = __map_reserved[key] != null ? shaderMap.getReserved(key) : shaderMap.h[key];
	if(shader == null) {
		shader = onMiss(gl,key);
		if(__map_reserved[key] != null) {
			shaderMap.setReserved(key,shader);
		} else {
			shaderMap.h[key] = shader;
		}
	}
	return shader;
};
SharedGPUResources.releaseGPUMemory = function(gl) {
	var r = SharedGPUResources.resources;
	if(r.unitQuad != null) {
		gl.deleteBuffer(r.unitQuad);
		r.unitQuad = null;
	}
	if(r.screenTriangle != null) {
		gl.deleteBuffer(r.screenTriangle);
		r.screenTriangle = null;
	}
	if(r.resample != null) {
		r.resample.destroy();
		r.resample = null;
	}
	var _this = r.shaderMap;
	var shader = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(shader.hasNext()) {
		var shader1 = shader.next();
		shader1.destroy();
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TextureParams = function(format,internalFormat,dataType,magFilter,minFilter,wrapS,wrapT) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.minFilter = 9728;
	this.magFilter = 9728;
	this.dataType = 5121;
	this.internalFormat = null;
	this.format = 6408;
	if(format != null) {
		this.format = format;
	}
	if(internalFormat != null) {
		this.internalFormat = internalFormat;
	}
	if(dataType != null) {
		this.dataType = dataType;
	}
	if(magFilter != null) {
		this.magFilter = magFilter;
	}
	if(minFilter != null) {
		this.minFilter = minFilter;
	}
	if(wrapS != null) {
		this.wrapS = wrapS;
	}
	if(wrapT != null) {
		this.wrapT = wrapT;
	}
};
TextureParams.__name__ = true;
TextureParams.prototype = {
	match: function(other) {
		if(this.format != other.format) {
			return false;
		}
		if(this.internalFormat != other.internalFormat) {
			return false;
		}
		if(this.dataType != other.dataType) {
			return false;
		}
		if(this.magFilter != other.magFilter) {
			return false;
		}
		if(this.minFilter != other.minFilter) {
			return false;
		}
		if(this.wrapS != other.wrapS) {
			return false;
		}
		if(this.wrapT != other.wrapT) {
			return false;
		}
		return true;
	}
	,__class__: TextureParams
};
var Texture = function(gl,width,height,native,format,internalFormat,dataType,magFilter,minFilter,wrapS,wrapT) {
	TextureParams.call(this,wrapT,wrapS,minFilter,magFilter,dataType,internalFormat,format);
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.native = native;
};
Texture.__name__ = true;
Texture.createTexture = function(gl,width,height,params,data,uploadParams,generateMipmaps) {
	if(generateMipmaps == null) {
		generateMipmaps = false;
	}
	if(params == null) {
		params = new TextureParams(null,null,null,null,null,null,null);
	}
	if(uploadParams == null) {
		uploadParams = new UploadParams(null,null);
	}
	if(data == null) {
		data = null;
	}
	var glTexture = gl.createTexture();
	gl.activeTexture(33984);
	gl.bindTexture(3553,glTexture);
	gl.texParameteri(3553,10241,params.minFilter);
	gl.texParameteri(3553,10240,params.magFilter);
	gl.texParameteri(3553,10242,params.wrapS);
	gl.texParameteri(3553,10243,params.wrapT);
	gl.pixelStorei(3317,uploadParams.unpackAlignment);
	gl.pixelStorei(37440,uploadParams.webGLFlipY);
	var internalFormat = params.internalFormat == null ? params.format : params.internalFormat;
	gl.texImage2D(3553,0,internalFormat,width,height,0,params.format,params.dataType,data);
	if(generateMipmaps) {
		gl.generateMipmap(3553);
	}
	gl.bindTexture(3553,null);
	return new Texture(gl,width,height,glTexture,params.wrapT,params.wrapS,params.minFilter,params.magFilter,params.dataType,params.internalFormat,params.format);
};
Texture.updateGLTextureParameters = function(gl,texture,params) {
	gl.activeTexture(33984);
	gl.bindTexture(3553,texture);
	if(params.magFilter != null) {
		gl.texParameteri(3553,10241,params.minFilter);
	}
	if(params.minFilter != null) {
		gl.texParameteri(3553,10240,params.magFilter);
	}
	if(params.wrapS != null) {
		gl.texParameteri(3553,10242,params.wrapS);
	}
	if(params.wrapT != null) {
		gl.texParameteri(3553,10243,params.wrapT);
	}
	gl.bindTexture(3553,null);
};
Texture.__super__ = TextureParams;
Texture.prototype = $extend(TextureParams.prototype,{
	__class__: Texture
});
var UploadParams = function(unpackAlignment,webGLFlipY) {
	this.webGLFlipY = true;
	this.unpackAlignment = 4;
	if(unpackAlignment != null) {
		this.unpackAlignment = unpackAlignment;
	}
	if(webGLFlipY != null) {
		this.webGLFlipY = webGLFlipY;
	}
};
UploadParams.__name__ = true;
UploadParams.prototype = {
	__class__: UploadParams
};
var VariableTextureParams = function(magFilter,minFilter,wrapS,wrapT) {
	this.wrapT = null;
	this.wrapS = null;
	this.minFilter = null;
	this.magFilter = null;
	if(magFilter != null) {
		this.magFilter = magFilter;
	}
	if(minFilter != null) {
		this.minFilter = minFilter;
	}
	if(wrapS != null) {
		this.wrapS = wrapS;
	}
	if(wrapT != null) {
		this.wrapT = wrapT;
	}
};
VariableTextureParams.__name__ = true;
VariableTextureParams.prototype = {
	__class__: VariableTextureParams
};
var filter_Bloom = function(gl,blurKernelNormalized,downsampleSize) {
	if(downsampleSize == null) {
		downsampleSize = 128;
	}
	if(blurKernelNormalized == null) {
		blurKernelNormalized = 0.08;
	}
	this.gl = gl;
	this.blurKernelNormalized = blurKernelNormalized;
	this.downsampleSize = downsampleSize;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
};
filter_Bloom.__name__ = true;
filter_Bloom.prototype = {
	releaseGPUMemory: function() {
		if(this.downsampleChain != null) {
			this.downsampleChain.releaseGPUMemory();
		}
		if(this.blur != null) {
			this.blur.releaseGPUMemory();
		}
	}
	,__class__: filter_Bloom
};
var filter_Blur = function(gl,kernelX,kernelY) {
	this.blurIntermediateXY = new filter_IntermediateRenderTarget();
	this.blurIntermediateX = new filter_IntermediateRenderTarget();
	this.gl = gl;
	this.kernelX = kernelX;
	this.kernelY = kernelY;
	this.blurShaderX = SharedGPUResources.getShaderWithKey(gl,"blurX(k" + kernelX + ")",function(gl1,_) {
		return new filter_Blur1DShader(gl1,new Float32Array([1,0]),kernelX);
	});
	this.blurShaderY = SharedGPUResources.getShaderWithKey(gl,"blurY(k" + kernelY + ")",function(gl2,_1) {
		return new filter_Blur1DShader(gl2,new Float32Array([0,1]),kernelY);
	});
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
};
filter_Blur.__name__ = true;
filter_Blur.prototype = {
	apply: function(input,_,textureParams) {
		if(textureParams == null) {
			textureParams = input;
		}
		var targetWidth = input.width;
		var targetHeight = input.height;
		var blurXTarget = this.blurIntermediateX.get(this.gl,targetWidth,targetHeight,textureParams);
		var blurXYTarget = this.blurIntermediateXY.get(this.gl,targetWidth,targetHeight,textureParams);
		this.gl.viewport(0,0,blurXTarget.width,blurXTarget.height);
		blurXTarget.gl.bindFramebuffer(36160,blurXTarget.frameBufferObject);
		this.gl.bindBuffer(34962,this.screenTriangle);
		var _this = this.blurShaderX.texture;
		_this.dirty = true;
		_this.data = input.native;
		this.blurShaderX.invResolution.data[0] = 1 / input.width;
		this.blurShaderX.invResolution.data[1] = 1 / input.height;
		this.blurShaderX.invResolution.dirty = true;
		var _this1 = this.blurShaderX;
		if(_this1._active) {
			var _g = 0;
			var _g1 = _this1._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = _this1._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = _this1._attributes[i];
				var location = att.location;
				if(location != -1) {
					_this1.gl.enableVertexAttribArray(location);
					_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!_this1._ready) {
				_this1.create();
			}
			_this1.gl.useProgram(_this1._prog);
			var _g3 = 0;
			var _g12 = _this1._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = _this1._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = _this1._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					_this1.gl.enableVertexAttribArray(location1);
					_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			_this1._active = true;
		}
		this.gl.drawArrays(4,0,3);
		this.blurShaderX.deactivate();
		blurXYTarget.gl.bindFramebuffer(36160,blurXYTarget.frameBufferObject);
		this.gl.bindBuffer(34962,this.screenTriangle);
		var _this2 = this.blurShaderY.texture;
		_this2.dirty = true;
		_this2.data = blurXTarget.texture.native;
		this.blurShaderY.invResolution.data[0] = 1 / input.width;
		this.blurShaderY.invResolution.data[1] = 1 / input.height;
		this.blurShaderY.invResolution.dirty = true;
		var _this3 = this.blurShaderY;
		if(_this3._active) {
			var _g5 = 0;
			var _g14 = _this3._uniforms;
			while(_g5 < _g14.length) {
				var u2 = _g14[_g5];
				++_g5;
				if(u2.dirty || u2.alwaysDirty) {
					u2.apply();
				}
			}
			var offset2 = 0;
			var _g6 = 0;
			var _g15 = _this3._attributes.length;
			while(_g6 < _g15) {
				var i2 = _g6++;
				var att2 = _this3._attributes[i2];
				var location2 = att2.location;
				if(location2 != -1) {
					_this3.gl.enableVertexAttribArray(location2);
					_this3.gl.vertexAttribPointer(location2,att2.itemCount,att2.type,false,_this3._aStride,offset2);
				}
				offset2 += att2.byteSize;
			}
		} else {
			if(!_this3._ready) {
				_this3.create();
			}
			_this3.gl.useProgram(_this3._prog);
			var _g7 = 0;
			var _g16 = _this3._uniforms;
			while(_g7 < _g16.length) {
				var u3 = _g16[_g7];
				++_g7;
				if(u3.dirty || u3.alwaysDirty) {
					u3.apply();
				}
			}
			var offset3 = 0;
			var _g8 = 0;
			var _g17 = _this3._attributes.length;
			while(_g8 < _g17) {
				var i3 = _g8++;
				var att3 = _this3._attributes[i3];
				var location3 = att3.location;
				if(location3 != -1) {
					_this3.gl.enableVertexAttribArray(location3);
					_this3.gl.vertexAttribPointer(location3,att3.itemCount,att3.type,false,_this3._aStride,offset3);
				}
				offset3 += att3.byteSize;
			}
			_this3._active = true;
		}
		this.gl.drawArrays(4,0,3);
		this.blurShaderY.deactivate();
		return blurXYTarget.texture;
	}
	,releaseGPUMemory: function() {
		if(this.blurIntermediateX != null) {
			this.blurIntermediateX.destroy();
		}
		if(this.blurIntermediateXY != null) {
			this.blurIntermediateXY.destroy();
		}
	}
	,__class__: filter_Blur
};
var filter_Blur1DShader = function(gl,direction,kernel) {
	this.gl = gl;
	this.kernel = kernel;
	this.direction = direction;
	this.shaderParts = this.generateShaderParts();
	shaderblox_ShaderBase.call(this,gl);
};
filter_Blur1DShader.__name__ = true;
filter_Blur1DShader.__super__ = shaderblox_ShaderBase;
filter_Blur1DShader.prototype = $extend(shaderblox_ShaderBase.prototype,{
	generateShaderParts: function() {
		var N = this.nearestBestKernel(this.kernel);
		var centerIndex = (N - 1) / 2;
		var offsets = [];
		var weights = [];
		var totalWeight = 0.0;
		var _g = 0;
		var _g1 = N;
		while(_g < _g1) {
			var i = _g++;
			var u = i / (N - 1);
			var w = this.gaussianWeight(u * 2.0 - 1);
			offsets[i] = i - centerIndex;
			weights[i] = w;
			totalWeight += w;
		}
		var _g2 = 0;
		var _g3 = weights.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			weights[i1] /= totalWeight;
		}
		var linearSamplingWeights = [];
		var linearSamplingOffsets = [];
		var linearSamplingMap = [];
		var i2 = 0;
		while(i2 <= centerIndex) {
			var j = Math.min(i2 + 1,Math.floor(centerIndex)) | 0;
			var singleCenterSample = i2 == j;
			if(singleCenterSample) {
				linearSamplingMap.push({ o : offsets[i2], w : weights[i2]});
			} else {
				var sharedCell = j == centerIndex;
				var weightLinear = weights[i2] + weights[j] * (sharedCell ? .5 : 1.);
				var offsetLinear = offsets[i2] + 1 / (1 + weights[i2] / weights[j]);
				if(offsetLinear == 0) {
					linearSamplingMap.push({ o : offsets[i2], w : weights[i2]});
					linearSamplingMap.push({ o : offsets[i2 + 1], w : weights[i2 + 1]});
				} else {
					linearSamplingMap.push({ o : offsetLinear, w : weightLinear});
					linearSamplingMap.push({ o : -offsetLinear, w : weightLinear});
				}
			}
			i2 += 2;
		}
		var _g4 = 0;
		var _g5 = linearSamplingMap.length;
		while(_g4 < _g5) {
			var i3 = _g4++;
			linearSamplingOffsets[i3] = linearSamplingMap[i3].o;
			linearSamplingWeights[i3] = linearSamplingMap[i3].w;
		}
		offsets = linearSamplingOffsets;
		weights = linearSamplingWeights;
		var varyingCount = offsets.length;
		var _g6 = [];
		var _g7 = 0;
		var _g8 = varyingCount;
		while(_g7 < _g8) {
			var i4 = _g7++;
			_g6.push("varying vec2 sampleCoord" + i4 + ";");
		}
		var varyingDeclarations = _g6;
		var _g9 = [];
		var _g10 = 0;
		var _g11 = varyingCount;
		while(_g10 < _g11) {
			var i5 = _g10++;
			_g9.push("sampleCoord" + i5 + " = texelCoord + vec2(" + this.glslFloat(offsets[i5] * this.direction[0]) + ", " + this.glslFloat(offsets[i5] * this.direction[1]) + ") * invResolution;");
		}
		var varyingValues = _g9;
		var _g12 = [];
		var _g13 = 0;
		var _g14 = varyingCount;
		while(_g13 < _g14) {
			var i6 = _g13++;
			_g12.push("blend += texture2D(texture, sampleCoord" + i6 + ") * " + this.glslFloat(weights[i6]) + ";");
		}
		var textureSamples = _g12;
		return { varyingDeclarations : varyingDeclarations, varyingValues : varyingValues, textureSamples : textureSamples};
	}
	,nearestBestKernel: function(idealKernel) {
		var v = Math.round(idealKernel);
		var k = v;
		if(k % 2 != 0 && Math.floor(k / 2) % 2 == 0 && k > 0) {
			return Math.max(k,3) | 0;
		}
		var k1 = v - 1;
		if(k1 % 2 != 0 && Math.floor(k1 / 2) % 2 == 0 && k1 > 0) {
			return Math.max(k1,3) | 0;
		}
		var k2 = v + 1;
		if(k2 % 2 != 0 && Math.floor(k2 / 2) % 2 == 0 && k2 > 0) {
			return Math.max(k2,3) | 0;
		}
		var k3 = v - 2;
		if(k3 % 2 != 0 && Math.floor(k3 / 2) % 2 == 0 && k3 > 0) {
			return Math.max(k3,3) | 0;
		}
		var k4 = v + 2;
		if(k4 % 2 != 0 && Math.floor(k4 / 2) % 2 == 0 && k4 > 0) {
			return Math.max(k4,3) | 0;
		}
		return Math.max(v,3) | 0;
	}
	,gaussianWeight: function(x) {
		var sigma = 0.333333333333333315;
		var denominator = Math.sqrt(2.0 * Math.PI) * sigma;
		var exponent = -(x * x / (2.0 * sigma * sigma));
		var weight = 1.0 / denominator * Math.exp(exponent);
		return weight;
	}
	,glslFloat: function(f) {
		var s = f == null ? "null" : "" + f;
		if(s.indexOf(".") == -1) {
			s += ".";
		}
		return s;
	}
	,createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UVec2(this.gl,"invResolution",null);
		this.invResolution = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance2;
		this._attributes.push(instance2);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n    uniform vec2 invResolution;\n    \n" + this.shaderParts.varyingDeclarations.join("\n") + "\n    void main() {\n        vec2 texelCoord = vertexPosition;\n        \n" + this.shaderParts.varyingValues.join("\n") + "\n        vec2 clipSpace = 2.0*texelCoord - 1.0;\t\n        gl_Position = vec4(clipSpace, 0.0, 1.);\n    }\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D texture;\n    \n" + this.shaderParts.varyingDeclarations.join("\n") + "\n    void main() {\n        vec4 blend = vec4(0.0);\n        \n" + this.shaderParts.textureSamples.join("\n") + ";\n        gl_FragColor = blend;\n    }\n";
	}
	,__class__: filter_Blur1DShader
});
var filter_DownsampleHalf = function(gl) {
	this.intermediate = new filter_IntermediateRenderTarget();
	this.gl = gl;
	this.resampleShader = SharedGPUResources.getResampleShader(gl);
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
};
filter_DownsampleHalf.__name__ = true;
filter_DownsampleHalf.prototype = {
	apply: function(input,_,textureParams) {
		if(textureParams == null) {
			textureParams = input;
		}
		var targetWidth = input.width * 0.5 | 0;
		var targetHeight = input.height * 0.5 | 0;
		var outputTarget = this.intermediate.get(this.gl,targetWidth,targetHeight,textureParams);
		outputTarget.gl.bindFramebuffer(36160,outputTarget.frameBufferObject);
		this.gl.viewport(0,0,outputTarget.width,outputTarget.height);
		this.gl.bindBuffer(34962,this.screenTriangle);
		var _this = this.resampleShader.texture;
		_this.dirty = true;
		_this.data = input.native;
		var _this1 = this.resampleShader;
		if(_this1._active) {
			var _g = 0;
			var _g1 = _this1._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = _this1._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = _this1._attributes[i];
				var location = att.location;
				if(location != -1) {
					_this1.gl.enableVertexAttribArray(location);
					_this1.gl.vertexAttribPointer(location,att.itemCount,att.type,false,_this1._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!_this1._ready) {
				_this1.create();
			}
			_this1.gl.useProgram(_this1._prog);
			var _g3 = 0;
			var _g12 = _this1._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = _this1._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = _this1._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					_this1.gl.enableVertexAttribArray(location1);
					_this1.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,_this1._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			_this1._active = true;
		}
		this.gl.drawArrays(4,0,3);
		this.resampleShader.deactivate();
		return outputTarget.texture;
	}
	,releaseGPUMemory: function() {
		if(this.intermediate != null) {
			this.intermediate.destroy();
		}
	}
	,__class__: filter_DownsampleHalf
};
var filter_DownsampleHalfChain = function(gl,count) {
	this.gl = gl;
	this.count = count;
	var _g = [];
	var _g1 = 0;
	var _g2 = count;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(new filter_DownsampleHalf(gl));
	}
	this.downsampleFilters = _g;
};
filter_DownsampleHalfChain.__name__ = true;
filter_DownsampleHalfChain.prototype = {
	apply: function(input) {
		var current = input;
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) {
			var i = _g++;
			current = this.downsampleFilters[i].apply(current);
		}
		return current;
	}
	,releaseGPUMemory: function() {
		var _g = 0;
		var _g1 = this.downsampleFilters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.releaseGPUMemory();
		}
	}
	,__class__: filter_DownsampleHalfChain
};
var filter_IntermediateRenderTarget = function() {
};
filter_IntermediateRenderTarget.__name__ = true;
filter_IntermediateRenderTarget.prototype = {
	get: function(gl,targetWidth,targetHeight,targetParameters) {
		if(this._currentTarget != null) {
			if(targetWidth != this._currentTarget.width || targetHeight != this._currentTarget.height || !targetParameters.match(this._currentTarget.textureParameters)) {
				var _this = this._currentTarget;
				_this.gl.deleteFramebuffer(_this.frameBufferObject);
				_this.gl.deleteTexture(_this.texture.native);
				this._currentTarget = null;
			}
		}
		if(this._currentTarget == null) {
			this._currentTarget = new render_RenderTarget(gl,targetWidth,targetHeight,targetParameters);
		}
		return this._currentTarget;
	}
	,destroy: function() {
		if(this._currentTarget != null) {
			var _this = this._currentTarget;
			_this.gl.deleteFramebuffer(_this.frameBufferObject);
			_this.gl.deleteTexture(_this.texture.native);
		}
	}
	,__class__: filter_IntermediateRenderTarget
};
var filter_Swappable = function() {
};
filter_Swappable.__name__ = true;
filter_Swappable.prototype = {
	get: function(gl,targetWidth,targetHeight,targetParameters) {
		if(this._currentTarget != null) {
			if(targetWidth != this._currentTarget.width || targetHeight != this._currentTarget.height || !targetParameters.match(this._currentTarget.textureParameters)) {
				var _this = this._currentTarget;
				_this.gl.deleteFramebuffer(_this.writeFrameBufferObject);
				_this.gl.deleteFramebuffer(_this.readFrameBufferObject);
				_this.gl.deleteTexture(_this.writeToTexture.native);
				_this.gl.deleteTexture(_this.readFromTexture.native);
				this._currentTarget = null;
			}
		}
		if(this._currentTarget == null) {
			this._currentTarget = new render_RenderTargetSwappable(gl,targetWidth,targetHeight,targetParameters);
		}
		return this._currentTarget;
	}
	,destroy: function() {
		if(this._currentTarget != null) {
			var _this = this._currentTarget;
			_this.gl.deleteFramebuffer(_this.writeFrameBufferObject);
			_this.gl.deleteFramebuffer(_this.readFrameBufferObject);
			_this.gl.deleteTexture(_this.writeToTexture.native);
			_this.gl.deleteTexture(_this.readFromTexture.native);
		}
	}
	,__class__: filter_Swappable
};
var filter_SobelH = function(gl) {
	this.outputIntermediate = new filter_IntermediateRenderTarget();
	this.gl = gl;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.sobelShaderH = SharedGPUResources.getShaderWithKey(gl,"sobel(h)",function(gl1,_) {
		return new filter_SobelShader(gl1,0);
	});
};
filter_SobelH.__name__ = true;
filter_SobelH.prototype = {
	releaseGPUMemory: function() {
		if(this.outputIntermediate != null) {
			this.outputIntermediate.destroy();
		}
	}
	,__class__: filter_SobelH
};
var filter_SobelV = function(gl) {
	this.outputIntermediate = new filter_IntermediateRenderTarget();
	this.gl = gl;
	this.screenTriangle = SharedGPUResources.getScreenTriangle(gl);
	this.sobelShaderV = SharedGPUResources.getShaderWithKey(gl,"sobel(v)",function(gl1,_) {
		return new filter_SobelShader(gl1,1);
	});
};
filter_SobelV.__name__ = true;
filter_SobelV.prototype = {
	releaseGPUMemory: function() {
		if(this.outputIntermediate != null) {
			this.outputIntermediate.destroy();
		}
	}
	,__class__: filter_SobelV
};
var filter_SobelShader = function(gl,mode) {
	var tmp;
	switch(mode) {
	case 0:
		tmp = "\n                sampleCoord0 = texelCoord + vec2(-1, -1) * invResolution;\n                sampleCoord1 = texelCoord + vec2(-1,  0) * invResolution;\n                sampleCoord2 = texelCoord + vec2(-1, +1) * invResolution;\n                sampleCoord3 = texelCoord + vec2(+1, -1) * invResolution;\n                sampleCoord4 = texelCoord + vec2(+1,  0) * invResolution;\n                sampleCoord5 = texelCoord + vec2(+1, +1) * invResolution;\n            ";
		break;
	case 1:
		tmp = "\n                sampleCoord0 = texelCoord + vec2(-1, -1) * invResolution;\n                sampleCoord1 = texelCoord + vec2( 0, -1) * invResolution;\n                sampleCoord2 = texelCoord + vec2(+1, -1) * invResolution;\n                sampleCoord3 = texelCoord + vec2(-1, +1) * invResolution;\n                sampleCoord4 = texelCoord + vec2( 0, +1) * invResolution;\n                sampleCoord5 = texelCoord + vec2(+1, +1) * invResolution;\n            ";
		break;
	}
	this.sampleCoordinates = tmp;
	shaderblox_ShaderBase.call(this,gl);
};
filter_SobelShader.__name__ = true;
filter_SobelShader.__super__ = shaderblox_ShaderBase;
filter_SobelShader.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UVec2(this.gl,"invResolution",null);
		this.invResolution = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance1;
		this._uniforms.push(instance1);
		var instance2 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance2;
		this._attributes.push(instance2);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n    uniform vec2 invResolution;\n    varying vec2 sampleCoord0;\n    varying vec2 sampleCoord1;\n    varying vec2 sampleCoord2;\n    varying vec2 sampleCoord3;\n    varying vec2 sampleCoord4;\n    varying vec2 sampleCoord5;\n    void main() {\n        vec2 texelCoord = vertexPosition;\n        \n" + this.sampleCoordinates + "\n        vec2 clipSpace = 2.0*texelCoord - 1.0;\t\n        gl_Position = vec4(clipSpace, 0.0, 1.);\n    }\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D texture;\n    varying vec2 sampleCoord0;\n    varying vec2 sampleCoord1;\n    varying vec2 sampleCoord2;\n    varying vec2 sampleCoord3;\n    varying vec2 sampleCoord4;\n    varying vec2 sampleCoord5;\n    void main() {\n        vec4 sobel = vec4(0);\n        \n        sobel += texture2D(texture, sampleCoord0) * -1.0;\n        sobel += texture2D(texture, sampleCoord1) * -2.0;\n        sobel += texture2D(texture, sampleCoord2) * -1.0;\n        sobel += texture2D(texture, sampleCoord3) *  1.0;\n        sobel += texture2D(texture, sampleCoord4) *  2.0;\n        sobel += texture2D(texture, sampleCoord5) *  1.0;\n        gl_FragColor = sobel;\n    }\n";
	}
	,__class__: filter_SobelShader
});
var gluon_es2_GLContextDebug = function() { };
gluon_es2_GLContextDebug.__name__ = true;
gluon_es2_GLContextDebug.getConstantName = function(constant) {
	var mapped = gluon_es2_GLContextDebug.constantNameMap.h[constant];
	if(mapped != null) {
		return mapped;
	} else {
		return "0x" + StringTools.hex(constant,4);
	}
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = true;
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var math_POT = function() { };
math_POT.__name__ = true;
math_POT.floorPowerOf2 = function(v) {
	var i = Math.floor(v);
	i |= i >> 1;
	i |= i >> 2;
	i |= i >> 4;
	i |= i >> 8;
	i |= i >> 16;
	return i - (i >> 1);
};
math_POT.log2 = function(x) {
	return Math.log(x) * 1.4426950408889634;
};
var render_RenderTarget = function(gl,width,height,textureParameters,textureFactory) {
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.textureParameters = textureParameters;
	this.textureFactory = textureFactory;
	this.frameBufferObject = gl.createFramebuffer();
	var newTexture = this.createEmptyTexture(width,height);
	this.gl.bindFramebuffer(36160,this.frameBufferObject);
	this.gl.framebufferTexture2D(36160,36064,3553,newTexture.native,0);
	if(this.texture != null) {
		var resampler = SharedGPUResources.getResampleShader(this.gl);
		var _this = resampler.texture;
		_this.dirty = true;
		_this.data = this.texture.native;
		this.gl.bindFramebuffer(36160,this.frameBufferObject);
		this.gl.viewport(0,0,width,height);
		this.gl.bindBuffer(34962,SharedGPUResources.getScreenTriangle(this.gl));
		if(resampler._active) {
			var _g = 0;
			var _g1 = resampler._uniforms;
			while(_g < _g1.length) {
				var u = _g1[_g];
				++_g;
				if(u.dirty || u.alwaysDirty) {
					u.apply();
				}
			}
			var offset = 0;
			var _g2 = 0;
			var _g11 = resampler._attributes.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var att = resampler._attributes[i];
				var location = att.location;
				if(location != -1) {
					resampler.gl.enableVertexAttribArray(location);
					resampler.gl.vertexAttribPointer(location,att.itemCount,att.type,false,resampler._aStride,offset);
				}
				offset += att.byteSize;
			}
		} else {
			if(!resampler._ready) {
				resampler.create();
			}
			resampler.gl.useProgram(resampler._prog);
			var _g3 = 0;
			var _g12 = resampler._uniforms;
			while(_g3 < _g12.length) {
				var u1 = _g12[_g3];
				++_g3;
				if(u1.dirty || u1.alwaysDirty) {
					u1.apply();
				}
			}
			var offset1 = 0;
			var _g4 = 0;
			var _g13 = resampler._attributes.length;
			while(_g4 < _g13) {
				var i1 = _g4++;
				var att1 = resampler._attributes[i1];
				var location1 = att1.location;
				if(location1 != -1) {
					resampler.gl.enableVertexAttribArray(location1);
					resampler.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,resampler._aStride,offset1);
				}
				offset1 += att1.byteSize;
			}
			resampler._active = true;
		}
		this.gl.drawArrays(4,0,3);
		resampler.deactivate();
		this.gl.deleteTexture(this.texture.native);
	} else {
		this.gl.bindFramebuffer(36160,this.frameBufferObject);
		this.gl.viewport(0,0,this.width,this.height);
		this.gl.clearColor(0,0,0,1);
		this.gl.clear(16384);
	}
	this.width = width;
	this.height = height;
	this.texture = newTexture;
};
render_RenderTarget.__name__ = true;
render_RenderTarget.prototype = {
	updateTextureParameters: function(params) {
		Texture.updateGLTextureParameters(this.gl,this.texture.native,params);
		if(params.magFilter != null) {
			this.textureParameters.magFilter = params.magFilter;
		}
		if(params.minFilter != null) {
			this.textureParameters.minFilter = params.minFilter;
		}
		if(params.wrapS != null) {
			this.textureParameters.wrapS = params.wrapS;
		}
		if(params.wrapT != null) {
			this.textureParameters.wrapT = params.wrapT;
		}
	}
	,activate: function() {
		this.gl.bindFramebuffer(36160,this.frameBufferObject);
	}
	,createEmptyTexture: function(width,height) {
		if(this.textureFactory != null) {
			return this.textureFactory(this.gl,width,height);
		}
		return Texture.createTexture(this.gl,width,height,this.textureParameters,null);
	}
	,__class__: render_RenderTarget
};
var render_RenderTargetSwappable = function(gl,width,height,textureParameters,textureFactory) {
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.textureParameters = textureParameters;
	this.textureFactory = textureFactory;
	this.writeFrameBufferObject = gl.createFramebuffer();
	this.readFrameBufferObject = gl.createFramebuffer();
	this.resize(width,height);
};
render_RenderTargetSwappable.__name__ = true;
render_RenderTargetSwappable.prototype = {
	resize: function(width,height) {
		var newWriteToTexture = this.createEmptyTexture(width,height);
		var newReadFromTexture = this.createEmptyTexture(width,height);
		this.gl.bindFramebuffer(36160,this.writeFrameBufferObject);
		this.gl.framebufferTexture2D(36160,36064,3553,newWriteToTexture.native,0);
		this.gl.bindFramebuffer(36160,this.readFrameBufferObject);
		this.gl.framebufferTexture2D(36160,36064,3553,newReadFromTexture.native,0);
		if(this.readFromTexture != null) {
			var resampler = SharedGPUResources.getResampleShader(this.gl);
			var _this = resampler.texture;
			_this.dirty = true;
			_this.data = this.readFromTexture.native;
			this.gl.bindFramebuffer(36160,this.readFrameBufferObject);
			this.gl.viewport(0,0,width,height);
			this.gl.bindBuffer(34962,SharedGPUResources.getScreenTriangle(this.gl));
			if(resampler._active) {
				var _g = 0;
				var _g1 = resampler._uniforms;
				while(_g < _g1.length) {
					var u = _g1[_g];
					++_g;
					if(u.dirty || u.alwaysDirty) {
						u.apply();
					}
				}
				var offset = 0;
				var _g2 = 0;
				var _g11 = resampler._attributes.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var att = resampler._attributes[i];
					var location = att.location;
					if(location != -1) {
						resampler.gl.enableVertexAttribArray(location);
						resampler.gl.vertexAttribPointer(location,att.itemCount,att.type,false,resampler._aStride,offset);
					}
					offset += att.byteSize;
				}
			} else {
				if(!resampler._ready) {
					resampler.create();
				}
				resampler.gl.useProgram(resampler._prog);
				var _g3 = 0;
				var _g12 = resampler._uniforms;
				while(_g3 < _g12.length) {
					var u1 = _g12[_g3];
					++_g3;
					if(u1.dirty || u1.alwaysDirty) {
						u1.apply();
					}
				}
				var offset1 = 0;
				var _g4 = 0;
				var _g13 = resampler._attributes.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var att1 = resampler._attributes[i1];
					var location1 = att1.location;
					if(location1 != -1) {
						resampler.gl.enableVertexAttribArray(location1);
						resampler.gl.vertexAttribPointer(location1,att1.itemCount,att1.type,false,resampler._aStride,offset1);
					}
					offset1 += att1.byteSize;
				}
				resampler._active = true;
			}
			this.gl.drawArrays(4,0,3);
			resampler.deactivate();
			this.gl.deleteTexture(this.readFromTexture.native);
		} else {
			this.gl.bindFramebuffer(36160,this.readFrameBufferObject);
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,1);
			this.gl.clear(16384);
		}
		if(this.writeToTexture != null) {
			this.gl.deleteTexture(this.writeToTexture.native);
		} else {
			this.gl.bindFramebuffer(36160,this.writeFrameBufferObject);
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,1);
			this.gl.clear(16384);
		}
		this.width = width;
		this.height = height;
		this.writeToTexture = newWriteToTexture;
		this.readFromTexture = newReadFromTexture;
		return this;
	}
	,updateTextureParameters: function(params) {
		Texture.updateGLTextureParameters(this.gl,this.readFromTexture.native,params);
		Texture.updateGLTextureParameters(this.gl,this.writeToTexture.native,params);
		if(params.magFilter != null) {
			this.textureParameters.magFilter = params.magFilter;
		}
		if(params.minFilter != null) {
			this.textureParameters.minFilter = params.minFilter;
		}
		if(params.wrapS != null) {
			this.textureParameters.wrapS = params.wrapS;
		}
		if(params.wrapT != null) {
			this.textureParameters.wrapT = params.wrapT;
		}
	}
	,activate: function() {
		this.gl.bindFramebuffer(36160,this.writeFrameBufferObject);
	}
	,createEmptyTexture: function(width,height) {
		if(this.textureFactory != null) {
			return this.textureFactory(this.gl,width,height);
		}
		return Texture.createTexture(this.gl,width,height,this.textureParameters,null);
	}
	,__class__: render_RenderTargetSwappable
};
var shaderblox_attributes_Attribute = function() { };
shaderblox_attributes_Attribute.__name__ = true;
shaderblox_attributes_Attribute.prototype = {
	__class__: shaderblox_attributes_Attribute
};
var shaderblox_attributes_FloatAttribute = function(name,location,nFloats) {
	if(nFloats == null) {
		nFloats = 1;
	}
	this.name = name;
	this.location = location;
	this.byteSize = nFloats * 4;
	this.itemCount = nFloats;
	this.type = 5126;
};
shaderblox_attributes_FloatAttribute.__name__ = true;
shaderblox_attributes_FloatAttribute.__super__ = shaderblox_attributes_Attribute;
shaderblox_attributes_FloatAttribute.prototype = $extend(shaderblox_attributes_Attribute.prototype,{
	__class__: shaderblox_attributes_FloatAttribute
});
var shaderblox_uniforms_UniformBase_$Bool = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$Bool.__name__ = true;
shaderblox_uniforms_UniformBase_$Bool.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$Bool
};
var shaderblox_uniforms_UBool = function(gl,name,index,f) {
	if(f == null) {
		f = false;
	}
	shaderblox_uniforms_UniformBase_$Bool.call(this,gl,name,index,f);
};
shaderblox_uniforms_UBool.__name__ = true;
shaderblox_uniforms_UBool.__super__ = shaderblox_uniforms_UniformBase_$Bool;
shaderblox_uniforms_UBool.prototype = $extend(shaderblox_uniforms_UniformBase_$Bool.prototype,{
	apply: function() {
		this.gl.uniform1i(this.location,this.data ? 1 : 0);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UBool
});
var shaderblox_uniforms_UniformBase_$Float = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$Float.__name__ = true;
shaderblox_uniforms_UniformBase_$Float.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$Float
};
var shaderblox_uniforms_UFloat = function(gl,name,index,f) {
	if(f == null) {
		f = 0.0;
	}
	shaderblox_uniforms_UniformBase_$Float.call(this,gl,name,index,f);
};
shaderblox_uniforms_UFloat.__name__ = true;
shaderblox_uniforms_UFloat.__super__ = shaderblox_uniforms_UniformBase_$Float;
shaderblox_uniforms_UFloat.prototype = $extend(shaderblox_uniforms_UniformBase_$Float.prototype,{
	apply: function() {
		this.gl.uniform1f(this.location,this.data);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UFloat
});
var shaderblox_uniforms_UniformBase_$Int = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$Int.__name__ = true;
shaderblox_uniforms_UniformBase_$Int.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$Int
};
var shaderblox_uniforms_UInt = function(gl,name,index,f) {
	if(f == null) {
		f = 0;
	}
	shaderblox_uniforms_UniformBase_$Int.call(this,gl,name,index,f);
};
shaderblox_uniforms_UInt.__name__ = true;
shaderblox_uniforms_UInt.__super__ = shaderblox_uniforms_UniformBase_$Int;
shaderblox_uniforms_UInt.prototype = $extend(shaderblox_uniforms_UniformBase_$Int.prototype,{
	apply: function() {
		this.gl.uniform1i(this.location,this.data);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UInt
});
var shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture.__name__ = true;
shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture
};
var shaderblox_uniforms_UTexture = function(gl,name,index,cube) {
	if(cube == null) {
		cube = false;
	}
	this.gpuSideValue = -1;
	this.cube = cube;
	this.type = cube ? 34067 : 3553;
	shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture.call(this,gl,name,index,null);
};
shaderblox_uniforms_UTexture.__name__ = true;
shaderblox_uniforms_UTexture.__super__ = shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture;
shaderblox_uniforms_UTexture.prototype = $extend(shaderblox_uniforms_UniformBase_$gluon_$es2_$GLTexture.prototype,{
	apply: function() {
		if(this.data == null) {
			return;
		}
		var idx = 33984 + this.samplerIndex;
		if(shaderblox_uniforms_UTexture.lastActiveTexture != idx) {
			this.gl.activeTexture(idx);
			shaderblox_uniforms_UTexture.lastActiveTexture = idx;
		}
		this.gl.bindTexture(this.type,this.data);
		if(this.gpuSideValue != this.samplerIndex) {
			this.gl.uniform1i(this.location,this.samplerIndex);
			this.gpuSideValue = this.samplerIndex;
		}
	}
	,__class__: shaderblox_uniforms_UTexture
});
var shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2 = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2.__name__ = true;
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2
};
var shaderblox_uniforms_UVec2 = function(gl,name,index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(2);
	this1[0] = x;
	this1[1] = y;
	shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2.call(this,gl,name,index,this1);
};
shaderblox_uniforms_UVec2.__name__ = true;
shaderblox_uniforms_UVec2.__super__ = shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2;
shaderblox_uniforms_UVec2.prototype = $extend(shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec2.prototype,{
	apply: function() {
		this.gl.uniform2f(this.location,this.data[0],this.data[1]);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UVec2
});
var shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.__name__ = true;
shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array
};
var shaderblox_uniforms_UVec2Array = function(gl,name,index,arraySize,a) {
	this.arraySize = arraySize;
	if(a == null) {
		this.buffer = new Float32Array(arraySize * 2);
	}
	shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.call(this,gl,name,index,this.buffer);
};
shaderblox_uniforms_UVec2Array.__name__ = true;
shaderblox_uniforms_UVec2Array.__super__ = shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array;
shaderblox_uniforms_UVec2Array.prototype = $extend(shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.prototype,{
	apply: function() {
		this.gl.uniform2fv(this.location,this.data);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UVec2Array
});
var shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3 = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3.__name__ = true;
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3
};
var shaderblox_uniforms_UVec3 = function(gl,name,index,x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(3);
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
	shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3.call(this,gl,name,index,this1);
};
shaderblox_uniforms_UVec3.__name__ = true;
shaderblox_uniforms_UVec3.__super__ = shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3;
shaderblox_uniforms_UVec3.prototype = $extend(shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec3.prototype,{
	apply: function() {
		this.gl.uniform3f(this.location,this.data[0],this.data[1],this.data[2]);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UVec3
});
var shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4 = function(gl,name,index,data) {
	this.alwaysDirty = false;
	this.gl = gl;
	this.name = name;
	this.location = index;
	this.dirty = true;
	this.data = data;
};
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4.__name__ = true;
shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4.prototype = {
	__class__: shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4
};
var shaderblox_uniforms_UVec4 = function(gl,name,index,x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(4);
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
	this1[3] = w;
	shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4.call(this,gl,name,index,this1);
};
shaderblox_uniforms_UVec4.__name__ = true;
shaderblox_uniforms_UVec4.__super__ = shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4;
shaderblox_uniforms_UVec4.prototype = $extend(shaderblox_uniforms_UniformBase_$shaderblox_$uniforms_$Vec4.prototype,{
	apply: function() {
		this.gl.uniform4f(this.location,this.data[0],this.data[1],this.data[2],this.data[3]);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UVec4
});
var shaderblox_uniforms_UVec4Array = function(gl,name,index,arraySize,a) {
	this.arraySize = arraySize;
	if(a == null) {
		this.buffer = new Float32Array(arraySize * 4);
	}
	shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.call(this,gl,name,index,this.buffer);
};
shaderblox_uniforms_UVec4Array.__name__ = true;
shaderblox_uniforms_UVec4Array.__super__ = shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array;
shaderblox_uniforms_UVec4Array.prototype = $extend(shaderblox_uniforms_UniformBase_$js_$lib_$Float32Array.prototype,{
	apply: function() {
		this.gl.uniform4fv(this.location,this.data);
		this.dirty = false;
	}
	,__class__: shaderblox_uniforms_UVec4Array
});
var shaders_Resample = function(gl) {
	shaderblox_ShaderBase.call(this,gl);
};
shaders_Resample.__name__ = true;
shaders_Resample.__super__ = shaderblox_ShaderBase;
shaders_Resample.prototype = $extend(shaderblox_ShaderBase.prototype,{
	createProperties: function() {
		shaderblox_ShaderBase.prototype.createProperties.call(this);
		var instance = new shaderblox_uniforms_UTexture(this.gl,"texture",null,false);
		this.texture = instance;
		this._uniforms.push(instance);
		var instance1 = new shaderblox_attributes_FloatAttribute("vertexPosition",0,2);
		this.vertexPosition = instance1;
		this._attributes.push(instance1);
		this._aStride += 8;
	}
	,initSources: function() {
		this._vertSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nattribute vec2 vertexPosition;\n\tvarying vec2 texelCoord;\n\tvoid main(){\n\t\ttexelCoord = vertexPosition;\n\t\tgl_Position = vec4(vertexPosition*2.0 - 1.0, 0.0, 1.0 );\n\t}\n";
		this._fragSource = "\n#ifdef GL_ES\nprecision highp float;\nprecision highp sampler2D;\n#endif\n\nuniform sampler2D texture;\n\tvarying vec2 texelCoord;\n\tvoid main(){\n\t\tgl_FragColor = texture2D(texture, texelCoord);\n\t}\n";
	}
	,__class__: shaders_Resample
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Console.formatMode = Console.determineConsoleFormatMode();
Console.logPrefix = "<b,gray>><//> ";
Console.errorPrefix = "<b,red>></b> ";
Console.formatTagPattern = new EReg("<(/)?([^><{}\\s]*|{[^}<>]*})>","g");
FluidComponent.MAX_POINTERS = 10;
GPUCapabilities.capsCache = [];
SharedGPUResources.resources = new _$SharedGPUResources_Resources(null,null,null,null,null,null);
gluon_es2_GLContextDebug.constantNameMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[36193] = "HALF_FLOAT_OES";
	_g.h[0] = "NONE";
	_g.h[256] = "DEPTH_BUFFER_BIT";
	_g.h[1024] = "STENCIL_BUFFER_BIT";
	_g.h[16384] = "COLOR_BUFFER_BIT";
	_g.h[1] = "LINES";
	_g.h[2] = "LINE_LOOP";
	_g.h[3] = "LINE_STRIP";
	_g.h[4] = "TRIANGLES";
	_g.h[5] = "TRIANGLE_STRIP";
	_g.h[6] = "TRIANGLE_FAN";
	_g.h[768] = "SRC_COLOR";
	_g.h[769] = "ONE_MINUS_SRC_COLOR";
	_g.h[770] = "SRC_ALPHA";
	_g.h[771] = "ONE_MINUS_SRC_ALPHA";
	_g.h[772] = "DST_ALPHA";
	_g.h[773] = "ONE_MINUS_DST_ALPHA";
	_g.h[774] = "DST_COLOR";
	_g.h[775] = "ONE_MINUS_DST_COLOR";
	_g.h[776] = "SRC_ALPHA_SATURATE";
	_g.h[32774] = "FUNC_ADD";
	_g.h[32777] = "BLEND_EQUATION";
	_g.h[34877] = "BLEND_EQUATION_ALPHA";
	_g.h[32778] = "FUNC_SUBTRACT";
	_g.h[32779] = "FUNC_REVERSE_SUBTRACT";
	_g.h[32968] = "BLEND_DST_RGB";
	_g.h[32969] = "BLEND_SRC_RGB";
	_g.h[32970] = "BLEND_DST_ALPHA";
	_g.h[32971] = "BLEND_SRC_ALPHA";
	_g.h[32769] = "CONSTANT_COLOR";
	_g.h[32770] = "ONE_MINUS_CONSTANT_COLOR";
	_g.h[32771] = "CONSTANT_ALPHA";
	_g.h[32772] = "ONE_MINUS_CONSTANT_ALPHA";
	_g.h[32773] = "BLEND_COLOR";
	_g.h[34962] = "ARRAY_BUFFER";
	_g.h[34963] = "ELEMENT_ARRAY_BUFFER";
	_g.h[34964] = "ARRAY_BUFFER_BINDING";
	_g.h[34965] = "ELEMENT_ARRAY_BUFFER_BINDING";
	_g.h[35040] = "STREAM_DRAW";
	_g.h[35044] = "STATIC_DRAW";
	_g.h[35048] = "DYNAMIC_DRAW";
	_g.h[34660] = "BUFFER_SIZE";
	_g.h[34661] = "BUFFER_USAGE";
	_g.h[34342] = "CURRENT_VERTEX_ATTRIB";
	_g.h[1028] = "FRONT";
	_g.h[1029] = "BACK";
	_g.h[1032] = "FRONT_AND_BACK";
	_g.h[3553] = "TEXTURE_2D";
	_g.h[2884] = "CULL_FACE";
	_g.h[3042] = "BLEND";
	_g.h[3024] = "DITHER";
	_g.h[2960] = "STENCIL_TEST";
	_g.h[2929] = "DEPTH_TEST";
	_g.h[3089] = "SCISSOR_TEST";
	_g.h[32823] = "POLYGON_OFFSET_FILL";
	_g.h[32926] = "SAMPLE_ALPHA_TO_COVERAGE";
	_g.h[32928] = "SAMPLE_COVERAGE";
	_g.h[1280] = "INVALID_ENUM";
	_g.h[1281] = "INVALID_VALUE";
	_g.h[1282] = "INVALID_OPERATION";
	_g.h[1285] = "OUT_OF_MEMORY";
	_g.h[2304] = "CW";
	_g.h[2305] = "CCW";
	_g.h[2849] = "LINE_WIDTH";
	_g.h[33901] = "ALIASED_POINT_SIZE_RANGE";
	_g.h[33902] = "ALIASED_LINE_WIDTH_RANGE";
	_g.h[2885] = "CULL_FACE_MODE";
	_g.h[2886] = "FRONT_FACE";
	_g.h[2928] = "DEPTH_RANGE";
	_g.h[2930] = "DEPTH_WRITEMASK";
	_g.h[2931] = "DEPTH_CLEAR_VALUE";
	_g.h[2932] = "DEPTH_FUNC";
	_g.h[2961] = "STENCIL_CLEAR_VALUE";
	_g.h[2962] = "STENCIL_FUNC";
	_g.h[2964] = "STENCIL_FAIL";
	_g.h[2965] = "STENCIL_PASS_DEPTH_FAIL";
	_g.h[2966] = "STENCIL_PASS_DEPTH_PASS";
	_g.h[2967] = "STENCIL_REF";
	_g.h[2963] = "STENCIL_VALUE_MASK";
	_g.h[2968] = "STENCIL_WRITEMASK";
	_g.h[34816] = "STENCIL_BACK_FUNC";
	_g.h[34817] = "STENCIL_BACK_FAIL";
	_g.h[34818] = "STENCIL_BACK_PASS_DEPTH_FAIL";
	_g.h[34819] = "STENCIL_BACK_PASS_DEPTH_PASS";
	_g.h[36003] = "STENCIL_BACK_REF";
	_g.h[36004] = "STENCIL_BACK_VALUE_MASK";
	_g.h[36005] = "STENCIL_BACK_WRITEMASK";
	_g.h[2978] = "VIEWPORT";
	_g.h[3088] = "SCISSOR_BOX";
	_g.h[3106] = "COLOR_CLEAR_VALUE";
	_g.h[3107] = "COLOR_WRITEMASK";
	_g.h[3317] = "UNPACK_ALIGNMENT";
	_g.h[3333] = "PACK_ALIGNMENT";
	_g.h[3379] = "MAX_TEXTURE_SIZE";
	_g.h[3386] = "MAX_VIEWPORT_DIMS";
	_g.h[3408] = "SUBPIXEL_BITS";
	_g.h[3410] = "RED_BITS";
	_g.h[3411] = "GREEN_BITS";
	_g.h[3412] = "BLUE_BITS";
	_g.h[3413] = "ALPHA_BITS";
	_g.h[3414] = "DEPTH_BITS";
	_g.h[3415] = "STENCIL_BITS";
	_g.h[10752] = "POLYGON_OFFSET_UNITS";
	_g.h[32824] = "POLYGON_OFFSET_FACTOR";
	_g.h[32873] = "TEXTURE_BINDING_2D";
	_g.h[32936] = "SAMPLE_BUFFERS";
	_g.h[32937] = "SAMPLES";
	_g.h[32938] = "SAMPLE_COVERAGE_VALUE";
	_g.h[32939] = "SAMPLE_COVERAGE_INVERT";
	_g.h[34466] = "NUM_COMPRESSED_TEXTURE_FORMATS";
	_g.h[34467] = "COMPRESSED_TEXTURE_FORMATS";
	_g.h[4352] = "DONT_CARE";
	_g.h[4353] = "FASTEST";
	_g.h[4354] = "NICEST";
	_g.h[33170] = "GENERATE_MIPMAP_HINT";
	_g.h[5120] = "BYTE";
	_g.h[5121] = "UNSIGNED_BYTE";
	_g.h[5122] = "SHORT";
	_g.h[5123] = "UNSIGNED_SHORT";
	_g.h[5124] = "INT";
	_g.h[5125] = "UNSIGNED_INT";
	_g.h[5126] = "FLOAT";
	_g.h[5132] = "FIXED";
	_g.h[6402] = "DEPTH_COMPONENT";
	_g.h[6406] = "ALPHA";
	_g.h[6407] = "RGB";
	_g.h[6408] = "RGBA";
	_g.h[6409] = "LUMINANCE";
	_g.h[6410] = "LUMINANCE_ALPHA";
	_g.h[32819] = "UNSIGNED_SHORT_4_4_4_4";
	_g.h[32820] = "UNSIGNED_SHORT_5_5_5_1";
	_g.h[33635] = "UNSIGNED_SHORT_5_6_5";
	_g.h[35632] = "FRAGMENT_SHADER";
	_g.h[35633] = "VERTEX_SHADER";
	_g.h[34921] = "MAX_VERTEX_ATTRIBS";
	_g.h[36347] = "MAX_VERTEX_UNIFORM_VECTORS";
	_g.h[36348] = "MAX_VARYING_VECTORS";
	_g.h[35661] = "MAX_COMBINED_TEXTURE_IMAGE_UNITS";
	_g.h[35660] = "MAX_VERTEX_TEXTURE_IMAGE_UNITS";
	_g.h[34930] = "MAX_TEXTURE_IMAGE_UNITS";
	_g.h[36349] = "MAX_FRAGMENT_UNIFORM_VECTORS";
	_g.h[35663] = "SHADER_TYPE";
	_g.h[35712] = "DELETE_STATUS";
	_g.h[35714] = "LINK_STATUS";
	_g.h[35715] = "VALIDATE_STATUS";
	_g.h[35717] = "ATTACHED_SHADERS";
	_g.h[35718] = "ACTIVE_UNIFORMS";
	_g.h[35719] = "ACTIVE_UNIFORM_MAX_LENGTH";
	_g.h[35721] = "ACTIVE_ATTRIBUTES";
	_g.h[35722] = "ACTIVE_ATTRIBUTE_MAX_LENGTH";
	_g.h[35724] = "SHADING_LANGUAGE_VERSION";
	_g.h[35725] = "CURRENT_PROGRAM";
	_g.h[512] = "NEVER";
	_g.h[513] = "LESS";
	_g.h[514] = "EQUAL";
	_g.h[515] = "LEQUAL";
	_g.h[516] = "GREATER";
	_g.h[517] = "NOTEQUAL";
	_g.h[518] = "GEQUAL";
	_g.h[519] = "ALWAYS";
	_g.h[7680] = "KEEP";
	_g.h[7681] = "REPLACE";
	_g.h[7682] = "INCR";
	_g.h[7683] = "DECR";
	_g.h[5386] = "INVERT";
	_g.h[34055] = "INCR_WRAP";
	_g.h[34056] = "DECR_WRAP";
	_g.h[7936] = "VENDOR";
	_g.h[7937] = "RENDERER";
	_g.h[7938] = "VERSION";
	_g.h[7939] = "EXTENSIONS";
	_g.h[9728] = "NEAREST";
	_g.h[9729] = "LINEAR";
	_g.h[9984] = "NEAREST_MIPMAP_NEAREST";
	_g.h[9985] = "LINEAR_MIPMAP_NEAREST";
	_g.h[9986] = "NEAREST_MIPMAP_LINEAR";
	_g.h[9987] = "LINEAR_MIPMAP_LINEAR";
	_g.h[10240] = "TEXTURE_MAG_FILTER";
	_g.h[10241] = "TEXTURE_MIN_FILTER";
	_g.h[10242] = "TEXTURE_WRAP_S";
	_g.h[10243] = "TEXTURE_WRAP_T";
	_g.h[5890] = "TEXTURE";
	_g.h[34067] = "TEXTURE_CUBE_MAP";
	_g.h[34068] = "TEXTURE_BINDING_CUBE_MAP";
	_g.h[34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
	_g.h[34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
	_g.h[34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
	_g.h[34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
	_g.h[34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
	_g.h[34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
	_g.h[34076] = "MAX_CUBE_MAP_TEXTURE_SIZE";
	_g.h[33984] = "TEXTURE0";
	_g.h[33985] = "TEXTURE1";
	_g.h[33986] = "TEXTURE2";
	_g.h[33987] = "TEXTURE3";
	_g.h[33988] = "TEXTURE4";
	_g.h[33989] = "TEXTURE5";
	_g.h[33990] = "TEXTURE6";
	_g.h[33991] = "TEXTURE7";
	_g.h[33992] = "TEXTURE8";
	_g.h[33993] = "TEXTURE9";
	_g.h[33994] = "TEXTURE10";
	_g.h[33995] = "TEXTURE11";
	_g.h[33996] = "TEXTURE12";
	_g.h[33997] = "TEXTURE13";
	_g.h[33998] = "TEXTURE14";
	_g.h[33999] = "TEXTURE15";
	_g.h[34000] = "TEXTURE16";
	_g.h[34001] = "TEXTURE17";
	_g.h[34002] = "TEXTURE18";
	_g.h[34003] = "TEXTURE19";
	_g.h[34004] = "TEXTURE20";
	_g.h[34005] = "TEXTURE21";
	_g.h[34006] = "TEXTURE22";
	_g.h[34007] = "TEXTURE23";
	_g.h[34008] = "TEXTURE24";
	_g.h[34009] = "TEXTURE25";
	_g.h[34010] = "TEXTURE26";
	_g.h[34011] = "TEXTURE27";
	_g.h[34012] = "TEXTURE28";
	_g.h[34013] = "TEXTURE29";
	_g.h[34014] = "TEXTURE30";
	_g.h[34015] = "TEXTURE31";
	_g.h[34016] = "ACTIVE_TEXTURE";
	_g.h[10497] = "REPEAT";
	_g.h[33071] = "CLAMP_TO_EDGE";
	_g.h[33648] = "MIRRORED_REPEAT";
	_g.h[35664] = "FLOAT_VEC2";
	_g.h[35665] = "FLOAT_VEC3";
	_g.h[35666] = "FLOAT_VEC4";
	_g.h[35667] = "INT_VEC2";
	_g.h[35668] = "INT_VEC3";
	_g.h[35669] = "INT_VEC4";
	_g.h[35670] = "BOOL";
	_g.h[35671] = "BOOL_VEC2";
	_g.h[35672] = "BOOL_VEC3";
	_g.h[35673] = "BOOL_VEC4";
	_g.h[35674] = "FLOAT_MAT2";
	_g.h[35675] = "FLOAT_MAT3";
	_g.h[35676] = "FLOAT_MAT4";
	_g.h[35678] = "SAMPLER_2D";
	_g.h[35680] = "SAMPLER_CUBE";
	_g.h[34338] = "VERTEX_ATTRIB_ARRAY_ENABLED";
	_g.h[34339] = "VERTEX_ATTRIB_ARRAY_SIZE";
	_g.h[34340] = "VERTEX_ATTRIB_ARRAY_STRIDE";
	_g.h[34341] = "VERTEX_ATTRIB_ARRAY_TYPE";
	_g.h[34922] = "VERTEX_ATTRIB_ARRAY_NORMALIZED";
	_g.h[34373] = "VERTEX_ATTRIB_ARRAY_POINTER";
	_g.h[34975] = "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING";
	_g.h[35738] = "IMPLEMENTATION_COLOR_READ_TYPE";
	_g.h[35739] = "IMPLEMENTATION_COLOR_READ_FORMAT";
	_g.h[35713] = "COMPILE_STATUS";
	_g.h[35716] = "INFO_LOG_LENGTH";
	_g.h[35720] = "SHADER_SOURCE_LENGTH";
	_g.h[36346] = "SHADER_COMPILER";
	_g.h[36344] = "SHADER_BINARY_FORMATS";
	_g.h[36345] = "NUM_SHADER_BINARY_FORMATS";
	_g.h[36336] = "LOW_FLOAT";
	_g.h[36337] = "MEDIUM_FLOAT";
	_g.h[36338] = "HIGH_FLOAT";
	_g.h[36339] = "LOW_INT";
	_g.h[36340] = "MEDIUM_INT";
	_g.h[36341] = "HIGH_INT";
	_g.h[36160] = "FRAMEBUFFER";
	_g.h[36161] = "RENDERBUFFER";
	_g.h[32854] = "RGBA4";
	_g.h[32855] = "RGB5_A1";
	_g.h[36194] = "RGB565";
	_g.h[33189] = "DEPTH_COMPONENT16";
	_g.h[36168] = "STENCIL_INDEX8";
	_g.h[36162] = "RENDERBUFFER_WIDTH";
	_g.h[36163] = "RENDERBUFFER_HEIGHT";
	_g.h[36164] = "RENDERBUFFER_INTERNAL_FORMAT";
	_g.h[36176] = "RENDERBUFFER_RED_SIZE";
	_g.h[36177] = "RENDERBUFFER_GREEN_SIZE";
	_g.h[36178] = "RENDERBUFFER_BLUE_SIZE";
	_g.h[36179] = "RENDERBUFFER_ALPHA_SIZE";
	_g.h[36180] = "RENDERBUFFER_DEPTH_SIZE";
	_g.h[36181] = "RENDERBUFFER_STENCIL_SIZE";
	_g.h[36048] = "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
	_g.h[36049] = "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
	_g.h[36050] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
	_g.h[36051] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
	_g.h[36064] = "COLOR_ATTACHMENT0";
	_g.h[36096] = "DEPTH_ATTACHMENT";
	_g.h[36128] = "STENCIL_ATTACHMENT";
	_g.h[36053] = "FRAMEBUFFER_COMPLETE";
	_g.h[36054] = "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
	_g.h[36055] = "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
	_g.h[36057] = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
	_g.h[36061] = "FRAMEBUFFER_UNSUPPORTED";
	_g.h[36006] = "FRAMEBUFFER_BINDING";
	_g.h[36007] = "RENDERBUFFER_BINDING";
	_g.h[34024] = "MAX_RENDERBUFFER_SIZE";
	_g.h[1286] = "INVALID_FRAMEBUFFER_OPERATION";
	_g.h[3074] = "READ_BUFFER";
	_g.h[3314] = "UNPACK_ROW_LENGTH";
	_g.h[3315] = "UNPACK_SKIP_ROWS";
	_g.h[3316] = "UNPACK_SKIP_PIXELS";
	_g.h[3330] = "PACK_ROW_LENGTH";
	_g.h[3331] = "PACK_SKIP_ROWS";
	_g.h[3332] = "PACK_SKIP_PIXELS";
	_g.h[6144] = "COLOR";
	_g.h[6145] = "DEPTH";
	_g.h[6146] = "STENCIL";
	_g.h[6403] = "RED";
	_g.h[32849] = "RGB8";
	_g.h[32856] = "RGBA8";
	_g.h[32857] = "RGB10_A2";
	_g.h[32874] = "TEXTURE_BINDING_3D";
	_g.h[32877] = "UNPACK_SKIP_IMAGES";
	_g.h[32878] = "UNPACK_IMAGE_HEIGHT";
	_g.h[32879] = "TEXTURE_3D";
	_g.h[32882] = "TEXTURE_WRAP_R";
	_g.h[32883] = "MAX_3D_TEXTURE_SIZE";
	_g.h[33640] = "UNSIGNED_INT_2_10_10_10_REV";
	_g.h[33000] = "MAX_ELEMENTS_VERTICES";
	_g.h[33001] = "MAX_ELEMENTS_INDICES";
	_g.h[33082] = "TEXTURE_MIN_LOD";
	_g.h[33083] = "TEXTURE_MAX_LOD";
	_g.h[33084] = "TEXTURE_BASE_LEVEL";
	_g.h[33085] = "TEXTURE_MAX_LEVEL";
	_g.h[32775] = "MIN";
	_g.h[32776] = "MAX";
	_g.h[33190] = "DEPTH_COMPONENT24";
	_g.h[34045] = "MAX_TEXTURE_LOD_BIAS";
	_g.h[34892] = "TEXTURE_COMPARE_MODE";
	_g.h[34893] = "TEXTURE_COMPARE_FUNC";
	_g.h[34917] = "CURRENT_QUERY";
	_g.h[34918] = "QUERY_RESULT";
	_g.h[34919] = "QUERY_RESULT_AVAILABLE";
	_g.h[35004] = "BUFFER_MAPPED";
	_g.h[35005] = "BUFFER_MAP_POINTER";
	_g.h[35041] = "STREAM_READ";
	_g.h[35042] = "STREAM_COPY";
	_g.h[35045] = "STATIC_READ";
	_g.h[35046] = "STATIC_COPY";
	_g.h[35049] = "DYNAMIC_READ";
	_g.h[35050] = "DYNAMIC_COPY";
	_g.h[34852] = "MAX_DRAW_BUFFERS";
	_g.h[34853] = "DRAW_BUFFER0";
	_g.h[34854] = "DRAW_BUFFER1";
	_g.h[34855] = "DRAW_BUFFER2";
	_g.h[34856] = "DRAW_BUFFER3";
	_g.h[34857] = "DRAW_BUFFER4";
	_g.h[34858] = "DRAW_BUFFER5";
	_g.h[34859] = "DRAW_BUFFER6";
	_g.h[34860] = "DRAW_BUFFER7";
	_g.h[34861] = "DRAW_BUFFER8";
	_g.h[34862] = "DRAW_BUFFER9";
	_g.h[34863] = "DRAW_BUFFER10";
	_g.h[34864] = "DRAW_BUFFER11";
	_g.h[34865] = "DRAW_BUFFER12";
	_g.h[34866] = "DRAW_BUFFER13";
	_g.h[34867] = "DRAW_BUFFER14";
	_g.h[34868] = "DRAW_BUFFER15";
	_g.h[35657] = "MAX_FRAGMENT_UNIFORM_COMPONENTS";
	_g.h[35658] = "MAX_VERTEX_UNIFORM_COMPONENTS";
	_g.h[35679] = "SAMPLER_3D";
	_g.h[35682] = "SAMPLER_2D_SHADOW";
	_g.h[35723] = "FRAGMENT_SHADER_DERIVATIVE_HINT";
	_g.h[35051] = "PIXEL_PACK_BUFFER";
	_g.h[35052] = "PIXEL_UNPACK_BUFFER";
	_g.h[35053] = "PIXEL_PACK_BUFFER_BINDING";
	_g.h[35055] = "PIXEL_UNPACK_BUFFER_BINDING";
	_g.h[35685] = "FLOAT_MAT2x3";
	_g.h[35686] = "FLOAT_MAT2x4";
	_g.h[35687] = "FLOAT_MAT3x2";
	_g.h[35688] = "FLOAT_MAT3x4";
	_g.h[35689] = "FLOAT_MAT4x2";
	_g.h[35690] = "FLOAT_MAT4x3";
	_g.h[35904] = "SRGB";
	_g.h[35905] = "SRGB8";
	_g.h[35907] = "SRGB8_ALPHA8";
	_g.h[34894] = "COMPARE_REF_TO_TEXTURE";
	_g.h[33307] = "MAJOR_VERSION";
	_g.h[33308] = "MINOR_VERSION";
	_g.h[33309] = "NUM_EXTENSIONS";
	_g.h[34836] = "RGBA32F";
	_g.h[34837] = "RGB32F";
	_g.h[34842] = "RGBA16F";
	_g.h[34843] = "RGB16F";
	_g.h[35069] = "VERTEX_ATTRIB_ARRAY_INTEGER";
	_g.h[35071] = "MAX_ARRAY_TEXTURE_LAYERS";
	_g.h[35076] = "MIN_PROGRAM_TEXEL_OFFSET";
	_g.h[35077] = "MAX_PROGRAM_TEXEL_OFFSET";
	_g.h[35659] = "MAX_VARYING_COMPONENTS";
	_g.h[35866] = "TEXTURE_2D_ARRAY";
	_g.h[35869] = "TEXTURE_BINDING_2D_ARRAY";
	_g.h[35898] = "R11F_G11F_B10F";
	_g.h[35899] = "UNSIGNED_INT_10F_11F_11F_REV";
	_g.h[35901] = "RGB9_E5";
	_g.h[35902] = "UNSIGNED_INT_5_9_9_9_REV";
	_g.h[35958] = "TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH";
	_g.h[35967] = "TRANSFORM_FEEDBACK_BUFFER_MODE";
	_g.h[35968] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS";
	_g.h[35971] = "TRANSFORM_FEEDBACK_VARYINGS";
	_g.h[35972] = "TRANSFORM_FEEDBACK_BUFFER_START";
	_g.h[35973] = "TRANSFORM_FEEDBACK_BUFFER_SIZE";
	_g.h[35976] = "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN";
	_g.h[35977] = "RASTERIZER_DISCARD";
	_g.h[35978] = "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS";
	_g.h[35979] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS";
	_g.h[35980] = "INTERLEAVED_ATTRIBS";
	_g.h[35981] = "SEPARATE_ATTRIBS";
	_g.h[35982] = "TRANSFORM_FEEDBACK_BUFFER";
	_g.h[35983] = "TRANSFORM_FEEDBACK_BUFFER_BINDING";
	_g.h[36208] = "RGBA32UI";
	_g.h[36209] = "RGB32UI";
	_g.h[36214] = "RGBA16UI";
	_g.h[36215] = "RGB16UI";
	_g.h[36220] = "RGBA8UI";
	_g.h[36221] = "RGB8UI";
	_g.h[36226] = "RGBA32I";
	_g.h[36227] = "RGB32I";
	_g.h[36232] = "RGBA16I";
	_g.h[36233] = "RGB16I";
	_g.h[36238] = "RGBA8I";
	_g.h[36239] = "RGB8I";
	_g.h[36244] = "RED_INTEGER";
	_g.h[36248] = "RGB_INTEGER";
	_g.h[36249] = "RGBA_INTEGER";
	_g.h[36289] = "SAMPLER_2D_ARRAY";
	_g.h[36292] = "SAMPLER_2D_ARRAY_SHADOW";
	_g.h[36293] = "SAMPLER_CUBE_SHADOW";
	_g.h[36294] = "UNSIGNED_INT_VEC2";
	_g.h[36295] = "UNSIGNED_INT_VEC3";
	_g.h[36296] = "UNSIGNED_INT_VEC4";
	_g.h[36298] = "INT_SAMPLER_2D";
	_g.h[36299] = "INT_SAMPLER_3D";
	_g.h[36300] = "INT_SAMPLER_CUBE";
	_g.h[36303] = "INT_SAMPLER_2D_ARRAY";
	_g.h[36306] = "UNSIGNED_INT_SAMPLER_2D";
	_g.h[36307] = "UNSIGNED_INT_SAMPLER_3D";
	_g.h[36308] = "UNSIGNED_INT_SAMPLER_CUBE";
	_g.h[36311] = "UNSIGNED_INT_SAMPLER_2D_ARRAY";
	_g.h[37151] = "BUFFER_ACCESS_FLAGS";
	_g.h[37152] = "BUFFER_MAP_LENGTH";
	_g.h[37153] = "BUFFER_MAP_OFFSET";
	_g.h[36012] = "DEPTH_COMPONENT32F";
	_g.h[36013] = "DEPTH32F_STENCIL8";
	_g.h[36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
	_g.h[33296] = "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
	_g.h[33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
	_g.h[33298] = "FRAMEBUFFER_ATTACHMENT_RED_SIZE";
	_g.h[33299] = "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
	_g.h[33300] = "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
	_g.h[33301] = "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
	_g.h[33302] = "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
	_g.h[33303] = "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
	_g.h[33304] = "FRAMEBUFFER_DEFAULT";
	_g.h[33305] = "FRAMEBUFFER_UNDEFINED";
	_g.h[33306] = "DEPTH_STENCIL_ATTACHMENT";
	_g.h[34041] = "DEPTH_STENCIL";
	_g.h[34042] = "UNSIGNED_INT_24_8";
	_g.h[35056] = "DEPTH24_STENCIL8";
	_g.h[35863] = "UNSIGNED_NORMALIZED";
	_g.h[36008] = "READ_FRAMEBUFFER";
	_g.h[36009] = "DRAW_FRAMEBUFFER";
	_g.h[36010] = "READ_FRAMEBUFFER_BINDING";
	_g.h[36011] = "RENDERBUFFER_SAMPLES";
	_g.h[36052] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER";
	_g.h[36063] = "MAX_COLOR_ATTACHMENTS";
	_g.h[36065] = "COLOR_ATTACHMENT1";
	_g.h[36066] = "COLOR_ATTACHMENT2";
	_g.h[36067] = "COLOR_ATTACHMENT3";
	_g.h[36068] = "COLOR_ATTACHMENT4";
	_g.h[36069] = "COLOR_ATTACHMENT5";
	_g.h[36070] = "COLOR_ATTACHMENT6";
	_g.h[36071] = "COLOR_ATTACHMENT7";
	_g.h[36072] = "COLOR_ATTACHMENT8";
	_g.h[36073] = "COLOR_ATTACHMENT9";
	_g.h[36074] = "COLOR_ATTACHMENT10";
	_g.h[36075] = "COLOR_ATTACHMENT11";
	_g.h[36076] = "COLOR_ATTACHMENT12";
	_g.h[36077] = "COLOR_ATTACHMENT13";
	_g.h[36078] = "COLOR_ATTACHMENT14";
	_g.h[36079] = "COLOR_ATTACHMENT15";
	_g.h[36080] = "COLOR_ATTACHMENT16";
	_g.h[36081] = "COLOR_ATTACHMENT17";
	_g.h[36082] = "COLOR_ATTACHMENT18";
	_g.h[36083] = "COLOR_ATTACHMENT19";
	_g.h[36084] = "COLOR_ATTACHMENT20";
	_g.h[36085] = "COLOR_ATTACHMENT21";
	_g.h[36086] = "COLOR_ATTACHMENT22";
	_g.h[36087] = "COLOR_ATTACHMENT23";
	_g.h[36088] = "COLOR_ATTACHMENT24";
	_g.h[36089] = "COLOR_ATTACHMENT25";
	_g.h[36090] = "COLOR_ATTACHMENT26";
	_g.h[36091] = "COLOR_ATTACHMENT27";
	_g.h[36092] = "COLOR_ATTACHMENT28";
	_g.h[36093] = "COLOR_ATTACHMENT29";
	_g.h[36094] = "COLOR_ATTACHMENT30";
	_g.h[36095] = "COLOR_ATTACHMENT31";
	_g.h[36182] = "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
	_g.h[36183] = "MAX_SAMPLES";
	_g.h[5131] = "HALF_FLOAT";
	_g.h[8] = "MAP_INVALIDATE_BUFFER_BIT";
	_g.h[16] = "MAP_FLUSH_EXPLICIT_BIT";
	_g.h[32] = "MAP_UNSYNCHRONIZED_BIT";
	_g.h[33319] = "RG";
	_g.h[33320] = "RG_INTEGER";
	_g.h[33321] = "R8";
	_g.h[33323] = "RG8";
	_g.h[33325] = "R16F";
	_g.h[33326] = "R32F";
	_g.h[33327] = "RG16F";
	_g.h[33328] = "RG32F";
	_g.h[33329] = "R8I";
	_g.h[33330] = "R8UI";
	_g.h[33331] = "R16I";
	_g.h[33332] = "R16UI";
	_g.h[33333] = "R32I";
	_g.h[33334] = "R32UI";
	_g.h[33335] = "RG8I";
	_g.h[33336] = "RG8UI";
	_g.h[33337] = "RG16I";
	_g.h[33338] = "RG16UI";
	_g.h[33339] = "RG32I";
	_g.h[33340] = "RG32UI";
	_g.h[34229] = "VERTEX_ARRAY_BINDING";
	_g.h[36756] = "R8_SNORM";
	_g.h[36757] = "RG8_SNORM";
	_g.h[36758] = "RGB8_SNORM";
	_g.h[36759] = "RGBA8_SNORM";
	_g.h[36764] = "SIGNED_NORMALIZED";
	_g.h[36201] = "PRIMITIVE_RESTART_FIXED_INDEX";
	_g.h[35345] = "UNIFORM_BUFFER";
	_g.h[35368] = "UNIFORM_BUFFER_BINDING";
	_g.h[35369] = "UNIFORM_BUFFER_START";
	_g.h[35370] = "UNIFORM_BUFFER_SIZE";
	_g.h[35371] = "MAX_VERTEX_UNIFORM_BLOCKS";
	_g.h[35373] = "MAX_FRAGMENT_UNIFORM_BLOCKS";
	_g.h[35374] = "MAX_COMBINED_UNIFORM_BLOCKS";
	_g.h[35375] = "MAX_UNIFORM_BUFFER_BINDINGS";
	_g.h[35376] = "MAX_UNIFORM_BLOCK_SIZE";
	_g.h[35377] = "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS";
	_g.h[35379] = "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS";
	_g.h[35380] = "UNIFORM_BUFFER_OFFSET_ALIGNMENT";
	_g.h[35381] = "ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH";
	_g.h[35382] = "ACTIVE_UNIFORM_BLOCKS";
	_g.h[35383] = "UNIFORM_TYPE";
	_g.h[35384] = "UNIFORM_SIZE";
	_g.h[35385] = "UNIFORM_NAME_LENGTH";
	_g.h[35386] = "UNIFORM_BLOCK_INDEX";
	_g.h[35387] = "UNIFORM_OFFSET";
	_g.h[35388] = "UNIFORM_ARRAY_STRIDE";
	_g.h[35389] = "UNIFORM_MATRIX_STRIDE";
	_g.h[35390] = "UNIFORM_IS_ROW_MAJOR";
	_g.h[35391] = "UNIFORM_BLOCK_BINDING";
	_g.h[35392] = "UNIFORM_BLOCK_DATA_SIZE";
	_g.h[35393] = "UNIFORM_BLOCK_NAME_LENGTH";
	_g.h[35394] = "UNIFORM_BLOCK_ACTIVE_UNIFORMS";
	_g.h[35395] = "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES";
	_g.h[35396] = "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER";
	_g.h[35398] = "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER";
	_g.h[37154] = "MAX_VERTEX_OUTPUT_COMPONENTS";
	_g.h[37157] = "MAX_FRAGMENT_INPUT_COMPONENTS";
	_g.h[37137] = "MAX_SERVER_WAIT_TIMEOUT";
	_g.h[37138] = "OBJECT_TYPE";
	_g.h[37139] = "SYNC_CONDITION";
	_g.h[37140] = "SYNC_STATUS";
	_g.h[37141] = "SYNC_FLAGS";
	_g.h[37142] = "SYNC_FENCE";
	_g.h[37143] = "SYNC_GPU_COMMANDS_COMPLETE";
	_g.h[37144] = "UNSIGNALED";
	_g.h[37145] = "SIGNALED";
	_g.h[37146] = "ALREADY_SIGNALED";
	_g.h[37147] = "TIMEOUT_EXPIRED";
	_g.h[37148] = "CONDITION_SATISFIED";
	_g.h[37149] = "WAIT_FAILED";
	_g.h[35070] = "VERTEX_ATTRIB_ARRAY_DIVISOR";
	_g.h[35887] = "ANY_SAMPLES_PASSED";
	_g.h[36202] = "ANY_SAMPLES_PASSED_CONSERVATIVE";
	_g.h[35097] = "SAMPLER_BINDING";
	_g.h[36975] = "RGB10_A2UI";
	_g.h[36418] = "TEXTURE_SWIZZLE_R";
	_g.h[36419] = "TEXTURE_SWIZZLE_G";
	_g.h[36420] = "TEXTURE_SWIZZLE_B";
	_g.h[36421] = "TEXTURE_SWIZZLE_A";
	_g.h[6404] = "GREEN";
	_g.h[6405] = "BLUE";
	_g.h[36255] = "INT_2_10_10_10_REV";
	_g.h[36386] = "TRANSFORM_FEEDBACK";
	_g.h[36387] = "TRANSFORM_FEEDBACK_PAUSED";
	_g.h[36388] = "TRANSFORM_FEEDBACK_ACTIVE";
	_g.h[36389] = "TRANSFORM_FEEDBACK_BINDING";
	_g.h[33367] = "PROGRAM_BINARY_RETRIEVABLE_HINT";
	_g.h[34625] = "PROGRAM_BINARY_LENGTH";
	_g.h[34814] = "NUM_PROGRAM_BINARY_FORMATS";
	_g.h[34815] = "PROGRAM_BINARY_FORMATS";
	_g.h[37488] = "COMPRESSED_R11_EAC";
	_g.h[37489] = "COMPRESSED_SIGNED_R11_EAC";
	_g.h[37490] = "COMPRESSED_RG11_EAC";
	_g.h[37491] = "COMPRESSED_SIGNED_RG11_EAC";
	_g.h[37492] = "COMPRESSED_RGB8_ETC2";
	_g.h[37493] = "COMPRESSED_SRGB8_ETC2";
	_g.h[37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
	_g.h[37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
	_g.h[37496] = "COMPRESSED_RGBA8_ETC2_EAC";
	_g.h[37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
	_g.h[37167] = "TEXTURE_IMMUTABLE_FORMAT";
	_g.h[36203] = "MAX_ELEMENT_INDEX";
	_g.h[37760] = "NUM_SAMPLE_COUNTS";
	_g.h[33503] = "TEXTURE_IMMUTABLE_LEVELS";
	$r = _g;
	return $r;
}(this));
shaderblox_uniforms_UTexture.lastActiveTexture = -1;
MainWeb.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
